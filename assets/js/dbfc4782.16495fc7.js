"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[749],{1895:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"foldables-and-friends","metadata":{"permalink":"/blog/foldables-and-friends","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2025-09-04-hs-ch14/index.md","source":"@site/blog/2025-09-04-hs-ch14/index.md","title":"Foldables and friends","description":"banner","date":"2025-09-04T00:00:00.000Z","tags":[{"inline":false,"label":"Haskell","permalink":"/blog/tags/haskell","description":"Haskell tag description"},{"inline":false,"label":"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d","permalink":"/blog/tags/functional-programming","description":"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ub7ec\ub2e4\uc784\uc5d0 \ub300\ud55c \uae00"}],"readingTime":17.36,"hasTruncateMarker":true,"authors":[{"name":"dream2405","title":"\uac8c\uc73c\ub978 \ub300\ud559\uc0dd","socials":{"github":"https://github.com/dream2405"},"imageURL":"https://github.com/dream2405.png","key":"dream2405","page":null}],"frontMatter":{"slug":"foldables-and-friends","title":"Foldables and friends","authors":["dream2405"],"tags":["haskell","functional_programming"],"image":"./image.png"},"unlisted":false,"nextItem":{"title":"An Introduction to wait-free algorithms","permalink":"/blog/intro-wait-free-algorithms"}},"content":"![banner](./image.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n\uc774 \uae00\uc5d0\uc11c\ub294 \ud558\uc2a4\ucf08\uc5d0\uc11c \ub370\uc774\ud130 \uad6c\uc870\uc758 \uac12\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294 \uc138 \uac00\uc9c0 \uc77c\ubc18\uc801\uc778 \ud328\ud134\uc744 \uc18c\uac1c\ud55c\ub2e4. \uba3c\uc800 \uac12\uc744 \uacb0\ud569\ud558\ub294 \ub370 \uacb0\ud569 \uc5f0\uc0b0\uc790(associative operator)\ub97c \uc0ac\uc6a9\ud558\ub294 **\ubaa8\ub178\uc774\ub4dc(monoids)** \ub85c \uc2dc\uc791\ud574, \uadf8 \ub2e4\uc74c\uc73c\ub85c \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c \ud3f4\ub529(folding) \uac1c\ub150\uc744 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc73c\ub85c \uc77c\ubc18\ud654\ud558\ub294 **\ud3f4\ub354\ube14(foldables)** \uc744 \uc0b4\ud3b4\ubcf4\uace0, \ub9e4\ud551(mapping)\uc758 \uac1c\ub150\uc744 \ub354\uc6b1 \uc77c\ubc18\ud654\ud558\ub294 **\ud2b8\ub798\ubc84\uc11c\ube14(traversables)** \ub85c \ub9c8\ubb34\ub9ac\ud560 \uac83\uc774\ub2e4.\\n\\n## Monoids\\n\uc218\ud559\uc5d0\uc11c \ubaa8\ub178\uc774\ub4dc\ub780 \uc9d1\ud569\uc758 \ub450 \uc6d0\uc18c\ub97c \uacb0\ud569\ud558\ub294 \uacb0\ud569 \uc5f0\uc0b0\uc790(associative operator)\uc640, \uadf8 \uc5f0\uc0b0\uc790\uc5d0 \ub300\ud55c \ud56d\ub4f1\uc6d0(identity element)\uc744 \uac16\ucd98 \uc9d1\ud569\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc815\uc218 \uc9d1\ud569\uc740 \ub367\uc148 \uc5f0\uc0b0\uacfc \ud56d\ub4f1\uc6d0\uc778 0\uc73c\ub85c \ubaa8\ub178\uc774\ub4dc\ub97c \ud615\uc131\ud55c\ub2e4. \\n\\n\ud558\uc2a4\ucf08\uc5d0\uc11c\ub294 \ubaa8\ub178\uc774\ub4dc\uc758 \uac1c\ub150\uc774 \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc7a5 \ud074\ub798\uc2a4 \uc120\uc5b8\uc73c\ub85c \uad6c\ud604\ub41c\ub2e4.\\n\\n```haskell\\nclass Monoid a where\\n    mempty  :: a\\n    mappend :: a -> a -> a\\n\\n    mconcat :: [a] -> a\\n    mconcat = foldr mappend mempty\\n```\\n\uc989, \uc5b4\ub5a4 \ud0c0\uc785\uc774 `Monoid` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \ub418\ub824\uba74, \ubaa8\ub178\uc774\ub4dc\uc758 \ud56d\ub4f1\uc6d0\uacfc \uacb0\ud569 \uc5f0\uc0b0\uc790\uc758 \uc5ed\ud560\uc744 \uc218\ud589\ud558\ub294 `mempty` \uac12\uacfc `mappend` \ud568\uc218\ub97c \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4. \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294 `mappend` \ud568\uc218 \uc591\ucabd\uc5d0 \uc5ed\ub530\uc634\ud45c(back quote)\ub97c \ubd99\uc5ec ``x `mappend` y``\uc640 \uac19\uc774 \uc911\uc704(infix) \uc5f0\uc0b0\uc790\ub85c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\ub2e4.\\n\\n`Monoid` \ud074\ub798\uc2a4\ub294 \uc774 \ub450 \uac00\uc9c0 \uae30\ubcf8 \uc694\uc18c \uc678\uc5d0\ub3c4, \ub9ac\uc2a4\ud2b8\uc758 \uac01 cons\ub97c `mappend`\ub85c, \ube44\uc5b4\uc788\ub294 \ub9ac\uc2a4\ud2b8(`[]`)\ub97c `mempty`\ub85c \ub300\uccb4\ud558\uc5ec \ub9ac\uc2a4\ud2b8\uc758 \uac12\ub4e4\uc744 \ubaa8\ub450 \uacb0\ud569\ud558\ub294 `mconcat` \ud568\uc218\ub3c4 \uae30\ubcf8 \uc815\uc758\ub85c \uc81c\uacf5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `[x,y,z]` \ud615\ud0dc\uc758 \ub9ac\uc2a4\ud2b8\uc5d0 mconcat\uc744 \uc801\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n``x `mappend` (y `mappend` (z `mappend` mempty))``\\n\\n\uc218\ud559\uc5d0\uc11c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, `Monoid` \ud074\ub798\uc2a4\uc758 \ub450 \uae30\ubcf8 \uc694\uc18c\ub294 \ub2e4\uc74c\uc758 \ud56d\ub4f1 \ubc95\uce59\uacfc \uacb0\ud569 \ubc95\uce59\uc744 \ubc18\ub4dc\uc2dc \ub9cc\uc871\ud574\uc57c \ud55c\ub2e4.\\n- ``mempty `mappend` x`` = `x`\\n- ``x `mappend` mempty`` = `x`\\n- ``x `mappend` (y `mappend` z)`` = ``(x `mappend` y) `mappend` z``\\n\\n\uc608\ub97c \ub4e4\uc5b4, \uc774 \ubc95\uce59\ub4e4\uc744 \uc0ac\uc6a9\ud558\uba74 `mconcat [x,y,z]`\uc758 \uacb0\uacfc\ub294 \ub354 \uac04\ub2e8\ud55c \ud615\ud0dc\ub85c \uc791\uc131\ub420 \uc218 \uc788\ub2e4. \ubaa8\ub178\uc774\ub4dc \ubc95\uce59\uc740 \uad04\ud638\ub098 `mempty`\uac00 \uacb0\uacfc\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc74c\uc744 \ubcf4\uc7a5\ud558\ubbc0\ub85c, \uc774\ub97c \uc0dd\ub7b5\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nx `mappend` y `mappend` z\\n```\\n:::info\\n\\n\ud5a5\ud6c4 \ud558\uc2a4\ucf08\uc758 `Monoid` \ud074\ub798\uc2a4\ub294 \ub450 \uac1c\uc758 \uac1c\ubcc4 \ud074\ub798\uc2a4\ub85c \ub098\ub260 \uc218\ub3c4 \uc788\ub2e4.  \\n\ud558\ub098\ub294 \uacb0\ud569 \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud558\ub294 \ud074\ub798\uc2a4\uc774\uace0, \ub2e4\ub978 \ud558\ub098\ub294 \ud56d\ub4f1\uc6d0\uc744 \uc81c\uacf5\ud558\ub294 \ud074\ub798\uc2a4\uc774\ub2e4.\\n\\n:::\\n\\n### Examples\\n\\n`Data.Monoid` \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\ub294 \uc5ec\ub7ec \ud45c\uc900 \ubaa8\ub178\uc774\ub4dc\uac00 \uc81c\uacf5\ub41c\ub2e4. \uac00\uc7a5 \uac04\ub2e8\ud55c \uc608\ub294 \ub9ac\uc2a4\ud2b8 \ubaa8\ub178\uc774\ub4dc\uc778\ub370, \uc5ec\uae30\uc11c `mempty`\uc640 `mappend`\ub294 \uac01\uac01 \ube48 \ub9ac\uc2a4\ud2b8\uc640 \ub9ac\uc2a4\ud2b8 \uacb0\ud569 \uc5f0\uc0b0\uc790\ub85c \uad6c\ud604\ub41c\ub2e4\\n```haskell\\ninstance Monoid [a] where\\n    -- mempty :: [a]\\n    mempty = []\\n  \\n    -- mappend :: [a] -> [a] -> [a]\\n    mappend = (++)\\n```\\n:::note\\n\\n\uba54\uc11c\ub4dc\uc758 \uc774\ub984 `mempty`\uc640 `mappend`\ub294 \uc774 \uc778\uc2a4\ud134\uc2a4\uc5d0\uc11c \ub530\uc628 \uac83\uc774\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc73c\ub85c \ubaa8\ub178\uc774\ub4dc\uc758 \uae30\ubcf8 \uc5f0\uc0b0\uc774 \ubb34\uc870\uac74 \ube48 \uac12\uc774\ub098 \uac12\uc744 \ucd94\uac00\ud558\ub294 \uae30\ub2a5\uc5d0 \ud574\ub2f9\ud560 \ud544\uc694\ub294 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc774\ub984 \uc120\ud0dd\uc774 \ub2e4\uc18c \uc544\uc27d\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.  \\n\ubaa8\ub178\uc774\ub4dc \ubc95\uce59\uc744 \ub9cc\uc871\ud558\ub294 \ub450 \uac1c\uc758 \uae30\ubcf8 \uc5f0\uc0b0\ub9cc \ub9cc\uc871\ud558\uba74 \ucda9\ubd84\ud558\ub2e4.\\n\\n:::\\n\\n\ub450 \ubc88\uc9f8 \uc608\ub85c, `Maybe a` \ud0c0\uc785\ub3c4 \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 `a`\uac00 \ubaa8\ub178\uc774\ub4dc\ub77c\uba74 \ubaa8\ub178\uc774\ub4dc\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Monoid a => Monoid (Maybe a) where\\n    -- mempty :: Maybe a\\n    mempty = Nothing\\n    \\n    -- mappend :: Maybe a -> Maybe a -> Maybe a\\n    Nothing  `mappend` my         = my\\n    mx       `mappend` Nothing    = mx\\n    Just x   `mappend` Just y     = Just (x `mappend` y)\\n```\\n\uc5ec\uae30\uc11c `mempty`\ub294 \uc2e4\ud328\ub97c \ub098\ud0c0\ub0b4\ub294 `Nothing`\uc774\uace0, `mappend`\ub294 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \ub450 \uc778\uc218\uc758 \uacb0\uacfc\ub97c \uc870\ud569\ud55c\ub2e4. \\n\ud55c\ucabd \uc778\uc218\uac00 \uc2e4\ud328\ud558\uba74 \ub2e4\ub978 \ucabd \uc778\uc218\ub97c \ubc18\ud658\ud558\uace0, \ub458 \ub2e4 \uc131\uacf5\ud558\uba74 \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 `a`\uc758 `mappend`\ub97c \uc0ac\uc6a9\ud574 \ub450 \uacb0\uacfc\uac12\uc744 \uacb0\ud569\ud55c\ub2e4.\\n\ud55c\ucabd\uc774 \uc2e4\ud328\ud558\uba74 \ub2e4\ub978 \ucabd \uc778\uc218\ub97c \ubc18\ud658\ud558\uace0, \ub458 \ub2e4 \uc131\uacf5\ud558\uba74 \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 `a`\uc758 `mappend`\ub85c \ub450 \uacb0\uacfc\uac12\uc744 \ud569\uce5c\ub2e4.\\n\\n\ud558\ub098\uc758 \ud0c0\uc785\uc774 \uc5ec\ub7ec \uac00\uc9c0 \ubc29\uc2dd\uc73c\ub85c \ubaa8\ub178\uc774\ub4dc\ub97c \uad6c\uc131\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc815\uc218\uac00 \ub367\uc148\uc5d0\uc11c \ubaa8\ub178\uc774\ub4dc\ub97c \uc774\ub8ec\ub2e4\ub294 \uac83\uc744 \uc774\ubbf8 \uc0b4\ud3b4\ubd24\uc73c\ubbc0\ub85c, \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud55c \uc778\uc2a4\ud134\uc2a4\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\ub2e4.\\n\\n```haskell\\ninstance Monoid Int where\\n    -- mempty :: Int\\n    mempty = 0\\n    \\n    -- mappend :: Int -> Int -> Int\\n    mappend = (+)\\n```\\n\\n\uc815\uc218\ub294 \uacf1\uc148\uc5d0\uc11c\ub3c4 \ubaa8\ub178\uc774\ub4dc\ub97c \uc774\ub8e8\uba70, \uc774\ub54c \ud56d\ub4f1\uc6d0\uc740 1\uc774\ubbc0\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\ub2e4.\\n\\n```haskell\\ninstance Monoid Int where\\n    -- mempty :: Int\\n    mempty = 1\\n    \\n    -- mappend :: Int -> Int -> Int\\n    mappend = (*)\\n```\\n\\n\ud558\uc9c0\ub9cc \ud558\uc2a4\ucf08\uc5d0\uc11c\ub294 \uac19\uc740 \ud0c0\uc785\uc5d0 \ub300\ud574 \uac19\uc740 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uc5ec\ub7ec \uac1c \uc120\uc5b8\ud560 \uc218 \uc5c6\ub2e4. \ub530\ub77c\uc11c `Monoid Int`\uc5d0 \ub300\ud574 \uc774\ub7f0 \uc2dd\uc73c\ub85c \ub450 \uac1c\uc758 \ubcc4\ub3c4 \uc778\uc2a4\ud134\uc2a4\ub97c \uc120\uc5b8\ud558\ub824 \ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4. \\n\\n\ud574\uacb0\ucc45\uc740 \uac01 \uc778\uc2a4\ud134\uc2a4\ub9c8\ub2e4 \uc804\uc6a9 \ub798\ud37c \ud0c0\uc785\uc744 \ub9cc\ub4dc\ub294 \uac83\uc774\ub2e4.\\n\\n\ub367\uc148\uc758 \uacbd\uc6b0, \ubaa8\ub178\uc774\ub4dc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc0c8\ub85c\uc6b4 \ud0c0\uc785 `Sum a`\ub97c \uc120\uc5b8\ud558\ub294\ub370, \uc774\ub294 `Sum`\uc774\ub77c\ub294 \ub354\ubbf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70 \ud0c0\uc785 `a`\uc758 \ub2e8\uc77c \uc778\uc218\ub97c \ubc1b\ub294\ub2e4. \ub610\ud55c \uc0dd\uc131\uc790\ub97c \uc81c\uac70\ud558\ub294 \ud568\uc218\ub3c4 \ud568\uaed8 \uc81c\uacf5\ud55c\ub2e4.\\n\\n```haskell\\nnewtype Sum a = Sum a\\n    deriving (Eq, Ord, Show, Read)\\n\\ngetSum :: Sum a -> a\\ngetSum (Sum x) = x\\n```\\n\\n\uc704\uc758 `deriving` \uc808\uc740 `Sum a` \ud0c0\uc785\uc758 \uac12\ub4e4\uc774 \ud45c\uc900 \ub3d9\ub4f1\uc131 \ubc0f \uc21c\uc11c \uc5f0\uc0b0\uc790\ub97c \uc9c0\uc6d0\ud558\uace0, \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud558\uac70\ub098 \ubb38\uc790\uc5f4\uc5d0\uc11c \ubcc0\ud658\ud560 \uc218 \uc788\ub3c4\ub85d \ubcf4\uc7a5\ud55c\ub2e4. \uc774\uc81c \uc22b\uc790 \ud0c0\uc785(`Int` \uac19\uc740)\uc778 \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 `a`\uc5d0 \ub300\ud574, `Sum a` \ud0c0\uc785\uc744 \ubaa8\ub178\uc774\ub4dc\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. `mempty`\ub294 `Sum 0`\uc73c\ub85c, `mappend`\ub294 `Sum a` \ud0c0\uc785 \uac12\ub4e4\uc5d0 \ub300\ud55c \ub367\uc148 \uc5f0\uc0b0\uc790\ub85c \uc815\uc758\ud55c\ub2e4.\\n\\n```haskell\\ninstance Num a => Monoid (Sum a) where\\n    -- mempty :: Sum a\\n    mempty = Sum 0\\n\\n    -- mappend :: Sum a -> Sum a -> Sum a\\n    Sum x `mappend` Sum y = Sum (x+y)\\n```\\n\\n\uc608\ub97c \ub4e4\uc5b4, \uc774 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> mconcat [Sum 2, Sum 3, Sum 4]\\nSum 9\\n```\\n\\n:::info\\n\\nGHCi\uc5d0\uc11c \uc774\ub7f0 \uc608\uc81c\ub97c \uc2dc\ub3c4\ud574\ubcf4\ub824\uba74 \uba3c\uc800 ```import Data.Monoid```\ub97c \uc785\ub825\ud574 \ubaa8\ub178\uc774\ub4dc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ub85c\ub4dc\ud574\uc57c \ud55c\ub2e4.\\n\\n:::\\n\\n\ud2b9\ud788, \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc22b\uc790\uc5d0 `Sum`\uc744 \uc801\uc6a9\ud558\uba74 `mconcat`\uc774 \ud569\uacc4\ub97c \uad6c\ud558\uae30 \uc704\ud574 \ubaa8\ub178\uc774\ub4dc\ub97c \uc0ac\uc6a9\ud558\uac8c \ub41c\ub2e4.\\n\\n\ub9c8\ucc2c\uac00\uc9c0\ub85c \uc22b\uc790 \uacf1\uc148\uc758 \uacbd\uc6b0, \ubaa8\ub178\uc774\ub4dc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub367\uc148\uacfc \uac19\uc740 \uc811\uadfc \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud574 \uc0c8\ub85c\uc6b4 \ud0c0\uc785 `Product a`\ub97c \uc120\uc5b8\ud55c\ub2e4.\\n```haskell\\nnewtype Product a = Product a\\n    deriving (Eq, Ord, Show, Read)\\n\\ngetProduct :: Product a -> a\\ngetProduct (Product x) = x\\n```\\n\\n\uadf8\ub7ec\uba74 `Product a` \ud0c0\uc785\uc744 \uacf1\uc148\uc5d0 \uc801\ud569\ud55c \ubc29\uc2dd\uc73c\ub85c \ub450 \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758\ud574\uc11c `Monoid` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Num a => Monoid (Product a) where\\n    -- mempty :: Product a\\n    mempty = Product 1\\n    \\n    -- mappend :: Product a -> Product a -> Product a\\n    Product x `mappend` Product y = Product (x*y)\\n```\\n\\n\uc608\ub97c \ub4e4\uc5b4\\n```haskell\\n> mconcat [Product 2, Product 3, Product 4]\\nProduct 24\\n```\\n\\n\ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c, \ub17c\ub9ac\uac12 \ud0c0\uc785\uc740 \ub17c\ub9ac\uacf1\uacfc \ub17c\ub9ac\ud569 \ubaa8\ub450\uc5d0 \ub300\ud574 \ubaa8\ub178\uc774\ub4dc\ub97c \ud615\uc131\ud55c\ub2e4. \uc774\ub97c \uc704\ud574 \ubaa8\ub178\uc774\ub4dc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 `Bool` \ud0c0\uc785\uc744 \uc704\ud55c `All`\uacfc `Any`\ub77c\ub294 wrapper \ud0c0\uc785\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `All`\uc5d0 \ub300\ud55c `mconcat` \ud568\uc218\ub294 \ub9ac\uc2a4\ud2b8\uc758 \ubaa8\ub4e0 \ub17c\ub9ac\uac12\uc774 `True`\uc778\uc9c0 \uacb0\uc815\ud558\uace0, `Any`\uc5d0 \ub300\ud574\uc11c\ub294 \uadf8\ub7f0 \uac12\uc774 \ud558\ub098\ub77c\ub3c4 \uc788\ub294\uc9c0 \uacb0\uc815\ud55c\ub2e4.\\n\\n```haskell\\n> mconcat [All True, All True, All True]\\nAll True\\n\\n> mconcat [Any False, Any False, Any False]\\nAny False\\n```\\n:::info\\n\\n\ud558\uc2a4\ucf08 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 ``x <> y`` = ``x `mappend` y``\ub85c \uc815\uc758\ub418\ub294 `mappend`\uc758 \uc911\uc704(infix) \ubc84\uc804\uc744 \uc81c\uacf5\ud55c\ub2e4.  \\n\uc774\ub294 `x <> y <> z`\uc5d0\uc11c\ucc98\ub7fc \ubaa8\ub178\uc774\ub4dc \ud45c\ud604\uc2dd\uc744 \ub354 \uac04\uacb0\ud558\uac8c \uc791\uc131\ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4. \uc774 \uc5f0\uc0b0\uc790\ub294 \uc2e4\uc81c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub418\uc9c0\ub9cc, \uc774 \uc7a5\uc5d0\uc11c\ub294 \uc124\uba85\uc758 \ubaa9\uc801\uc73c\ub85c `mappend` \uae30\ubcf8 \ud568\uc218\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud588\ub2e4.\\n\\n:::\\n\\n## Foldables\\n\\n\ud558\uc2a4\ucf08\uc5d0\uc11c \ubaa8\ub178\uc774\ub4dc\uc758 \uc8fc\uc694 \uc751\uc6a9 \uc911 \ud558\ub098\ub294 \ub370\uc774\ud130 \uad6c\uc870\uc758 \ubaa8\ub4e0 \uac12\uc744 \uacb0\ud569\ud558\uc5ec \ub2e8\uc77c \uac12\uc744 \ub9cc\ub4dc\ub294 \uac83\uc774\ub2e4. \\n\uc608\ub97c \ub4e4\uc5b4 \ub9ac\uc2a4\ud2b8\uc758 \uacbd\uc6b0 \uc774 \uc544\uc774\ub514\uc5b4\ub97c \uad6c\ud604\ud558\ub294 `fold` \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nfold :: Monoid a => [a] -> a\\nfold []     = mempty\\nfold (x:xs) = x `mappend` fold xs\\n```\\n\\n\uc989, \ube48 \ub9ac\uc2a4\ud2b8\uc5d0 `fold`\ub97c \uc801\uc6a9\ud558\uba74 \ubaa8\ub178\uc774\ub4dc\uc758 \ud56d\ub4f1\uc6d0 `mempty`\uac00 \ub098\uc624\uace0, \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \ub9ac\uc2a4\ud2b8\uc758 \uacbd\uc6b0\uc5d0\ub294 \ubaa8\ub178\uc774\ub4dc \uc5f0\uc0b0\uc790 `mappend`\ub97c \uc0ac\uc6a9\ud574 \ub9ac\uc2a4\ud2b8\uc758 \uba38\ub9ac\uc640 \uaf2c\ub9ac\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \ucc98\ub9ac\ud55c \uacb0\uacfc\ub97c \uacb0\ud569\ud55c\ub2e4. \\n\\n\uc608\ub97c \ub4e4\uc5b4 `[x,y,z]` \ud615\ud0dc\uc758 \ub9ac\uc2a4\ud2b8\uc5d0 fold\ub97c \uc801\uc6a9\ud558\uba74\\n```haskell\\nx `mappend` (y `mappend` (z `mappend` mempty))\\n```\\n\\n\ub2e4\uc2dc \ub9d0\ud574, `fold`\ub294 \ubaa8\ub178\uc774\ub4dc\ub97c \uc0ac\uc6a9\ud574 \ub9ac\uc2a4\ud2b8\ub97c \'\uc811\ub294\' \uac04\ub2e8\ud55c \ubc29\ubc95\uc744 \uc81c\uacf5\ud558\uba70, \uc774\uac83\uc774 \ud568\uc218 \uc774\ub984\uc744 \uc120\ud0dd\ud55c \uc774\uc720\ub2e4.  \\n`fold`\ub294 `Monoid` \ud074\ub798\uc2a4\uc758 `mconcat`\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud558\uc9c0\ub9cc, `foldr`\uc744 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0 \uba85\uc2dc\uc801 \uc7ac\uadc0\ub97c \uc0ac\uc6a9\ud574 \uc815\uc758\ub41c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\uc790. \\n\\n\ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c, leaf\uc5d0 \ub370\uc774\ud130\ub97c \uac00\uc9c4 \uc774\uc9c4 \ud2b8\ub9ac \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub3c4 `fold` \ubc84\uc804\uc744 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\ndata Tree a = Leaf a | Node (Tree a) (Tree a)\\n    deriving Show\\n\\nfold :: Monoid a => Tree a -> a\\nfold (Leaf x)   = x\\nfold (Node l r) = fold l `mappend` fold r\\n```\\n\\n\uc989, leaf\uc758 \uacbd\uc6b0\uc5d0\ub294 \ub2e8\uc21c\ud788 \uadf8\uac83\uc774 \ud3ec\ud568\ud558\ub294 \uac12\uc744 \ubc18\ud658\ud558\uace0, \ub178\ub4dc\uc758 \uacbd\uc6b0\uc5d0\ub294 \ub450 \ud558\uc704 \ud2b8\ub9ac\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc811\uace0 `mappend`\ub97c \uc0ac\uc6a9\ud574 \uacb0\uacfc \uac12\ub4e4\uc744 \uacb0\ud569\ud55c\ub2e4. \uc774 \uc608\uc81c\uc5d0\uc11c\ub294 \uc774\ub7f0 \ud0c0\uc785\uc758 \ud2b8\ub9ac\uac00 \ud56d\uc0c1 \ube44\uc5b4\uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc815\uc758\uc5d0\uc11c \ud56d\ub4f1\uc6d0 `mempty`\ub97c \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.\\n\\n\ub354 \uc77c\ubc18\uc801\uc73c\ub85c, \ubaa8\ub178\uc774\ub4dc\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130 \uad6c\uc870\uc758 \uac12\ub4e4\uc744 \uc811\ub294 \uc544\uc774\ub514\uc5b4\ub294 \ub9ac\uc2a4\ud2b8\ub098 \uc774\uc9c4 \ud2b8\ub9ac \uac19\uc740 \ud0c0\uc785\uc5d0\ub9cc \ud55c\uc815\ub418\uc9c0 \uc54a\uace0, \ub2e4\uc591\ud55c \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc73c\ub85c \ucd94\uc0c1\ud654\ud560 \uc218 \uc788\ub2e4. \ud558\uc2a4\ucf08\uc5d0\uc11c\ub294 \uc774 \uac1c\ub150\uc774 `Data.Foldable` \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ub2e4\uc74c \ud074\ub798\uc2a4 \uc120\uc5b8\uc73c\ub85c \uad6c\ud604\ub418\uc5b4 \uc788\ub2e4.\\n```haskell\\nclass Foldable t where\\n    fold    :: Monoid a => t a -> a\\n    foldMap :: Monoid b => (a -> b) -> t a -> b\\n    foldr   :: (a -> b -> b) -> b -> t a -> b\\n    foldl   :: (a -> b -> a) -> a -> t b -> a\\n```\\n\uc989, \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc774 `Foldable` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \ub418\ub824\uba74 \uc9c0\uc815\ub41c \ud0c0\uc785\uc758 \ub2e4\uc591\ud55c `fold` \ud568\uc218\ub97c \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4. \uc704\uc758 \uc120\uc5b8\uc5d0\uc11c \uad00\ub840\uc801\uc73c\ub85c `foldable` \ud0c0\uc785\uc740 \ubcf4\ud1b5 `t`\ub85c \ud45c\uc2dc\ub41c\ub2e4.\\n\\n\uc9c1\uad00\uc801\uc73c\ub85c, `Foldable` \ud074\ub798\uc2a4\uc758 \uc77c\ubc18\ud654\ub41c `fold`\ub294 \uc6d0\uc18c\ub4e4\uc774 \ud0c0\uc785 `a`\ub97c \uac00\uc9c4 \ud0c0\uc785 `t a`\uc758 \ub370\uc774\ud130 \uad6c\uc870\ub97c \ubc1b\uc544\uc11c, \uc774 \ud0c0\uc785\uc5d0 \ub300\ud55c \ubaa8\ub178\uc774\ub4dc \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud574 \uc6d0\uc18c\ub4e4\uc744 \uacb0\ud569\ud558\uc5ec \ud0c0\uc785 `a`\uc758 \ub2e8\uc77c \uac12\uc744 \ub9cc\ub4e0\ub2e4. \\n\ubc18\uba74 `foldMap`\uc740 \ud0c0\uc785 `a -> b`\uc758 \ud568\uc218\ub97c \ucd94\uac00 \uc778\uc218\ub85c \ubc1b\uc544 `fold`\ub97c \uc77c\ubc18\ud654\ud558\ub294\ub370, \uc774 \ud568\uc218\ub294 \uad6c\uc870\uc758 \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ub41c \ud6c4 \ud0c0\uc785 `b`\uc5d0 \ub300\ud55c \ubaa8\ub178\uc774\ub4dc \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud574 \uacb0\uacfc \uac12\ub4e4\uc744 \uacb0\ud569\ud55c\ub2e4.\\n\\n\uc704 \ud074\ub798\uc2a4 \uc120\uc5b8\uc758 \ub9c8\uc9c0\ub9c9 \ub450 \ud568\uc218\uc778 `foldr`\uacfc `foldl`\uc740 \ub9ac\uc2a4\ud2b8\uc6a9 \uace0\ucc28 \ud568\uc218\ub97c \ub2e4\ub978 \ub370\uc774\ud130 \uad6c\uc870\ub85c \uc77c\ubc18\ud654\ud55c \uac83\uc774\ub2e4. \\n\uc774 \ub450 \ud568\uc218\ub294 \ub450 \uac12\uc744 \uacb0\ud569\ud558\ub294 \uc2dc\uc791 \uac12\uacfc \ud568\uc218\uac00 \uc778\uc218\ub85c \uba85\uc2dc\uc801\uc73c\ub85c \uc81c\uacf5\ub418\uae30 \ub54c\ubb38\uc5d0 \uae30\ubcf8 \ubaa8\ub178\uc774\ub4dc\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\uc790.\\n\\n\uc644\uc804\ud55c \ubc84\uc804\uc758 `Foldable` \ud074\ub798\uc2a4\uc5d0\ub294 \uc5ec\ub7ec \ub2e4\ub978 \uc720\uc6a9\ud55c \ud568\uc218\ub4e4\uacfc \uae30\ubcf8 \uc815\uc758\ub4e4\uc774 \ud3ec\ud568\ub418\uc5b4 \uc788\uc9c0\ub9cc, \uc704\uc5d0\uc11c \uc81c\uc2dc\ud55c \ucd95\uc57d\ub41c \ubc84\uc804\uc744 \uc0b4\ud3b4\ubcf4\ub294 \uac83\ubd80\ud130 \uc2dc\uc791\ud558\uaca0\ub2e4.\\n\\n### Examples\\n\\n\uc608\uc0c1\ud560 \uc218 \uc788\ub4ef\uc774, \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc740 \ud3f4\ub529(folding) \uae30\ubcf8 \ud568\uc218\ub4e4\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc815\uc758\ud568\uc73c\ub85c\uc368 \ud3f4\ub354\ube14 \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n\\n```haskell\\ninstance Foldable [] where\\n    -- fold :: Monoid a => [a] -> a\\n    fold []     = mempty\\n    fold (x:xs) = x `mappend` fold xs\\n    \\n    -- foldMap :: Monoid b => (a -> b) -> [a] -> b\\n    foldMap _ []     = mempty\\n    foldMap f (x:xs) = f x `mappend` foldMap f xs\\n    \\n    -- foldr :: (a -> b -> b) -> b -> [a] -> b\\n    foldr _ v []     = v\\n    foldr f v (x:xs) = f x (foldr f v xs)\\n    \\n    -- foldl :: (a -> b -> a) -> a -> [b] -> a\\n    foldl _ v []     = v\\n    foldl f v (x:xs) = foldl f (f v x) xs\\n```\\n\uc608\ub97c \ub4e4\uc5b4, \uc774\uc804 \uc139\uc158\uc758 \uc22b\uc790 \ubaa8\ub178\uc774\ub4dc\ub97c \uc0ac\uc6a9\ud558\uba74, `foldMap`\uc740 \uc774\uc81c \uc22b\uc790 \ub9ac\uc2a4\ud2b8\uc758 \ud569\uacc4\uc640 \uacf1\uc744 \uacc4\uc0b0\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.\\n\\n```haskell\\n> getSum (foldMap Sum [1..10])\\n55\\n\\n> getProduct (foldMap Product [1..10])\\n3628800\\n```\\n:::info\\n\\n\uc774 \uc608\uc81c\ub97c \uc2e4\ud589\ud558\ub824\uba74, `Data.Monoid`\uc640 `Data.Foldable`\uc744 \uc784\ud3ec\ud2b8\ud574\uc57c \ud55c\ub2e4.\\n\\n::: \\n\\n\uc774\uc9c4 \ud2b8\ub9ac \ub610\ud55c \ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c \uc778\uc2a4\ud134\uc2a4\ub97c \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \\n\ub2e8, `foldr`\uacfc `foldl`\uc774 \ud2b8\ub9ac \ub0b4\uc758 \uac12\ub4e4\uc744 \uac01\uac01 \uc624\ub978\ucabd-\uc5d0\uc11c-\uc67c\ucabd \uc21c\uc11c\uc640 \uc67c\ucabd-\uc5d0\uc11c-\uc624\ub978\ucabd \uc21c\uc11c\ub85c \uacb0\ud569\ud558\ub3c4\ub85d \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4.\\n\\n```haskell\\ninstance Foldable Tree where\\n    -- fold :: Monoid a => Tree a -> a\\n    fold (Leaf x)   = x\\n    fold (Node l r) = fold l `mappend` fold r\\n    \\n    -- foldMap :: Monoid b => (a -> b) -> Tree a -> b\\n    foldMap f (Leaf x)   = f x\\n    foldMap f (Node l r) = foldMap f l `mappend` foldMap f r\\n    \\n    -- foldr :: (a -> b -> b) -> b -> Tree a -> b\\n    foldr f v (Leaf x)   = f x v\\n    foldr f v (Node l r) = foldr f (foldr f v r) l\\n    \\n    -- foldl :: (a -> b -> a) -> a -> [b] -> a\\n    foldl f v (Leaf x)   = f v x\\n    foldl f v (Node l r) = foldl f (foldl f v l) r\\n```\\n\uc608\ub97c \ub4e4\uc5b4, \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\uc218 \ud2b8\ub9ac\ub97c \uc0dd\uac01\ud574\ubcf4\uc790.\\n```haskell\\ntree :: Tree Int\\ntree = Node (Node (Leaf 1) (Leaf 2)) (Leaf 3)\\n```\\n\uc774\ub54c `foldr (+) 0 tree`\ub97c \ud3c9\uac00\ud558\uba74 `(1+(2+(3+0)))`\uc758 \uacb0\uacfc\uc778 `6`\uc774 \ub098\uc624\ub294\ub370, \ub367\uc148\uc774 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc218\ud589\ub41c\ub2e4. \\n\ubc18\uba74 `foldl (+) 0 tree`\ub294 `(((0+1)+2)+3)`\uc758 \uacb0\uacfc `6`\uc744 \ub0b4\ub193\uc73c\uba70, \ub367\uc148\uc740 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc218\ud589\ub41c\ub2e4. \\n\ub367\uc148\uc740 \uacb0\ud569 \ubc95\uce59\uc774 \uc131\ub9bd\ud558\ubbc0\ub85c \uc774 \uacbd\uc6b0 \uacb0\uacfc\ub294 \uac19\uc9c0\ub9cc, `foldl`\uc774 \ub354 \ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4.\\n\\n### Other primitives and defaults\\n\\n\ub124 \uac00\uc9c0 \uae30\ubcf8\uc801\uc778 \ud3f4\ub529 \ud568\uc218 \uc678\uc5d0\ub3c4, `Foldable` \ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130 \uad6c\uc870 \ub0b4\uc758 \uac12\ub4e4\uc744 \uacb0\ud569\ud558\uae30 \uc704\ud55c \ub2e4\uc591\ud558\uace0 \uc720\uc6a9\ud55c \ub2e4\ub978 \ud568\uc218\ub4e4\ub3c4 \ud3ec\ud568\ud55c\ub2e4.  \\n\uccab \ubc88\uc9f8 \uadf8\ub8f9\uc740 \ub9ac\uc2a4\ud2b8\uc5d0 \uc775\uc219\ud55c \ud568\uc218\ub4e4\uc744 \uc77c\ubc18\ud654\ud55c\ub2e4.\\n\\n```haskell\\nnull    :: t a -> Bool\\nlength  :: t a -> Int\\nelem    :: Eq a => a -> t a -> Bool\\nmaximum :: Ord a => t a -> a\\nminimum :: Ord a => t a -> a\\nsum     :: Num a => t a -> a\\nproduct :: Num a => t a -> a\\n```\\n\uc608\ub97c \ub4e4\uc5b4, `null`\uc740 \uad6c\uc870\uac00 \ube44\uc5b4 \uc788\ub294\uc9c0(\uc6d0\uc18c\uac00 \uc5c6\ub294\uc9c0) \uacb0\uc815\ud558\uace0, `length`\ub294 `t a` \ud0c0\uc785\uc758 \uad6c\uc870 \uc548\uc5d0 \uc788\ub294 `a` \ud0c0\uc785 \uc6d0\uc18c\uc758 \uc218\ub97c \uc13c\ub2e4. \ub530\ub77c\uc11c \uc774 \ud568\uc218\ub4e4\uc740 \ub9ac\uc2a4\ud2b8\uc640 \ud2b8\ub9ac \ubaa8\ub450\uc5d0 \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4.\\n\\n```haskell\\n> null []\\nTrue\\n\\n> null (Leaf 1)\\nFalse\\n\\n> length [1..10]\\n10\\n\\n> length (Node (Leaf \'a\') (Leaf \'b\'))\\n2\\n```\\n\\n\ub610\ud55c, \uc774 \ud074\ub798\uc2a4\ub294 \uc801\uc5b4\ub3c4 \ud558\ub098\uc758 \uc6d0\uc18c\ub97c \ud3ec\ud568\ud558\uc5ec \uc2dc\uc791 \uac12\uc774 \ud544\uc694 \uc5c6\ub294 \uad6c\uc870\ub97c \uc704\ud55c `foldr`\uacfc `foldl`\uc758 \ubc84\uc804\ub3c4 \ud3ec\ud568\ud55c\ub2e4.\\n\\n```haskell\\nfoldr1 :: (a -> a -> a) -> t a -> a\\nfoldl1 :: (a -> a -> a) -> t a -> a\\n```\\n\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n```haskell\\n> foldr1 (+) [1..10]\\n55\\n\\n> foldl1 (+) (Node (Leaf 1) (Leaf 2))\\n3\\n```\\n\\n\ud074\ub798\uc2a4\uc758 \ub9c8\uc9c0\ub9c9 \uae30\ubcf8 \ud568\uc218\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ud3bc\uce58\ub294(flatten) \uac83\uc73c\ub85c, \uc608\ub97c \ub4e4\uc5b4 `Node (Leaf 1) (Leaf 2)` \ud2b8\ub9ac\ub97c `[1,2]` \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\ud55c\ub2e4.\\n\\n```haskell\\ntoList :: t a -> [a]\\n```\\n\\n\uc0ac\uc2e4 `toList` \ud568\uc218\ub294 `Foldable` \ud074\ub798\uc2a4 \uc120\uc5b8\uc5d0\uc11c \ud2b9\ubcc4\ud55c \uc5ed\ud560\uc744 \ud55c\ub2e4. \ud074\ub798\uc2a4 \ub0b4 \ub300\ubd80\ubd84\uc758 \ub2e4\ub978 \uae30\ubcf8 \ud568\uc218\ub4e4\uc5d0 \ub300\ud55c **\uae30\ubcf8 \uc815\uc758(default definitions)** \ub97c \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c \uae30\ubcf8 \ud568\uc218\ub97c \uc774\uc6a9\ud574 \uc81c\uacf5\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4.  \\n\\n\uad6c\uccb4\uc801\uc73c\ub85c, \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ubcf8 \uc815\uc758\ub4e4\uc744 \uac16\ub294\ub2e4.\\n\\n```haskell\\nfoldr f v = foldr f v . toList\\nfoldl f v = foldl f v . toList\\nfoldr1 f  = foldr1 f  . toList\\nfoldl1 f  = foldl1 f  . toList\\n\\nnull      = null . toList\\nlength    = length . toList\\nelem x    = elem x . toList\\nmaximum   = maximum . toList\\nminimum   = minimum . toList\\nsum       = sum . toList\\nproduct   = product . toList\\n```\\n\\n\uc608\ub97c \ub4e4\uc5b4, `null = null . toList`\ub77c\ub294 \uc815\uc758\ub294 \uc5b4\ub5a4 \ub370\uc774\ud130 \uad6c\uc870\uac00 \ube44\uc5b4\uc788\ub294\uc9c0 \uc544\ub2cc\uc9c0\ub97c \uba3c\uc800 \uadf8 \uad6c\uc870\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ud3bc\uce5c(flatten) \ub2e4\uc74c, \uadf8 \ub9ac\uc2a4\ud2b8\uac00 \ube44\uc5b4\uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uacb0\uc815\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \ub2e4\ub978 \uc815\uc758\ub4e4\ub3c4 \ube44\uc2b7\ud558\uac8c \uac04\ub2e8\ud55c \ud574\uc11d\uc744 \uac16\ub294\ub2e4.\\n\\n`Foldable` \ud074\ub798\uc2a4\uc758 \ub9c8\uc9c0\ub9c9 \uc138 \uac00\uc9c0 \uae30\ubcf8 \uc815\uc758\ub294 `fold`, `foldMap`, `toList` \uae30\ubcf8 \ud568\uc218\ub4e4 \uac04\uc758 \uc911\uc694\ud55c \uad00\uacc4\ub97c \uc124\uc815\ud55c\ub2e4.\\n\\n```haskell\\nfold      = foldMap id\\nfoldMap f = foldr (mappend . f) mempty\\ntoList    = foldMap (\\\\x -> [x])\\n```\\n\uc989,\\n- `fold`\ub294 \uac01 \uc6d0\uc18c\ub97c \uacb0\ud569\ud558\uae30 \uc804\uc5d0 \ud56d\ub4f1 \ud568\uc218(`id`)\ub97c \uc801\uc6a9\ud558\ub294 `foldMap`\uc758 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub85c \ubcfc \uc218 \uc788\ub2e4.\\n- `foldMap`\uc740 \uac01 \uc6d0\uc18c\uc5d0 \ud568\uc218 `f`\ub97c \uc801\uc6a9\ud55c \ud6c4, \ubaa8\ub178\uc774\ub4dc \uae30\ubcf8 \ud568\uc218\ub4e4(`mappend`, `mempty`)\uc744 \uc0ac\uc6a9\ud558\uc5ec \uacb0\ud569\ud558\ub294 `foldr`\uc758 \uad00\uc810\uc5d0\uc11c \uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n- `toList`\ub294 \uac01 \uc6d0\uc18c\ub97c \uc6d0\uc18c\uac00 \ud558\ub098\uc778 \ub9ac\uc2a4\ud2b8(singleton list)\ub85c \ubcc0\ud658\ud55c \ub2e4\uc74c, \ub9ac\uc2a4\ud2b8 \ubaa8\ub178\uc774\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uadf8 \uacb0\uacfc\ub4e4\uc744 \uc774\uc5b4 \ubd99\uc774\ub294 `foldMap`\uc758 \uad00\uc810\uc5d0\uc11c \uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n\\n\uc694\uc57d\ud558\uc790\uba74, `Foldable` \ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130 \uad6c\uc870 \ub0b4\uc758 \uac12\ub4e4\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \ub2e4\uc591\ud558\uace0 \uc720\uc6a9\ud55c \ud568\uc218\ub4e4\uc744 \uc81c\uacf5\ud558\uba70, \uc774\ub4e4 \ub300\ubd80\ubd84\uc740 \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c \ud2b9\uc815 \uc778\uc2a4\ud134\uc2a4\ub098 \ud074\ub798\uc2a4 \ub0b4\uc758 \ub2e4\ub978 \uc77c\ubc18\ud654\ub41c \ud568\uc218\ub97c \uc774\uc6a9\ud55c \uae30\ubcf8 \uc815\uc758\ub97c \uac16\ub294\ub2e4. \uc774 \uc2dc\uc810\uc5d0\uc11c \uc138 \uac00\uc9c0 \uc9c8\ubb38\uc744 \ub358\uc9c8 \uc218 \uc788\ub2e4.\\n\\n1. \uc65c \ud074\ub798\uc2a4\uc5d0 \uadf8\ub807\uac8c \ub9ce\uc740 \ud568\uc218\uac00 \uc788\ub294\uac00? \ud2b9\ud788, `null`, `length` \ub4f1\uacfc \uac19\uc740 \ucd94\uac00\uc801\uc778 \uae30\ubcf8 \ud568\uc218\ub4e4\uc774 \uc65c \ud3f4\ub354\ube14 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc815\uc758\uac00 \uc544\ub2cc `Foldable` \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\ub85c \uc81c\uacf5\ub418\ub294\uc9c0 \ubb3c\uc744 \uc218 \uc788\ub2e4. \uadf8 \uc774\uc720\ub294 \ud544\uc694\ud560 \uacbd\uc6b0 \uae30\ubcf8 \uc815\uc758\ub97c \uc624\ubc84\ub77c\uc774\ub4dc(override)\ud560 \uc218 \uc788\ub3c4\ub85d \ud5c8\uc6a9\ud558\uae30 \uc704\ud568\uc774\uba70, \ub9cc\uc57d \uc774 \ud568\uc218\ub4e4\uc774 \ucd5c\uc0c1\uc704 \ud568\uc218(top-level functions)\ub85c \uc815\uc758\ub418\uc5c8\ub2e4\uba74 \uc774\uac83\uc774 \ubd88\uac00\ub2a5\ud588\uc744 \uac83\uc774\ub2e4.\\n2. \ubb34\uc5c7\uc744 \uc218\ub3d9\uc73c\ub85c \uc815\uc758\ud574\uc57c \ud558\ub294\uac00? `Foldable` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uc704\ud55c **\ucd5c\uc18c \uc644\uc804 \uc815\uc758(minimal complete definition)** \ub294 `foldMap`\uc774\ub098 `foldr` \ub458 \uc911 \ud558\ub098\ub97c \uc815\uc758\ud558\ub294 \uac83\uc774\ub2e4. \ud074\ub798\uc2a4\uc758 \ub2e4\ub978 \ubaa8\ub4e0 \ud568\uc218\ub4e4\uc740 \uc774 \ub450 \ud568\uc218 \uc911 \ud558\ub098\ub85c\ubd80\ud130 \uae30\ubcf8 \uc815\uc758\uc640 \ub9ac\uc2a4\ud2b8 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud30c\uc0dd\ub420 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9ac\uc2a4\ud2b8\uc640 \ud2b8\ub9ac\uc5d0\uc11c \uc774\ubbf8 \ubcf4\uc558\ub4ef\uc774, `foldMap` \ud568\uc218\ub97c \uc815\uc758\ud558\ub294 \uac83\uc774 \uac00\uc7a5 \uac04\ub2e8\ud55c \uacbd\uc6b0\uac00 \ub9ce\ub2e4.\\n3. \ud6a8\uc728\uc131\uc740 \uc5b4\ub5a4\uac00? \ub9ce\uc740 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ud074\ub798\uc2a4\uc5d0 \uc81c\uacf5\ub41c \uae30\ubcf8 \uc815\uc758\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \ucda9\ubd84\ud558\uc9c0\ub9cc, \ub354 \ub192\uc740 \ud6a8\uc728\uc131\uc774 \uc694\uad6c\ub41c\ub2e4\uba74 \uc704\uc5d0\uc11c \uc5b8\uae09\ud588\ub4ef\uc774 \uc774\ub4e4\uc744 \uc624\ubc84\ub77c\uc774\ub4dc\ud560 \uc218 \uc788\ub2e4. \uc2e4\uc81c\ub85c GHC \uc2dc\uc2a4\ud15c\uc740 \uc6b0\ub9ac\uac00 \uc81c\uc2dc\ud55c \ub2e8\uc21c\ud55c \ubc84\uc804\ubcf4\ub2e4 \ub354 \ud6a8\uc728\uc801\uc778 \uae30\ubcf8 \uc815\uc758\ub97c \uc0ac\uc6a9\ud558\uc9c0\ub9cc, \uc774\ub4e4\uc740 \uae30\ub2a5\uc801\uc73c\ub85c \uc6b0\ub9ac\uc758 \ub354 \uac04\ub2e8\ud55c \ubc84\uc804\uacfc \ub3d9\uc77c\ud558\ub2e4.\\n\\nGHC\uac00 `Data.Foldable` \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc790\ub3d9\uc73c\ub85c \uc784\ud3ec\ud2b8\ud558\uc9c0\ub9cc, \ud604\uc7ac \ud074\ub798\uc2a4\uc758 `fold`\uc640 `toList` \uba54\uc18c\ub4dc\ub294 \uc228\uae34\ub2e4\ub294 \uc810\uc744 \uc5b8\uae09\ud558\uba70 \uc774 \uc139\uc158\uc744 \ub9c8\ubb34\ub9ac\ud55c\ub2e4. \uc774\ub7ec\ud55c \uc774\uc720\ub85c, \uc6b0\ub9ac\ub294 \ud3f4\ub354\ube14 \ud0c0\uc785\uc744 \ud504\ub85c\uadf8\ub798\ubc0d\ud560 \ub54c \uc790\ub3d9\uc73c\ub85c \uc81c\uacf5\ub418\ub294 \ucd95\uc18c\ub41c \ubc84\uc804\uc5d0 \uc758\uc874\ud558\uae30\ubcf4\ub2e4\ub294 `Data.Foldable`\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc784\ud3ec\ud2b8\ud558\ub294 \uac83\uc744 \uc77c\ubc18\uc801\uc73c\ub85c \uc120\ud638\ud55c\ub2e4.\\n\\n### Generic functions\\n\\n\ud3f4\ub354\ube14 \ud0c0\uc785\uc758 \uac1c\ub150\uc744 \ucd94\uc0c1\ud654\ud558\ub294 \uac83\uc758 \uc911\uc694\ud55c \uc774\uc810\uc740 `Foldable` \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5b4\ub5a4 \ud3f4\ub354\ube14 \ud0c0\uc785\uacfc\ub3c4 \ud568\uaed8 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc77c\ubc18\ud654\ub41c \ud568\uc218\ub97c \uc815\uc758\ud558\ub294 \ub2a5\ub825\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc815\uc218 \ub9ac\uc2a4\ud2b8\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud588\ub2e4\uba74\\n\\n```haskell\\naverage :: [Int] -> Int\\naverage ns = sum ns `div` length ns\\n```\\n\\n\uc774\uc81c `sum`\uacfc `length`\uac00 \ub9ac\uc2a4\ud2b8\uc5d0\ub9cc \uad6d\ud55c\ub418\uc9c0 \uc54a\uace0 \uc5b4\ub5a4 \ud3f4\ub354\ube14 \ud0c0\uc785\uacfc\ub3c4 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc558\uc73c\ubbc0\ub85c, `average`\uc758 \ud0c0\uc785 \uc815\uc758 \uc790\uccb4\ub97c \ubcc0\uacbd\ud560 \ud544\uc694 \uc5c6\uc774 \uc77c\ubc18\ud654\ub420 \uc218 \uc788\ub2e4.\\n\\n```haskell\\naverage :: Foldable t => t Int -> Int\\naverage ns = sum ns `div` length ns\\n```\\n\\n\ub530\ub77c\uc11c, \uc774 \ud568\uc218\ub294 \uc774\uc81c \ub9ac\uc2a4\ud2b8\uc640 \ud2b8\ub9ac \ubaa8\ub450\uc5d0 \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4.\\n\\n```haskell\\n> average [1..10]\\n5\\n\\n> average (Node (Leaf 1) (Leaf 3))\\n2\\n```\\n\\n\ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c, `Data.Foldable` \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub17c\ub9ac\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud574 \ub3d9\uc791\ud558\ub294 \uc775\uc219\ud55c \ud568\uc218\ub4e4\uc758 \uc77c\ubc18\ud654\ub41c \ubc84\uc804\uc744 \uc81c\uacf5\ud55c\ub2e4.\\n\\n\\n```haskell\\nand :: Foldable t => t Bool -> Bool\\nand = getAll . foldMap All\\n\\nor :: Foldable t => t Bool -> Bool\\nor = getAny . foldMap Any\\n\\nall :: Foldable t => (a -> Bool) -> t a -> Bool\\nall p = getAll . foldMap (All . p)\\n\\nany :: Foldable t => (a -> Bool) -> t a -> Bool\\nany p = getAny . foldMap (Any . p)\\n```\\n\\n\uac01 \uacbd\uc6b0, `foldMap`\uc744 \uc801\uc808\ud55c \ubaa8\ub178\uc774\ub4dc \uae30\ubcf8 \ud568\uc218\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\uba74 \uc6d0\ud558\ub294 \ub3d9\uc791\uc744 \uc77c\ubc18\ud654\ub41c \ubc29\uc2dd\uc73c\ub85c \uc5bb\uc744 \uc218 \uc788\ub2e4.\\n\\n```haskell\\n> and [True,False,True]\\nFalse\\n\\n> or (Node (Leaf True) (Leaf False))\\nTrue\\n\\n> all even [1,2,3]\\nFalse\\n\\n> any even (Node (Leaf 1) (Leaf 2))\\nTrue\\n```\\n\\n\ub9c8\uc9c0\ub9c9 \uc608\uc81c\ub85c, \ub9ac\uc2a4\ud2b8\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uc774\uc5b4 \ubd99\uc774\ub294 `concat :: [[a]] -> [a]` \ud568\uc218\ub294 \uc774\uc81c \ub9ac\uc2a4\ud2b8 \ubaa8\ub178\uc774\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac04\ub2e8\ud788 \ud3f4\ub529\ud568\uc73c\ub85c\uc368, \uc6d0\uc18c\uac00 \ub9ac\uc2a4\ud2b8\uc778 \uc784\uc758\uc758 \ud3f4\ub354\ube14 \ud0c0\uc785\uc5d0 \ub300\ud574 \uc77c\ubc18\ud654\ub420 \uc218 \uc788\ub2e4.\\n\\n```haskell\\nconcat :: Foldable t => t [a] -> [a]\\nconcat = fold\\n```\\n\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n```haskell\\n> concat [\\"ab\\",\\"cd\\",\\"ef\\"]\\n\\"abcdef\\"\\n\\n> concat (Node (Leaf [1,2]) (Leaf [3]))\\n[1,2,3]\\n```\\n\\n\uacb0\ub860\uc801\uc73c\ub85c, \ud558\uc2a4\ucf08\uc5d0\uc11c \uc0c8\ub85c\uc6b4 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \ub54c, \uadf8 \ud0c0\uc785\uc744 \ud3f4\ub354\ube14 \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294\uc9c0 \uace0\ub824\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud558\ub2e4. \uadf8\ub807\uac8c \ud558\ub294 \uac83\uc758 \uc7a5\uc810\uc740 `Foldable` \ud074\ub798\uc2a4\uc5d0 \ud3ec\ud568\ub41c \uae30\ubcf8 \uc815\uc758\ub4e4\uacfc \uc774 \uae30\ubcf8 \ud568\uc218\ub4e4\uc744 \uc774\uc6a9\ud574 \uc815\uc758\ub41c \ub2e4\ub978 \uc77c\ubc18\ud654\ub41c \ud568\uc218\ub4e4\uc744 \ud1b5\ud574, \ud574\ub2f9 \ud0c0\uc785\uc744 \uc704\ud55c \ub2e4\uc591\ud558\uace0 \uc720\uc6a9\ud55c \ud568\uc218\ub4e4\uc744 \ubcf8\uc9c8\uc801\uc73c\ub85c \'\uacf5\uc9dc\ub85c\' \uc81c\uacf5\ubc1b\ub294\ub2e4\ub294 \uc810\uc774\ub2e4.\\n\\n## Traversables\\n\\n\ub370\uc774\ud130 \uad6c\uc870\uc758 \uac01 \uc6d0\uc18c \uc704\ub85c \ud568\uc218\ub97c \ub9e4\ud551\ud558\ub294 \uc544\uc774\ub514\uc5b4\ub294 \ud391\ud130\ub77c\ub294 \uac1c\ub150\uc73c\ub85c \ud3ec\ucc29\ub41c\ub2e4.\\n\\n```haskell\\nclass Functor f where\\n    fmap :: (a -> b) -> f a -> f b\\n```\\n\\n\uc608\ub97c \ub4e4\uc5b4, \ub9ac\uc2a4\ud2b8\uc758 \uacbd\uc6b0 \uae30\ubcf8 `fmap`\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc7ac\uadc0\uc801\uc73c\ub85c \uc815\uc758\ub420 \uc218 \uc788\ub294 \uc775\uc219\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218 `map`\uc774\ub2e4.\\n\\n```haskell\\nmap :: (a -> b) -> [a] -> [b]\\nmap g [] = []\\nmap g (x:xs) = g x : map g xs\\n```\\n\\n\ud558\uc9c0\ub9cc \ub9ac\uc2a4\ud2b8 \uc704\ub85c \ud568\uc218\ub97c \ub9e4\ud551\ud558\ub294 \uc544\uc774\ub514\uc5b4\ub294 \uc77c\ubc18\ud654\ub420 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ub418\ub294 \ud568\uc218 `g`\uac00 \uc2e4\ud328\ud560 \uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uc790. \uc989, `a -> b`\uac00 \uc544\ub2cc `a -> Maybe b` \ud0c0\uc785\uc744 \uac16\ub294\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4. \uadf8\ub9ac\uace0 \uc804\uccb4 \ub9e4\ud551\uc740 \ubaa8\ub4e0 \uac1c\ubcc4 \uc801\uc6a9\uc774 \uc131\uacf5\ud560 \uacbd\uc6b0\uc5d0\ub9cc \uc131\uacf5\ud55c\ub2e4\uace0 \ud558\uc790. `Maybe`\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c(applicative)\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc774\uc6a9\ud558\uba74, \uc774 \ub3d9\uc791\uc744 \uad6c\ud604\ud558\ub294 \ud568\uc218\ub97c \uc27d\uac8c \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n\\n```haskell\\ntraverse :: (a -> Maybe b) -> [a] -> Maybe [b]\\ntraverse g []     = pure []\\ntraverse g (x:xs) = pure (:) <*> g x <*> traverse g xs\\n```\\n\\n\uc774 \uc815\uc758\uc758 \uc7ac\uadc0 \uad6c\uc870\ub294 `map`\uacfc \ubcf8\uc9c8\uc801\uc73c\ub85c \ub3d9\uc77c\ud558\uc9c0\ub9cc, \uc2e4\ud328 \uac00\ub2a5\uc131\uc744 \uad00\ub9ac\ud558\uae30 \uc704\ud574 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uba54\ucee4\ub2c8\uc998\uc774 \uc0ac\uc6a9\ub418\uc5c8\ub2e4\ub294 \uc810\uc774 \ub2e4\ub974\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c, `traverse`\ub294 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9ac\uc2a4\ud2b8\uc758 \uc6d0\uc18c\ub97c \uc21c\ud68c\ud558\ub294 \uac04\ub2e8\ud55c \uc218\ub2e8\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc815\uc218\uac00 \uc591\uc218\uc77c \ub54c\ub9cc 1\uc744 \uac10\uc18c\uc2dc\ud0a4\ub294 \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc704\ud574 `Maybe` \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uc790.\\n\\n```haskell\\ndec :: Int -> Maybe Int\\ndec n = if n > 0 then Just (n-1) else Nothing\\n```\\n\\n\uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n```haskell\\n> traverse dec [1,2,3]\\nJust [0,1,2]\\n\\n> traverse dec [2,1,0]\\nNothing\\n```\\n\\n\ub180\ub78d\uc9c0 \uc54a\uac8c\ub3c4, \uc704\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ub370\uc774\ud130 \uad6c\uc870\ub97c \uc21c\ud68c\ud558\ub294 \uc544\uc774\ub514\uc5b4\ub294 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc5d0\ub9cc \uad6d\ud55c\ub418\uc9c0 \uc54a\uc73c\uba70, \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \uc778\uc790 \ud568\uc218\uc5d0\ub9cc \ud2b9\uc815\ub418\uc9c0\ub3c4 \uc54a\ub294\ub2e4. \uc774\ub7ec\ud55c \uc77c\ubc18\ud654\ub41c \ub9e4\ud551\uc744 \uc9c0\uc6d0\ud558\ub294 \ud0c0\uc785 \ud074\ub798\uc2a4\ub97c \uc21c\ud68c \uac00\ub2a5\ud55c \ud0c0\uc785(traversable types), \uc904\uc5ec\uc11c **\ud2b8\ub798\ubc84\uc11c\ube14(traversables)** \uc774\ub77c\uace0 \ubd80\ub978\ub2e4. \\n\\n\ud558\uc2a4\ucf08\uc5d0\uc11c \uc774 \uac1c\ub150\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc7a5 \ud074\ub798\uc2a4 \uc120\uc5b8\uc73c\ub85c \uad6c\ud604\ub41c\ub2e4.\\n\\n```haskell\\nclass (Functor t, Foldable t) => Traversable t where\\n    traverse :: Applicative f => (a -> f b) -> t a -> f (t b)\\n```\\n\\n\uc989, \ud391\ud130\uc774\uba74\uc11c \ud3f4\ub354\ube14\uc778 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785 `t`\uac00 `Traversable` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \ub418\ub824\uba74, \uba85\uc2dc\ub41c \ud0c0\uc785\uc758 `traverse` \ud568\uc218\ub97c \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4.\\n\\n- `t`\uac00 **\ud391\ud130(functor)** \uc5ec\uc57c \ud55c\ub2e4\ub294 \uc694\uad6c\uc0ac\ud56d\uc740 \ud2b8\ub798\ubc84\uc11c\ube14\uc774 \ub9e4\ud551\uc758 \uc544\uc774\ub514\uc5b4\ub97c \uc77c\ubc18\ud654\ud558\ubbc0\ub85c `fmap` \uae30\ubcf8 \ud568\uc218\ub97c \uc9c0\uc6d0\ud560 \uac83\uc73c\ub85c \uae30\ub300\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ubc18\uc601\ud55c\ub2e4.\\n- `t`\uac00 **\ud3f4\ub354\ube14(foldable)** \uc774\uc5b4\uc57c \ud55c\ub2e4\ub294 \uc694\uad6c\uc0ac\ud56d\uc740 \ud2b8\ub798\ubc84\uc11c\ube14 \ud0c0\uc785\uc758 \uac12\ub4e4\uc774 \uc6d0\ud55c\ub2e4\uba74 \ud3f4\ub529\ub420 \uc218\ub3c4 \uc788\uc74c\uc744 \ubcf4\uc7a5\ud55c\ub2e4.\\n\\n### Examples\\n\\n\ub9ac\uc2a4\ud2b8\ub294 \ud391\ud130\uc774\uba74\uc11c \ud3f4\ub354\ube14\uc774\uae30 \ub54c\ubb38\uc5d0, \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc740 `traverse`\ub97c `Maybe` \ud0c0\uc785\uc5d0\uc11c \uc784\uc758\uc758 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\ub85c \ub2e8\uc21c\ud558\uac8c \uc77c\ubc18\ud654\ud568\uc73c\ub85c\uc368 \ud2b8\ub798\ubc84\uc11c\ube14\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc989, \uc815\uc758\ub294 \ub3d9\uc77c\ud558\uac8c \uc720\uc9c0\ub418\uc9c0\ub9cc \ud0c0\uc785\uc740 \uc77c\ubc18\ud654\ub41c\ub2e4.\\n\\n```haskell\\ninstance Traversable [] where\\n    -- traverse :: Applicative f => (a -> f b) -> [a] -> f [b]\\n    traverse g []     = pure []\\n    traverse g (x:xs) = pure (:) <*> g x <*> traverse g xs\\n```\\n\\n\ud2b8\ub9ac\uc5d0 \ub300\ud55c \uc778\uc2a4\ud134\uc2a4\ub3c4 \ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c \uc815\uc758\ub420 \uc218 \uc788\uc9c0\ub9cc, \uc778\uc790 \ud568\uc218\uc758 \uc801\uc6a9\uc774 \uae30\ubcf8 \ucf00\uc774\uc2a4(base case)\uc5d0\uc11c \uc77c\uc5b4\ub09c\ub2e4\ub294 \uc810\uc774 \ub2e4\ub974\ub2e4.\\n\\n```haskell\\ninstance Traversable Tree where\\n    -- traverse :: Applicative f => (a -> f b) -> Tree a -> f (Tree b)\\n    traverse g (Leaf x)   = pure Leaf <*> g x\\n    traverse g (Node l r) = pure Node <*> traverse g l <*> traverse g r\\n```\\n\\n\uc608\ub97c \ub4e4\uc5b4, \uc774\uc81c `traverse`\ub294 \uc774\uc804 \uc139\uc158\uc758 `dec`\uc640 \uac19\uc774 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub97c \ub9ac\uc2a4\ud2b8\uc640 \ud2b8\ub9ac \ubaa8\ub450\uc5d0 \ub9e4\ud551\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.\\n\\n```haskell\\n> traverse dec [1,2,3]\\nJust [0,1,2]\\n\\n> traverse dec [2,1,0]\\nNothing\\n\\n> traverse dec (Node (Leaf 1) (Leaf 2))\\nJust (Node (Leaf 0) (Leaf 1))\\n\\n> traverse dec (Node (Leaf 0) (Leaf 1))\\nNothing\\n```\\n\\n### Other primitives and defaults\\n\\n`traverse` \uae30\ubcf8 \ud568\uc218 \uc678\uc5d0\ub3c4 `Traversable` \ud074\ub798\uc2a4\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ucd94\uac00 \ud568\uc218\uc640 \uae30\ubcf8 \uc815\uc758\ub97c \ud3ec\ud568\ud55c\ub2e4.\\n\\n```haskell\\nsequenceA :: Applicative f => t (f a) -> f (t a)\\nsequenceA = traverse id\\n```\\n\\n`sequenceA`\uc758 \ud0c0\uc785\uc740 \uc774 \ud568\uc218\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc561\uc158\uc744 \uc6d0\uc18c\ub85c \uac16\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub97c, \ub370\uc774\ud130 \uad6c\uc870\ub97c \ubc18\ud658\ud558\ub294 \ub2e8\uc77c \uc561\uc158\uc73c\ub85c \ubcc0\ud658\ud568\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \uc815\uc758\ub294 \ud56d\ub4f1 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\uc870\ub97c \uc21c\ud68c\ud568\uc73c\ub85c\uc368 \uc774\ub97c \ub2ec\uc131\ud55c\ub2e4\uace0 \ub9d0\ud558\ub294\ub370, \uc774 \uacbd\uc6b0 \ud56d\ub4f1 \ud568\uc218\ub294 `f a -> f a` \ud0c0\uc785\uc744 \uac16\ub294\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `sequenceA`\ub294 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \uc6d0\uc18c\ub4e4\uc744 \ud3ec\ud568\ud558\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub97c \ubcc0\ud658\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.\\n\\n```haskell\\n> sequenceA [Just 1, Just 2, Just 3]\\nJust [1,2,3]\\n\\n> sequenceA [Just 1, Nothing, Just 3]\\nNothing\\n\\n> sequenceA (Node (Leaf (Just 1)) (Leaf (Just 2)))\\nJust (Node (Leaf 1) (Leaf 2))\\n\\n> sequenceA (Node (Leaf (Just 1)) (Leaf Nothing))\\nNothing\\n```\\n\\n\ubc18\ub300\ub85c, \ud074\ub798\uc2a4 \uc120\uc5b8\uc740 `sequenceA`\ub97c \uc774\uc6a9\ud55c `traverse`\uc758 \uae30\ubcf8 \uc815\uc758\ub3c4 \ud3ec\ud568\ud55c\ub2e4. \uc774\ub294 \ud6a8\uacfc\uac00 \uc788\ub294 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130 \uad6c\uc870\ub97c \uc21c\ud68c\ud558\uae30 \uc704\ud574, \uba3c\uc800 `fmap`\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01 \uc6d0\uc18c\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud55c \ub2e4\uc74c `sequenceA`\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ud6a8\uacfc\ub97c \uacb0\ud569\ud560 \uc218 \uc788\uc74c\uc744 \ud45c\ud604\ud55c\ub2e4.\\n\\n```haskell\\n-- traverse :: Applicative f => (a -> f b) -> t a -> f (t b)\\ntraverse g = sequenceA . fmap g\\n```\\n\\n`Traversable` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uc120\uc5b8\ud558\ub824\uba74 `traverse`\ub098 `sequenceA` \uc911 \ud558\ub098\ub97c \uc815\uc758\ud558\ub294 \uac83\uc73c\ub85c \ucda9\ubd84\ud558\ub2e4. \ub2e4\ub978 \ud558\ub098\ub294 \uc704 \uae30\ubcf8 \uc815\uc758\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud30c\uc0dd\ub420 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ud558\uc9c0\ub9cc `traverse`\uc758 \uae30\ubcf8 \uc815\uc758\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub97c \ub450 \ubc88 \uc21c\ud68c(\ud55c \ubc88\uc740 `fmap`, \ud55c \ubc88\uc740 `sequenceA`)\ud558\ubbc0\ub85c, `sequenceA`\ubcf4\ub2e4\ub294 `traverse`\ub97c \uc815\uc758\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc73c\ub85c \uc120\ud638\ub41c\ub2e4.\\n\\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c, \ud074\ub798\uc2a4\ub294 \uad00\ub828\ub41c \ud6a8\uacfc\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uac00 \uc544\ub2cc \ubaa8\ub098\ub4dc\uc778 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub97c \uc704\ud574 \ub450 \ud2b8\ub798\ubc84\uc11c\ube14 \uae30\ubcf8 \ud568\uc218\uc5d0 \ub300\ud55c \ud2b9\ubcc4\ud55c \uc774\ub984\ub3c4 \uc81c\uacf5\ud55c\ub2e4.\\n\\n```haskell\\nmapM     :: Monad m => (a -> m b) -> t a -> m (t b)\\nmapM     = traverse\\n\\nsequence :: Monad m => t (m a) -> m (t a)\\nsequence = sequenceA\\n```\\n\\n\uacb0\ub860\uc801\uc73c\ub85c, \uc0c8\ub85c\uc6b4 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \ub54c `traverse`\ub098 `sequenceA` \uae30\ubcf8 \ud568\uc218 \uc911 \ud558\ub098\ub97c \uc815\uc758\ud568\uc73c\ub85c\uc368 \uadf8 \ud0c0\uc785\uc744 \ud2b8\ub798\ubc84\uc11c\ube14 \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294\uc9c0 \uace0\ub824\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud558\ub2e4. \uadf8\ub807\uac8c \ud558\ub294 \uac83\uc758 \uc7a5\uc810\uc740 `Traversable` \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uc815\uc758\ub4e4\uc744 \ud1b5\ud574 \ud574\ub2f9 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c effectful \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uc5ec\ub7ec \uc720\uc6a9\ud55c \ud568\uc218\ub4e4\uc744 \uc81c\uacf5\ubc1b\ub294\ub2e4\ub294 \uc810\uc774\ub2e4."},{"id":"intro-wait-free-algorithms","metadata":{"permalink":"/blog/intro-wait-free-algorithms","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2025-09-03-wait-free-algo/index.md","source":"@site/blog/2025-09-03-wait-free-algo/index.md","title":"An Introduction to wait-free algorithms","description":"image.png","date":"2025-09-03T00:00:00.000Z","tags":[{"inline":false,"label":"C++","permalink":"/blog/tags/cpp","description":"C++ tag description"},{"inline":false,"label":"\ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d","permalink":"/blog/tags/concurrent-programming","description":"\ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \ub300\ud55c \uae00"}],"readingTime":12.85,"hasTruncateMarker":true,"authors":[{"name":"dream2405","title":"\uac8c\uc73c\ub978 \ub300\ud559\uc0dd","socials":{"github":"https://github.com/dream2405"},"imageURL":"https://github.com/dream2405.png","key":"dream2405","page":null}],"frontMatter":{"slug":"intro-wait-free-algorithms","title":"An Introduction to wait-free algorithms","authors":["dream2405"],"tags":["C++","concurrent_programming"],"image":"./image.png"},"unlisted":false,"prevItem":{"title":"Foldables and friends","permalink":"/blog/foldables-and-friends"},"nextItem":{"title":"Monads and more","permalink":"/blog/monads-and-more"}},"content":"![image.png](image.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n[\uc720\ud29c\ube0c \ub9c1\ud06c](https://youtu.be/kPh8pod0-gk?si=fnCqMylNxru464Ot)\\n\\n\uc774 \uae00\uc740 CppCon 2024\uc5d0\uc11c \uce74\ub124\uae30 \uba5c\ub7f0 \ub300\ud559\uad50\uc758 \uc870\uad50\uc218(assistant teaching professor), \\nDaniel Anderson\uc774 \ubc1c\ud45c\ud55c \uc790\ub8cc\ub97c \ubc14\ud0d5\uc73c\ub85c \uc791\uc131\ub418\uc5c8\ub2e4.\\n\\n---\\n\\n## \ubc30\uc6b8 \ub0b4\uc6a9\\n\\n- \ub3d9\uc2dc\uc131\uacfc lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \ub300\ud55c \uac04\ub2e8\ud55c \ubcf5\uc2b5\\n- lock-free \uc124\uacc4 \ud328\ud134\uc758 \\"\uae30\ubcf8\uc801\uc778\\" \ub0b4\uc6a9 \uac80\ud1a0\\n- wait-free \uc54c\uace0\ub9ac\uc998\uc758 \uc815\uc758\uc640 \uc2e4\uc81c \uc801\uc6a9\uc5d0 \ub300\ud55c \uc774\ud574\\n- \uc6b0\uc544\ud55c wait-free \uc54c\uace0\ub9ac\uc998\uacfc wait-free \uc124\uacc4\uc758 \uc608\uc2dc\\n- \uac04\ub2e8\ud55c \ubca4\uce58\ub9c8\ud06c \uacb0\uacfc\\n\\n### \ud574\uacb0\ud558\uace0\uc790 \ud558\ub294 \ubb38\uc81c\\n\\nsticky counter (0\uc5d0\uc11c \uba48\ucd94\ub294 \uce74\uc6b4\ud130)\ub97c \uad6c\ud604\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud558\uc790.\\n\\n`Counter` \uad6c\uc870\uccb4\uc758 \uae30\ubcf8\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n```cpp\\n// Precondition: The counter is not zero\\nstruct Counter {\\n    // If the counter is greater than zero, add one and return true\\n    // otherwise do nothing and return false\\n    bool increment_if_not_zero();\\n    \\n    // Decrement the counter. If the counter now equals zero,\\n    // return true. Otherwise return false.\\n    bool decrement();\\n    \\n    uint64_t read(); // Return the current value of the counter\\n};\\n```\\n\\n`Counter` \uad6c\uc870\uccb4\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc138 \uac00\uc9c0 \uc8fc\uc694 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4.\\n\\n- `increment_if_not_zero()` : \uce74\uc6b4\ud130 \uc99d\uac00\ub97c \uc2dc\ub3c4\\n    - \uce74\uc6b4\ud130\uac00 `0`\ubcf4\ub2e4 \ud06c\uba74 `1`\uc744 \ub354\ud558\uace0 `true` \ubc18\ud658\\n    - \uce74\uc6b4\ud130\uac00 `0`\uc774\uba74 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uace0 `false` \ubc18\ud658\\n- `decrement()` : \uce74\uc6b4\ud130\ub97c \uac10\uc18c\\n    - \uce74\uc6b4\ud130\ub97c \uac10\uc18c\uc2dc\ud0a8 \ud6c4  `0`\uc774 \ub418\uba74 `true` \ubc18\ud658\\n    - \uce74\uc6b4\ud130\ub97c \uac10\uc18c\uc2dc\ud0a8 \ud6c4  `0`\uc774 \uc544\ub2c8\ub77c\uba74 `false` \ubc18\ud658\\n- `read()` : \ud604\uc7ac \uce74\uc6b4\ud130 \uac12\uc744 \ubc18\ud658\\n\\n:::note\\n\\n\uc774\ub7f0 \ubc29\uc2dd\uc758 \uce74\uc6b4\ud130\ub294 \ub9e4\uc6b0 \uc2e4\uc6a9\uc801\uc774\ub2e4. \\n\ub3d9\uc2dc\uc131 \uc790\ub8cc\uad6c\uc870\ub098, \uba40\ud2f0\uc2a4\ub808\ub529 \ud658\uacbd\uc5d0\uc11c\uc758 \uba54\ubaa8\ub9ac \uad00\ub9ac\uc5d0 \ub9e4\uc6b0 \uc801\ud569\ud558\ub2e4.\\n\\n\uc608\ub85c \ub4e4\uc5b4 `std::weak_ptr<T>::lock`\uc5d0 \uc774\ub7f0 \ubc29\uc2dd\uc758 \uce74\uc6b4\ud130\uac00 \ud544\uc694\ud558\ub2e4.\\n\\n`std::weak_ptr<T>::lock` \uc758 \uc8fc\uc694 \uae30\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n- `weak_ptr`\uac00 \uac00\ub9ac\ud0a4\ub294 \uac1d\uccb4\uac00 \uc544\uc9c1 \uc720\ud6a8\ud55c\uc9c0 \ud655\uc778\\n- \uc720\ud6a8\ud558\ub2e4\uba74 \ud574\ub2f9 \uac1d\uccb4\uc5d0 \ub300\ud55c `shared_ptr`\ub97c \ubc18\ud658\\n- \uac1d\uccb4\uac00 \uc774\ubbf8 \uc0ad\uc81c\ub418\uc5c8\ub2e4\uba74 \ube48 `shared_ptr` (`nullptr`\uc744 \uac00\ub9ac\ud0b4)\uc744 \ubc18\ud658\\n\\n\ub530\ub77c\uc11c `weak_ptr`\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ub3d9\uc791\ud574\uc57c \ud55c\ub2e4.\\n\\n- \uac1d\uccb4\uc758 \uc218\uba85\uc744 \ucd94\uc801\ud558\ub418 reference count\ub294 \uc99d\uac00\ub418\uc9c0 \uc54a\uc74c\\n- `lock()` \ud638\ucd9c \uc2dc \uac1d\uccb4\uac00 \uc544\uc9c1 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud568\\n- \ud655\uc778\ud558\ub294 \ub3d9\uc548 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uac1d\uccb4\ub97c \uc0ad\uc81c\ud560 \uc218 \uc788\uc74c\\n\\n\uc5ec\uae30\uc11c `Counter` \uc758 \uc5ed\ud560\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n- \uac1d\uccb4\uac00 \uc544\uc9c1 \uc0b4\uc544\uc788\ub294\uc9c0(reference count > 0) \ud655\uc778\\n- \uc0b4\uc544\uc788\ub2e4\uba74 reference count\ub97c \uc99d\uac00\uc2dc\ucf1c \uac1d\uccb4 \uc218\uba85 \uc5f0\uc7a5\\n- \uc774 \ub450 \uc791\uc5c5\uc774 atomic\ud558\uac8c \uc774\ub904\uc838\uc57c \ud568\\n\\n:::\\n\\n\uc774\uc81c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud574\ubcf4\uc790.\\n\\n## \uccab \ubc88\uc9f8 \uad6c\ud604\\n\\n```cpp\\nstruct Counter {\\n    bool increment_if_not_zero() {\\n        if (counter > 0) {\\n            counter++;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    bool decrement() {\\n        return (--counter == 0);\\n    }\\n\\n    uint64_t read() { return counter; }\\n\\n    uint64_t counter{1};\\n};\\n```\\n\\n\ub3d9\uc2dc\uc131 \ud658\uacbd\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\uc740 \ub2e8\uc21c\ud55c \uad6c\ud604\uc774\ub2e4. \uc774\ub7f0 \ubc29\uc2dd\uc758 \uad6c\ud604\uc740 \uc2f1\uae00 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c\ub294 \ubb38\uc81c\uac00 \uc5c6\uc9c0\ub9cc, \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c\ub294 \ubb38\uc81c\uac00 \uc0dd\uae38 \uac83\uc784\uc744 \uc54c\uc544\ucc28\ub9b4 \uc218 \uc788\uc744 \uac83\uc774\ub2e4.\\n\\n### Thread safe \ud558\uac8c \ub9cc\ub4e4\uae30\\n\\n```cpp\\nstruct Counter {\\n    bool increment_if_not_zero() {\\n        std::lock_guard g_{m};\\n        if (counter > 0) {\\n            counter++;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    bool decrement() {\\n        std::lock_guard g_{m};\\n        return (--counter == 0);\\n    }\\n    \\n    std::mutex m;\\n    \\n    uint64_t counter{1};\\n}\\n```\\n\\n\ub450 \ud568\uc218\ub97c \uc2a4\ub808\ub4dc-\uc548\uc804\ud558\uac8c \ub9cc\ub4e4\uc5c8\ub2e4.\\n\\n:::info\\n\\n`std::lock_guard`\ub294 C++\uc758 RAII(Resource Acquisition Is Initialization) \ud328\ud134\uc744 \ud65c\uc6a9\ud55c mutex wrapper \ud074\ub798\uc2a4\uc774\ub2e4.\\n\\n\uc774\ub97c \ud1b5\ud574 \ubba4\ud14d\uc2a4\ub97c lock\ud558\uba74, \uba85\uc2dc\uc801\uc778 unlock \ub300\uc2e0 \uc2a4\ucf54\ud504\ub97c \ubc97\uc5b4\ub098\uba74 \uc790\ub3d9\uc73c\ub85c \uc18c\uba78\ub418\uac8c \ub9cc\ub4e4\uc5b4 mutex\ub3c4 \uc790\ub3d9\uc73c\ub85c \ud574\uc81c\ub41c\ub2e4.\\n\\n:::\\n\\n\uc774\ub97c \ud1b5\ud574 \ubb34\uc5c7\uc744 \uc54c \uc218 \uc788\ub294\uac00?\\n\\n## \uc2dc\uc0ac\uc810\\n\\n- \uc774\ub7f0 \ubc29\uc2dd\uc740 \ub3d9\uc2dc\uc131 \ubb38\uc81c\uc758 \ub300\ubd80\ubd84\uc744 \ud574\uacb0\ud560 \uc218 \uc788\ub2e4\\n- \ud558\uc9c0\ub9cc \uc774\ub294 \uc2e4\uc9c8\uc801\uc73c\ub85c **\ub3d9\uc2dc\uc131\uc744 \uc81c\uac70**\ud568\uc73c\ub85c\uc368 \ud574\uacb0\ud558\ub294 \uac83.\\n- \uc774\ub7f0 \ubc29\uc2dd\uc740 \ub300\uccb4\ub85c(\ud56d\uc0c1\uc740 \uc544\ub2d8) \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4\\n    - \uc8fc\uc758\uc0ac\ud56d: \uc131\ub2a5\uc5d0 \ub300\ud574 **\ucd94\uce21\ud558\uc9c0 \ub9c8\ub77c**. \ud56d\uc0c1 **\uc131\ub2a5\uc744 \uce21\uc815**\ud574\uc57c \ud55c\ub2e4.\\n\\n:::note\\n\\n\uc2e4\uc9c8\uc801\uc73c\ub85c \ub3d9\uc2dc\uc131\uc744 \uc81c\uac70\ud568\uc73c\ub85c\uc368 \ud574\uacb0\ud558\ub294 \uac83\uc774\ub77c\ub294 \ube44\ud310\uc740 critical section\uc5d0 \ub300\ud574 \uc598\uae30\ud558\ub294 \uac83 \uac19\ub2e4.\\n\\n\ucf54\ub4dc\uc758 \uc77c\ubd80\ubd84\uc5d0 \ub300\ud574 **\ub3d9\uc2dc\uc131 \uc0c1\ud669\uc744 \ucc28\ub2e8**\ud574\ubc84\ub9bc\uc73c\ub85c\uc368, \ub3d9\uc2dc\uc131 \uc0c1\ud669\uc774 \uc560\ucd08\ubd80\ud130 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc73c\ubbc0\ub85c \ub2f9\uc5f0\ud788 \ub3d9\uc2dc\uc131 \ubb38\uc81c\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4.\\n\\n\uc774\ub294 \uc5b4\ub5bb\uac8c \ubcf4\uba74 \ub9e4\uc6b0 \ub2e8\uc21c\ud55c \ud574\uacb0 \ubc29\ubc95\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c **\ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uac83 \uac19\uc740 \uc0c1\ud669**\uc744 \ucc28\ub2e8\ud574\ubc84\ub9ac\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n:::\\n\\n\uadf8\ub807\ub2e4\uba74 \ub354 \ubc1c\uc804\ub41c \ubc29\uc2dd\uc740 \uc5b4\ub5a4\uac83\ub4e4\uc774 \uc788\ub294\uac00?\\n\\n## \uc9c4\ud589 \ubcf4\uc7a5(Progress guarantees)\\n\\n\uc9c4\ud589 \ubcf4\uc7a5\uc774\ub780 \ub3d9\uc2dc\uc131 \uc54c\uace0\ub9ac\uc998\uc744 \uc774\ub860\uc801\uc73c\ub85c \ubd84\ub958\ud558\ub294 \ubc29\ubc95\uc774\ub2e4.\\n\\n- **Blocking**: \ubcf4\uc7a5 \uc5c6\uc74c\\n    - \uc55e\uc11c \ubcf8 \ubba4\ud14d\uc2a4\ub97c \uc0ac\uc6a9\ud55c \ubc29\uc2dd\uc774 \ud55c \uc608\uc2dc\\n    - \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 mutex\ub97c \ubcf4\uc720\ud558\uace0 \uc788\uc73c\uba74, \ud604\uc7ac \uc2a4\ub808\ub4dc\ub294 \ubb34\uc870\uac74 \ub300\uae30\ud574\uc57c \ud55c\ub2e4\\n    - \ub2e4\ub978 \ubaa8\ub4e0 \uc2a4\ub808\ub4dc\uac00 \uc911\ub2e8\ub418\ub354\ub77c\ub3c4(isolation \uc0c1\ud0dc), mutex\ub97c \ubcf4\uc720\ud55c \uc2a4\ub808\ub4dc\uac00 \uc0b4\uc544\uc788\uc9c0 \uc54a\ub2e4\uba74 \uc601\uc6d0\ud788 \uc9c4\ud589\ud558\uc9c0 \ubabb\ud560 \uc218 \uc788\uc74c - deadlock \ubc1c\uc0dd \uac00\ub2a5\uc131\\n- **Obstruction free** (isolation\uc5d0\uc11c\uc758 \uc9c4\ud589): \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\uac00 \uaca9\ub9ac\ub41c \uc0c1\ud0dc\uc5d0\uc11c \uc2e4\ud589\ub418\uba74 \uc720\ud55c\ud55c \uc218\uc758 \ub2e8\uacc4 \ub0b4\uc5d0 \uc5f0\uc0b0\uc744 \uc644\ub8cc\\n    - \uc5b4\ub5a0\ud55c \uc2a4\ub808\ub4dc\ub4e0\uc9c0 \uac04\uc5d0, \ud558\ub098\uc758 \uc2a4\ub808\ub4dc \uc678\uc5d0 \ub2e4\ub978 \ubaa8\ub4e0 \uc2a4\ub808\ub4dc\uac00 \uc911\ub2e8\ub41c \uc0c1\ud0dc\ub77c\uba74 \uc5b4\ub5a0\ud55c \uc0c1\ud669\uc774\ub4e0\uc9c0 \uac04\uc5d0 \ubc18\ub4dc\uc2dc \uc720\ud55c\ud55c \ub2e8\uacc4 \ub0b4\uc5d0 \uc791\uc5c5\uc744 \uc644\ub8cc\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4.\\n    - \ub530\ub77c\uc11c \uc774 \ubc29\uc2dd\uc740 deadlock\uc5d0 \uba74\uc5ed\\n- **Lock free** (\ucd5c\uc18c \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\uac00 \uc9c4\ud589): \uc5b4\ub290 \uc2dc\uc810\uc5d0\uc11c\ub4e0 \ucd5c\uc18c\ud55c \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\ub294 \uc790\uc2e0\uc758 \uc5f0\uc0b0\uc5d0\uc11c \uc9c4\ud589\uc744 \uc774\ub8e8\uace0 \uc788\uc74c\\n    - \uc2dc\uc2a4\ud15c \uc804\uccb4\uc758 \ucc98\ub9ac\ub7c9\uc744 \ubcf4\uc7a5. \uc77c\ubd80 \uc5f0\uc0b0\uc740 \ud56d\uc0c1 \uc644\ub8cc\ub418\uace0 \uc788\uc9c0\ub9cc, \uac1c\ubcc4 \uc5f0\uc0b0\uc758 \uc644\ub8cc\ub294 \uc808\ub300 \ubcf4\uc7a5\ub418\uc9c0 \uc54a\uc74c\\n- **Wait free** (\ubaa8\ub4e0 \uc2a4\ub808\ub4dc\uac00 \uc9c4\ud589): \ub2e4\ub978 \ub3d9\uc2dc \uc5f0\uc0b0\uc5d0 \uad00\uacc4\uc5c6\uc774 \ubaa8\ub4e0 \uc5f0\uc0b0\uc774 \uc720\ud55c\ud55c \uc218\uc758 \ub2e8\uacc4 \ub0b4\uc5d0 \uc644\ub8cc\ub428\\n    - \ubaa8\ub4e0 \uac1c\ubcc4 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \uc720\ud55c\ud55c \uc644\ub8cc \uc2dc\uac04\uc744 \ubcf4\uc7a5\ud568\\n\\n\uc774\uc81c `Counter` \ub97c lock-free\ub85c \uad6c\ud604\ud574\ubcf4\uc790.\\n\\n## lock-free \uad6c\ud604\\n\\n### `counter` \ubcc0\uc218\\n\\n```cpp\\nstd::atomic<uint64_t> counter{1};\\n```\\n\\nlock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ud560\ub824\uba74, atomic \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.\\n\\n### `increment_if_not_zero()` \ub97c \uad6c\ud604\\n\\n```cpp\\nbool increment_if_not_zero() {\\n    auto current = counter.load();\\n    while (current > 0 && !counter.compare_exchange_weak(current, current + 1)) { }\\n    return current > 0;\\n}\\n```\\n\\n\uc5ec\uae30\uc11c `compare_exchange_weak()` \ub77c\ub294 \uc5f0\uc0b0\uc774 \ub4f1\uc7a5\ud55c\ub2e4.\\n\\n`counter.compare_exchange_weak(current, current + 1)` \ucf54\ub4dc\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n- `counter`\uc758 \ud604\uc7ac \uac12\uc774 `current`\uc640 \uac19\ub2e4\uba74\\n    - `counter` \uac12\uc744 `current + 1`\ub85c \ubcc0\uacbd\\n    - `true` \ubc18\ud658\\n- \ub2e4\ub974\ub2e4\uba74\\n    - `current`\ub97c `counter`\uc758 \ud604\uc7ac \uac12\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\\n    - `false` \ubc18\ud658\\n\\n`compare_exchange_weak()` \uc5f0\uc0b0\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4.\\n\\n```cpp\\ncompare_exchange(expected&, desired) {\\n    if (current_value == expected) {\\n        current_value = desired; \\n        return true; \\n    } else { \\n        expected = current_value; \\n        return false; \\n    }\\n}\\n```\\n\\n:::warning\\n\\n\uc2e4\uc81c `compare_exchange` \uc5f0\uc0b0\uc758 \uad6c\ud604\uc740 **\ud558\ub4dc\uc6e8\uc5b4\uc758 \uc9c0\uc6d0 \uc5c6\uc774\ub294 \ubd88\uac00\ub2a5**\ud558\ub2e4.\\n\ucf54\ub4dc\ub85c \uad6c\ud604\ud558\ub824\uba74 \uacb0\uad6d \uc5b4\ub5a0\ud55c \ud615\ud0dc\ub85c\ub4e0 lock\uc774 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 atomic\ud568\uc744 \ubcf4\uc7a5\ud560 \uc218 \uc5c6\ub2e4.\\n\\n\uc2e4\uc81c\ub85c\ub294 ARM, x86_64 \ub4f1\uc758 \uc544\ud0a4\ud14d\ucc98\uc5d0\uc11c atomic \uc5f0\uc0b0\uc744 \uc704\ud55c \uba85\ub839\uc5b4\ub97c \uc81c\uacf5\ud558\ubbc0\ub85c \uc774\ub97c \ud1b5\ud574 \uad6c\ud604\ud55c\ub2e4.\\n\\n:::\\n\\n\uc774\ub7f0 \ubc29\uc2dd\uc744 **CAS loop**\ub77c\uace0 \ud55c\ub2e4.\\n\\n### `decrement()` \uad6c\ud604\\n\\n```cpp\\nbool decrement() {\\n    return counter.fetch_sub(1) == 1;\\n}\\n```\\n\\n`counter.fetch_sub(1)` \ucf54\ub4dc\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n- `counter`\ub97c `1` \uac10\uc18c\uc2dc\ud0a4\uace0 \uc6d0\ub798\uc758 `counter` \uac12 \ubc18\ud658\\n\\n\ub530\ub77c\uc11c \ubc18\ud658\uac12\uc774  `1`\uc774\uc5c8\ub2e4\uba74 \uac10\uc18c \ud6c4 `0`\uc774 \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uc774\ubbc0\ub85c `true` \ub97c \ubc18\ud658\ud55c\ub2e4.\\n\\n### \uc804\uccb4 \ucf54\ub4dc\\n\\n```cpp\\nstruct Counter {\\n    bool increment_if_not_zero() {\\n        auto current = counter.load();\\n        while (current > 0 && !counter.compare_exchange_weak(current, current + 1)) { }\\n        return current > 0;\\n    }\\n    \\n    bool decrement() {\\n        return counter.fetch_sub(1) == 1;\\n    }\\n    \\n    uint64_t read() { return counter.load(); }\\n    \\n    std::atomic<uint64_t> counter{1};\\n}\\n```\\n\\n## **CAS loop**\\n\\n\uc774\ub7f0 CAS loop(compare-and-swap loop) \ubc29\uc2dd\uc740 lock-free \uc54c\uace0\ub9ac\uc998\uacfc \ub370\uc774\ud130 \uad6c\uc870\uc758 \uae30\ubcf8\uc774 \ub418\ub294 \uc124\uacc4 \ud328\ud134\uc774\ub2e4.\\n\\n- \ub370\uc774\ud130 \uad6c\uc870\uc758 \ud604\uc7ac \uc0c1\ud0dc\ub97c \uc77d\uc74c\\n- \ud604\uc7ac \uc0c1\ud0dc\ub85c\ubd80\ud130 \uc0c8\ub85c\uc6b4 \uc6d0\ud558\ub294 \uc0c1\ud0dc\ub97c \uacc4\uc0b0\\n- \ub2e4\ub978 \ub204\uad70\uac00\uac00 \uc774\ubbf8 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c\ub9cc \ubcc0\uacbd\uc744 \ucee4\ubc0b(compare-exchange)\\n- \ub2e4\ub978 \ub204\uad70\uac00\uac00 \ubcc0\uacbd\ud588\ub2e4\uba74, \ub2e4\uc2dc \uc2dc\ub3c4\\n\\n\uc9c4\ud589\uc740 **lock-free**\uc774\ub2e4.\\n\\n- \ub9cc\uc57d \ud55c \uc5f0\uc0b0\uc774 \uc9c4\ud589\ud558\uc9c0 \ubabb\ud588\ub2e4\uba74(compare-exchange\uac00 false\ub97c \ubc18\ud658) \\n\uc774\ub294 \ub2e4\ub978 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ud588\uae30 \ub54c\ubb38\\n- \uc2a4\ub808\ub4dc\ubcc4 \uac1c\ubcc4 \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud558\ub354\ub77c\ub3c4, **\uc2dc\uc2a4\ud15c \uc804\uccb4\uc801\uc73c\ub85c \uc9c4\ud589**\uc740 \ubcf4\uc7a5\\n\\n:::note\\n\\nCAS loop \ubc29\uc2dd\uc774 \uae30\uc874\uc758 blocking \ubc29\uc2dd\uacfc \ub2e4\ub978 \ud575\uc2ec\uc801\uc778 \uc774\uc720\ub294 \uacb0\uad6d **\uc9c4\ud589 \uac00\ub2a5 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\ub294 \uc0c1\ud0dc**\uc5d0 \uc788\ub2e4. \\n\\nCAS loop\ub294 `counter` **\uac12 \uc790\uccb4**\uac00 \uc9c4\ud589 \uac00\ub2a5 \uc5ec\ubd80\ub97c \uacb0\uc815\ud55c\ub2e4.\\n\\n- \uc2e4\uc81c \uc791\uc5c5 \ub300\uc0c1(`counter`)\uacfc \uc9c4\ud589 \uac00\ub2a5 \uc5ec\ubd80 \ud310\ub2e8\uc774 \uacb0\ud569\ub418\uc5b4 \uc788\uc74c\\n- `counter` \uac12\uc774 \ubcc0\uacbd\ub418\uc5c8\ub2e4\ub294 \uac83 \u2192 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc9c4\ud589\ud588\ub2e4\ub294 \uac83\\n\\nMutex\ub294 mutex\ub77c\ub294 **\ubcc4\ub3c4\uc758 \uc0c1\ud0dc\uac12**\uc73c\ub85c \uc9c4\ud589 \uac00\ub2a5 \uc5ec\ubd80\ub97c \uacb0\uc815\\n\\n- \uc2e4\uc81c \uc791\uc5c5 \ub300\uc0c1(`counter`)\uacfc \uc9c4\ud589 \uac00\ub2a5 \uc5ec\ubd80 \ud310\ub2e8\uc774 \ubd84\ub9ac\ub418\uc5b4 \uc788\uc74c\\n- `mutex` \ud68d\ub4dd \uc2e4\ud328 \u2192 \uc9c4\ud589 \ubd88\uac00, \ud558\uc9c0\ub9cc \uc774\uac83\uc774 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc758 \uc9c4\ud589\uc744 \ubcf4\uc7a5\ud558\uc9c0\ub294 \uc54a\uc74c\\n\\n\uc774 \ucc28\uc774\ub85c \uc778\ud574\\n\\n- CAS loop\ub294 \uc9c4\ud589 \uc2e4\ud328\uac00 \uace7 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc758 \uc9c4\ud589\uc744 \uc758\ubbf8\\n- Mutex\ub294 \uc9c4\ud589 \uc2e4\ud328\uac00 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc758 \uc9c4\ud589\uc744 \ubcf4\uc7a5\ud558\uc9c0 \uc54a\uc74c\\n\\n\ub530\ub77c\uc11c lock-free\uc758 \uc2dc\uc2a4\ud15c \uc804\uccb4\uc801 \uc9c4\ud589 \ubcf4\uc7a5\uc740 \uc0c1\ud0dc\uac12\uacfc \uc791\uc5c5\uc774 \uacb0\ud569\ub418\uc5b4 \uc788\ub2e4\ub294 \ud2b9\uc131\uc5d0\uc11c \uc790\uc5f0\uc2a4\ub7fd\uac8c \ub3c4\ucd9c\ub418\ub294 \uac83\uc774\ub2e4.\\n\\n:::\\n\\n**wait-free\ub294 \uc544\ub2c8\ub2e4.** \\n\\n- \ud2b9\uc815 \uc5f0\uc0b0\uc774 \uacbd\uc7c1\ud558\ub294 \uc5f0\uc0b0\ub4e4\uc774 \uc131\uacf5\ud558\uba74\uc11c CAS loop\uc5d0\uc11c \uc601\uc6d0\ud788 \uc2e4\ud328\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\\n- \uadf9\ub2e8\uc801\uc778 \uc608\uc2dc\ub85c\ub294, \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\ub9cc\uc774 \uc9c4\ud589\ud558\uace0 \ub2e4\ub978 \ubaa8\ub4e0 \uc2a4\ub808\ub4dc\ub4e4\uc774 \uacc4\uc18d \uc2e4\ud328\ud560 \uc218\ub3c4 \uc788\ub2e4.\\n\\n:::info\\n\\n\uc880 \ub354 \uc804\ubb38\uc801\uc778 \uc6a9\uc5b4\ub85c\ub294, lock-free \ubc29\uc2dd\uc740 blocking \ubc29\uc2dd\uacfc\ub294 \ub2ec\ub9ac deadlock \ud604\uc0c1\uc744 \ubc29\uc9c0\ud558\uc9c0\ub9cc, \uac1c\ubcc4 \uc2a4\ub808\ub4dc\uac00 \uc601\uc6d0\ud788 \uc9c4\ud589\ud558\uc9c0 \ubabb\ud558\ub294 **starvation** \ud604\uc0c1\uc740 \ub9c9\uc9c0 \ubabb\ud55c\ub2e4\uace0 \uc124\uba85\ud560 \uc218 \uc788\ub2e4.\\n\\n\uadf8\ub9ac\uace0 \uc774 starvation \ud604\uc0c1\uae4c\uc9c0\ub3c4 \ub9c9\ub294 \uac83\uc774 wait-free \ubc29\uc2dd\uc758 \ubaa9\ud45c \uc911 \ud558\ub098\uc774\ub2e4.\\n\\n:::\\n\\n\uadf8\ub807\ub2e4\uba74 wait-free\ub294 \uc5b4\ub5bb\uac8c \uc124\uacc4\ud574\uc57c \ud558\ub294\uac00?\\n\\n## Wait Freedom \ub3c4\uad6c\ub4e4\\n\\nwait-free \uc54c\uace0\ub9ac\uc998\uc740 \ubb34\ud55c\ud55c CAS \ub8e8\ud504\ub97c \ud3ec\ud568\ud560 \uc218 \uc5c6\ub2e4.\\n\\n- \uc774\ub294 compare-exchange\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\ub294 \uc758\ubbf8\uac00 \uc544\ub2c8\ub77c, \ub2e8\uc9c0 \ubb34\ud55c \ub8e8\ud504 \uc548\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\ub294 \uc758\ubbf8!\\n\\n\ub300\ubd80\ubd84\uc758 wait-free \uc54c\uace0\ub9ac\uc998\uc740 atomic read-modify-write \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\\n\\n- compare_exchange_weak/strong(expected, desired)\\n    - Atomically replaces the current value with desired if current equals expected, otherwise loads the current value\\n- fetch_add(x) / fetch_sub(x)\\n    - Atomically add/subtract x from the given variable and return the original value\\n- exchange(desired)\\n    - Stores the value desired and returns the old value\\n\\n## Wait-free \uc54c\uace0\ub9ac\uc998\uc744 \ud5a5\ud558\uc5ec\\n\\n\uae30\uc874\uc758 lock-free \uc54c\uace0\ub9ac\uc998\uc758 \ud575\uc2ec\uc740 CAS loop\\n\\n- \uc2a4\ub808\ub4dc\ub4e4\uc774 \ub2e4\ub978 \uc2a4\ub808\ub4dc\ub4e4\uc758 \uc9c4\ud589\uc744 **\ubc29\ud574**\ud568\\n- \uc989 \uc2a4\ub808\ub4dc\ub4e4\uc774 \ub2e4\ub978 \uc2a4\ub808\ub4dc\ub4e4\uc744 **\ud76c\uc0dd**\uc2dc\ud0a4\uba74\uc11c \uc790\uc2e0\uc758 \uc5f0\uc0b0\uc744 \uba3c\uc800 \uc644\ub8cc\ud558\ub824\uace0 \uacbd\uc7c1!\\n- wait freedom\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294, \uc2a4\ub808\ub4dc\ub4e4\uc774 \uacbd\uc7c1\ud558\ub294 \uc2a4\ub808\ub4dc\ub4e4\uc5d0 \uc758\ud574 **\ucc28\ub2e8\ub418\uc5b4\uc11c\ub294 \uc548 \ub428**\\n\\nwait-free \uc54c\uace0\ub9ac\uc998\uc758 \uc124\uacc4\\n\\n- \uacbd\uc7c1\uc801\uc774\uae30\ubcf4\ub2e4\ub294 **\ud611\ub825\uc801**\uc774\uc5b4\uc57c \ud568\\n- Wait-free \uc54c\uace0\ub9ac\uc998 \uc124\uacc4\uc758 \ud575\uc2ec\uc740 **helping**\\n- \uc9c4\ud589 \uc911\uc778 \ub2e4\ub978 \uc5f0\uc0b0\uacfc \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ub418\ub294 \uc5f0\uc0b0\ub4e4\uc740 \uadf8\ub4e4\uc744 \uae30\ub2e4\ub9ac\uac70\ub098 \uadf8\ub4e4\uacfc \uacbd\uc7c1\ud558\ub294 \ub300\uc2e0 \uadf8\ub4e4\uc758 \uc9c4\ud589\uc744 \ub3d5\uae30 \uc704\ud574 \uc2dc\ub3c4\\n- \uc9c4\ud589 \uc911\uc778 \ub2e4\ub978 \uc5f0\uc0b0\ub4e4\uc744 \uac10\uc9c0\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \ud544\uc694\\n\\n:::note\\n\\n\ubc1c\ud45c\uc790 Daniel Anderson \uad50\uc218\uc5d0 \ub530\ub974\uba74, \uc774\ub294 \uc27d\uc9c0 \uc54a\uc740 \ubc29\ubc95\uc774\ub2e4. \\n\uc5b4\ub5a0\ud55c CAS loop \ubc29\uc2dd\uc774\uac74 \uac04\uc5d0 helping \ubc29\uc2dd\uc73c\ub85c \ubc14\uafb8\ub294\uac8c \uac00\ub2a5\ud55c\uac83\ub3c4 \uc544\ub2c8\ub2e4.\\n\\n\ubc14\uafb8\ub294\uac8c \uac00\ub2a5\ud558\ub354\ub77c\ub3c4, blocking \ubc29\uc2dd\uc744 lock-free\ub85c \ubc14\uafb8\ub294 \uac83\ubcf4\ub2e4, \\n\uc77c\ubc18\uc801\uc73c\ub85c \ud6e8\uc52c \ud070 \uc54c\uace0\ub9ac\uc998\uc758 \uc7ac\uc124\uacc4\uac00 \ud544\uc694\ud558\ub2e4.\\n\\n\uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 wait-free \uc54c\uace0\ub9ac\uc998\uc758 \uc7a5\uc810\uc774 \ub69c\ub837\ud558\uae30 \ub54c\ubb38\uc5d0 \uc6b0\ub9ac\ub294 \uc54c\uc544\uc57c \ud55c\ub2e4.\\n\\n:::\\n\\n## Wait-free counter design\\n\\nwait-free \ubc29\uc2dd counter\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \uc694\uad6c\ub418\ub294 \uac83\uc740 2\uac00\uc9c0\uc774\ub2e4.\\n\\n- \uc5f0\uc0b0\ub4e4\uc774 \ub2e4\ub978 \uc5f0\uc0b0\ub4e4\uc774 \uc9c4\ud589 \uc911\uc778\uc9c0 \uac10\uc9c0\ud560 \ubc29\ubc95\uc774 \ud544\uc694\\n- \ub2e4\ub978 \uc2a4\ub808\ub4dc\ub4e4\uc5d0\uac8c \uc6b0\ub9ac\uac00 counter\ub97c 0\uc73c\ub85c \uc124\uc815\ud560 \uacc4\ud68d\uc774 \uc788\uac70\ub098 \uc774\ubbf8 \uc124\uc815\ud588\ub2e4\ub294 \uac83\uc744 \uc54c\ub9b4 \ubc29\ubc95\uc774 \ud544\uc694\\n    - \uc2a4\ub808\ub4dc\ub4e4\ub07c\ub9ac **\ud611\ub825**\ud558\uae30 \uc704\ud574\uc11c \uc774\ub7f0 \uc815\ubcf4\ub97c \uc54c\uc544\uc57c \ud55c\ub2e4. \uc774\uac83\uc774 \uc774\uc804\uc758 \ubc29\uc2dd\uacfc\uc758 \ud575\uc2ec \ucc28\ubcc4\uc810\uc774\ub2e4.\\n\\n**\ud575\uc2ec \uc544\uc774\ub514\uc5b4**: counter\uc758 \uc0c1\uc704 \ube44\ud2b8\ub4e4 \uc911 \uc77c\ubd80\ub97c \ud50c\ub798\uadf8\ub85c \uc0ac\uc6a9\ud55c\ub2e4.\\n\\n![image.png](image%201.png)\\n\\n \\n\\n- \ucd5c\uc0c1\uc704 \ud50c\ub798\uadf8\ub294, \uc5b4\ub5a0\ud55c \uc2a4\ub808\ub4dc\uac00 counter\uac00 0\uc73c\ub85c \uc124\uc815\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 **\uc54c\ub9ac\uae30 \uc704\ud574** \uc0ac\uc6a9\\n- \ub450 \ubc88\uc9f8 \ud50c\ub798\uadf8\ub294 **helping**\uc744 \uc704\ud574 \uc0ac\uc6a9\\n\\n\uc6b0\uc120 \uc77d\uae30\uac00 \uc5c6\ub294 \uce74\uc6b4\ud130\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uc790.\\n\\n### Wait-free counter without read\\n\\n\uc6b0\uc120 `is_zero` flag\ub97c \uc124\uc815\ud558\uc790.\\n\\n```cpp\\nstatic constexpr uint64_t is_zero = 1ull << 63;\\n```\\n\\n\uadf8\ub9ac\uace0 `decrement()` \uc5f0\uc0b0\uc744 \uc815\uc758\ud55c\ub2e4.\\n\\n```cpp\\nbool decrement() {\\n    if (counter.fetch_sub(1) == 1) {\\n        uint64_t e = 0;\\n        return counter.compare_exchange_strong(e, is_zero);\\n    }\\n    return false;\\n}\\n```\\n\\n\ub3d9\uc791 \ubc29\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n1. `counter`\ub97c `1` \uac10\uc18c\uc2dc\ud0a4\uace0 \uc774\uc804 \uac12\uc744 \ubc18\ud658(`fetch_sub()`)\\n2. \ub9cc\uc57d \uc774\uc804 \uac12\uc774 `1`\uc774\uc5c8\ub2e4\uba74:\\n    - `counter`\uac00 `0`\uc774 \ub418\uc5c8\uc744 \uac83\uc774\ubbc0\ub85c\\n    - `counter`\uac00 \uc544\uc9c1 `0`\uc778\uc9c0 \ud655\uc778\ud558\uace0(e = 0)\\n    - \ub9de\ub2e4\uba74 `is_zero` flag\ub97c \uc124\uc815\\n3. \uadf8 \uc678\uc758 \uacbd\uc6b0 `false` \ubc18\ud658\\n\\n`0`\uc774 \ub418\ub294 \uc21c\uac04\uc744 \uc815\ud655\ud788 \uac10\uc9c0\ud558\uace0 flag\ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \ud575\uc2ec\uc774\ub2e4.\\n\\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c CAS loop \uc5c6\uc774 \uc5b4\ub5bb\uac8c increment\ub97c \ud558\ub294\uc9c0 flag\uc758 \ub9c8\ubc95\uc744 \ubcf4\uc790.\\n\\n```cpp\\nbool increment_if_not_zero() {\\n    return (counter.fetch_add(1) & is_zero) == 0;\\n}\\n```\\n\\n\ub3d9\uc791 \ubc29\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n1. `counter`\ub97c `1` \uc99d\uac00\uc2dc\ud0a4\uace0 \uc774\uc804 \uac12\uc744 \ubc18\ud658(`fetch_add()`)\\n2. \uc774\uc804 \uac12\uc758 \ucd5c\uc0c1\uc704 \ube44\ud2b8(`is_zero` flag)\ub97c \ud655\uc778\\n3. flag\uac00 `0`\uc774\uba74 `true` \ubc18\ud658 (`counter`\uac00 `0`\uc774 \uc544\ub2c8\uc5c8\uc74c\uc744 \uc758\ubbf8)\\n4. flag\uac00 `1`\uc774\uba74 `false` \ubc18\ud658 (\uc774\ubbf8 `counter`\uac00 `0`\uc774\uc5c8\uc74c\uc744 \uc758\ubbf8)\\n\\n\ucd5c\uc0c1\uc704 \ube44\ud2b8\uac00 `1` \uc774\uba74, \uce74\uc6b4\ud130\ub294 `0` \uc774\uace0 \ud558\uc704 \ube44\ud2b8\ub4e4\uc740 \ubcf4\uc9c0 \uc54a\ub294 \uac83\uc774 \ud575\uc2ec\uc774\ub2e4.\\n\\n![image.png](image%202.png)\\n\\n\ub2e4\uc74c\uacfc \uac19\uc774 \ud558\uc704 \ube44\ud2b8\uac00 \uacc4\uc18d \uc99d\uac00\ud558\ub354\ub77c\ub3c4, \ucd5c\uc0c1\uc704 \ube44\ud2b8\uac00 `1`\uc774\ubbc0\ub85c \uce74\uc6b4\ud130\ub294 \ud558\uc704 \ube44\ud2b8\uc640 \uc0c1\uad00\uc5c6\uc774 `0`\uc774\ub2e4.\\n\\n\uc804\uccb4 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n```cpp\\nstruct Counter {\\n    static constexpr uint64_t is_zero = 1ull << 63;\\n\\n    bool increment_if_not_zero() {\\n        return (counter.fetch_add(1) & is_zero) == 0;\\n    }\\n\\n    bool decrement() {\\n        if (counter.fetch_sub(1) == 1) {\\n            uint64_t e = 0;\\n            return counter.compare_exchange_strong(e, is_zero);\\n        }\\n        return false;\\n    }\\n\\n    std::atomic<uint64_t> counter{1};\\n}\\n```\\n\\n\uc5ec\uae30\uae4c\uc9c0\ub9cc \ubcf4\uba74 \uaf64 \uc88b\uc740 \uc544\uc774\ub514\uc5b4 \uac19\uc544 \ubcf4\uc778\ub2e4. \uadf8\ub7ec\ub098 \uc774 \uad6c\ud604\uc740 **\ubb38\uc81c\uc810\uc774 \uc788\ub2e4**.\\n\\n`decrement()` \uad6c\ud604\uc758 \uc77c\ubd80\ubd84\uc744 \ubcf4\uc790.\\n\\n```cpp\\nif (counter.fetch_sub(1) == 1) {    // counter\uac00 1\uc5d0\uc11c 0\uc73c\ub85c \ubcc0\ud568\\n    uint64_t e = 0;\\n    return counter.compare_exchange_strong(e, is_zero); // \uc774 compare_exchange\uac00 \uc2e4\ud328\ud558\uba74??\\n}\\n```\\n\\n\uc774 \ubd80\ubd84\uc5d0\uc11c,\\n\\n1. `decrement()` \uc5f0\uc0b0\uc774 \uc2e4\uc81c\ub85c `counter`\ub97c 0\uc73c\ub85c \ub9cc\ub4e6\\n2. `increment()`\uac00 \uadf8 \uc0ac\uc774\uc5d0 \ubc1c\uc0dd\\n3. `decrement()`\uc5f0\uc0b0\uc774 \ub9c8\uce58 `increment()` \uc774\ud6c4\uc5d0 \ubc1c\uc0dd\ud55c \uac83\ucc98\ub7fc \ucc98\ub9ac\\n\\n\uadf8\ub7ec\ub098 \uc774 \ud2b9\uc9d5\uc740 **read\uac00 \uc5c6\ub2e4\uba74** \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4.\\n\\n`decrement()` \ubaa9\uc801\uc740 \uacb0\uad6d \\n\\n- `counter`\uac00 `0`\uc774 \ub418\ub294 \uc21c\uac04\uc744 \ud3ec\ucc29\\n- \uadf8 \uc21c\uac04\uc744 \ub2e4\ub978 \uc2a4\ub808\ub4dc\ub4e4\uc5d0\uac8c \uc601\uad6c\uc801\uc73c\ub85c \uc54c\ub9ac\ub294 \uac83\\n\\n\uc778\ub370, \ub9cc\uc57d CAS\uac00 \uc2e4\ud328\ud55c\ub2e4\uba74\\n\\n- \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc774\ubbf8 `counter`\ub97c \uc99d\uac00\uc2dc\ucf30\ub2e4\ub294 \uc758\ubbf8\\n- \uc989 \uc6b0\ub9ac\uac00 \uad00\ucc30\ud55c \\"0\uc774 \ub418\ub294 \uc21c\uac04\\"\uc740 \uc2e4\uc81c\ub85c \uc758\ubbf8\uc788\ub294 \uc21c\uac04\uc774 \uc544\ub2c8\uc5c8\uc74c\\n- `counter`\ub294 \uc9c4\uc9dc\ub85c \\"\uba48\ucd98\\" \uc801\uc774 \uc5c6\uc5c8\ub358 \uac83\\n\\n\ub530\ub77c\uc11c \uc774\ub294 \uc6b0\ub9ac\uac00 \uad6c\ud604\ud55c \uce74\uc6b4\ud130\uc758 \uc758\ubbf8\uc640 \ubd80\ud569\ud55c\ub2e4.\\n\\n\uadf8\ub807\ub2e4\uba74 read\uac00 \uc788\ub2e4\uba74 \uc5b4\ub5a4 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\ub294\uac00?\\n\\n### Adding a read operation. How hard can it be?\\n\\n`read()` \ub97c \ucd94\uac00\ud55c\ub2e4.\\n\\n```cpp\\nuint64_t read() {\\n    auto val = counter.load();\\n    return (val & is_zero) ? 0 : val;\\n}\\n```\\n\\n`val` \uc744 \ubd88\ub7ec\uc624\uace0, `is_zero` flag\uac00 \ucf1c\uc838\uc788\uc73c\uba74 `0`, \uc544\ub2c8\uba74 `val`\uc744 \ubc18\ud658\ud55c\ub2e4.\\n\\n\ub2e4\uc74c\uacfc \uac19\uc740 \uc2dc\ub098\ub9ac\uc624\ub97c \uc0dd\uac01\ud574\ubcf4\uc790.\\n\\n1. `read()`\ub294 `counter`\uac00 `0`\uc774\ub77c\uace0 \ud310\ub2e8\ud588\uc9c0\ub9cc\\n2. \uc2e4\uc81c\ub85c\ub294 `decrement()`\uac00 `false`\ub97c \ubc18\ud658(CAS \uc2e4\ud328)\\n3. `increment()`\ub294 \uc131\uacf5\\n4. \uacb0\uacfc\uc801\uc73c\ub85c `counter`\ub294 `1`\uc774\uc5b4\uc57c \ud558\ub294\ub370 `read()`\ub294 `0`\uc744 \ubc18\ud658\\n\\n\uc989 `read()` \uc5f0\uc0b0\uc774 **\uad00\ucc30\ud55c \uc0c1\ud0dc\uc640 \uc2e4\uc81c \uc5f0\uc0b0\uc758 \uacb0\uacfc\uac00 \ubd88\uc77c\uce58**\ud558\ub294 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud55c\ub2e4.\\n\\n\ub530\ub77c\uc11c **`val` \uc774 `0` \uc77c \ub54c** \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \ucf54\ub4dc\ub97c \uc218\uc815\ud574\uc57c \ud55c\ub2e4.\\n\\n```cpp\\nuint64_t read() {\\n    auto val = counter.load();\\n    if (val == 0 then what?\\n}\\n```\\n\\n\uc774\ub54c \ud574\uc57c \ud558\ub294 \uac8c **helping**\uc774\ub2e4!\\n\\n```cpp\\nuint64_t read() {\\n    auto val = counter.load();\\n    if (val == 0 && counter.compare_exchange_strong(val, is_zero)) return 0; // helping!\\n    return (val & is_zero) ? 0 : val;\\n}\\n```\\n\\n\ub2e4\uc74c\uacfc \uac19\uc774 \uc77d\uc5b4\ub4e4\uc778 \uac12\uc774 `0`\uc774\ub77c\uba74, `is_zero` flag \uc124\uc815\uc744 `read()` \uac00 **\ub3c4\uc640\uc900\ub2e4**.\\n\\n\uadf8\ub7ec\ub098 \uc774 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 **\ubb38\uc81c\uc810\uc744 \ucd08\ub798**\ud55c\ub2e4.\\n\\n- `read()`\uac00 `is_zero` flag\ub97c \uc124\uc815\ud558\uba74, \uc5b4\ub5a4 `decrement()`\ub3c4 `true`\ub97c \ubc18\ud658\ud558\uc9c0 \uc54a\uc74c!\\n\\n:::note\\n\\n\ub9cc\uc57d \ub808\ud37c\ub7f0\uc2a4 \uce74\uc6b4\ud130\ub85c \uc774\ub7f0 \ubc29\uc2dd\uc744 \ucde8\ud55c\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \ubb38\uc81c\uc810\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.\\n\ub808\ud37c\ub7f0\uc2a4 \uce74\uc6b4\ud130\ub294 **\ucc38\uc870 \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \ubc18\ub4dc\uc2dc \uac1d\uccb4\uac00 \uc0ad\uc81c**\ub3fc\uc57c \ud55c\ub2e4.\\n\\n\uadf8\ub7ec\ub098 \uc774\ub7f0 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uba74, `true`\ub97c \ubc18\ud658\ud55c `decrement()` \uac00 \uc5c6\ub294\ub370\ub3c4 \uce74\uc6b4\ud2b8\uac00 `0` \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c, \ub204\uad6c\ub3c4 \uc0ad\uc81c \ucc45\uc784\uc744 \uc9c0\uc9c0 \uc54a\uc544 **\uba54\ubaa8\ub9ac\uac00 \ub204\uc218**\ub420 \uc218 \uc788\ub2e4.\\n\\n:::\\n\\n\uc774\ub7f0 \ubb38\uc81c\uc758 \ud574\uacb0\uc744 \uc704\ud574\uc11c, \ucd94\uac00\uc801\uc778 flag\uac00 \ud544\uc694\ud558\ub2e4.\\n\\n### Almost there\\n\\n\ub2e4\uc74c\uacfc \uac19\uc740 helped flag\ub97c \ucd94\uac00\ud55c\ub2e4.\\n\\n```cpp\\nstatic constexpt uint64_t helped = 1ull << 62;\\n```\\n\\n`read()`\uac00 `is_zero` flag\ub97c \uc124\uc815\ud560 \ub54c, \uc774 `helped` flag\ub97c \uc124\uc815\ud55c\ub2e4.\\n\\n\uadf8\ub9ac\uace0 `decrement()` \ub97c \uc218\uc815\ud55c\ub2e4.\\n\\n```cpp\\nbool decrement() {\\n    if (counter.fetch_sub(1) == 1) {\\n        uint64_t e = 0;\\n        if (counter.compare_exchange_strong(e, is_zero)) return true;\\n        else if ((e & helped) && (counter.exchange(is_zero) & helped)) return true;\\n    }\\n    return false;\\n}\\n```\\n\\n\ud575\uc2ec\uc801\uc778 \ubd80\ubd84\uc740 `e & helped) && (counter.exchange(is_zero) & helped` \uc774 \ubd80\ubd84\uc774\ub2e4.\\n\\n1. `(e & helped)`\\n    - `helped` flag\uac00 \uc124\uc815\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\\n    - \uc989, `read()` \uc5f0\uc0b0\uc774 \ub3c4\uc640\uc8fc\uc5c8\ub294\uc9c0 \ud655\uc778\\n2. `exchange(is_zero)` \\n    - \ud604\uc7ac \uac12\uc744 is_zero\ub85c \uad50\uccb4\ud558\uace0 \uc774\uc804 \uac12\uc744 \ubc18\ud658\\n    - `helped` flag\ub294 \uc81c\uac70\ub428 (`is_zero`\ub9cc \uc124\uc815)\\n3. `(exchange(is_zero) & helped)`\\n    - `exchange`\uac00 \ubc18\ud658\ud55c \uc774\uc804 \uac12\uc5d0 helped flag\uac00 \uc788\ub294\uc9c0 \ud655\uc778\\n    - `exchange`\ub294 atomic\ud558\ubbc0\ub85c \uc815\ud655\ud788 \ud558\ub098\uc758 `decrement`\ub9cc `helped` flag\ub97c \ubcfc \uc218 \uc788\uc74c\\n    - \ub2e4\ub978 `decrement`\ub4e4\uc740 \uc774\ubbf8 `helped` flag\uac00 \uc81c\uac70\ub41c \uac12\uc744 \ubcf4\uac8c \ub428\\n\\n\ub530\ub77c\uc11c \uc774 \ucf54\ub4dc\ub294,\\n\\n- `read`\uac00 \ub3c4\uc640\uc8fc\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uace0\\n- atomic\ud558\uac8c `helped` flag\ub97c \uc81c\uac70\ud558\uba74\uc11c\\n- \uc815\ud655\ud788 \ud558\ub098\uc758 `decrement`\ub9cc true\ub97c \ubc18\ud658\ud558\ub3c4\ub85d \ubcf4\uc7a5\\n\\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c `read()` \ub97c \uc218\uc815\ud55c\ub2e4.\\n\\n```cpp\\nuint64_t read() {\\n    auto val = counter.load();\\n    if (val == 0 && counter.compare_exchange_strong(val, is_zero | helped)) return 0; // helping!\\n    return (val & is_zero) ? 0 : val; \\n}\\n```\\n\\n\uae30\uc874\uc758 \ucf54\ub4dc\uc5d0, `counter`\ub97c `is_zero` flag\ub97c \uc124\uc815\ud558\ub294\ub370 **\ub3c4\uc640\uc8fc\uc5c8\ub2e4\uba74** `helped` flag\ub3c4 \ucd94\uac00\uc801\uc73c\ub85c \uc124\uc815\ud558\ub294 \ubd80\ubd84\uc744 \ucd94\uac00\ud588\ub2e4.\\n\\n\uc804\uccb4 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n```cpp\\nstruct Counter {\\n    static constexpr uint64_t is_zero = 1ull << 63;\\n\\n    static constexpt uint64_t helped = 1ull << 62;\\n\\n    bool increment_if_not_zero() {\\n        return (counter.fetch_add(1) & is_zero) == 0; }\\n        bool decrement() {\\n        if (counter.fetch_sub(1) == 1) {\\n            uint64_t e = 0;\\n            if (counter.compare_exchange_strong(e, is_zero)) return true;\\n            else if ((e & helped) && (counter.exchange(is_zero) & helped)) return true;\\n        }\\n        return false;\\n    }\\n    \\n    uint64_t read() {\\n        auto val = counter.load();\\n        if (val == 0 && counter.compare_exchange_strong(val, is_zero | helped)) \\n            return 0; // helping!\\n        return (val & is_zero) ? 0 : val; \\n    }\\n    \\n    std::atomic<uint64_t> counter{1};\\n}\\n```\\n\\nwait-free \uc54c\uace0\ub9ac\uc998\uc744 \uc644\uc131\ud588\ub2e4. \uae30\uc874\uc758 \ubc29\ubc95\uacfc \ub098\uc544\uc84c\uc744\uae4c?\\n\\n\uc55e\uc11c \ub9d0\ud588\ub4ef\uc774, \uc131\ub2a5\uc5d0 \ub300\ud574 \ucd94\uce21\ud558\uc9c0 \ub9d0\uace0, \uc131\ub2a5\uc744 \uce21\uc815\ud574\uc57c \ud55c\ub2e4.\\n\\n## \ubca4\uce58\ub9c8\ud06c\\n\\nDaniel Anderson \uad50\uc218\uac00  `atomic<shared_ptr>` \uad6c\ud604\uc5d0\uc11c wait-free counter\uc640 lock-free counter\ub97c \ube44\uad50\ud588\ub2e4.\\n\\n\uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n\\n**p\uac1c\uc758 \uc2a4\ub808\ub4dc\uac00 `atomic<shared_ptr>`\uc5d0\uc11c load\ud558\ub294 \uacbd\uc6b0**\\n\\n![image.png](image%203.png)\\n\\n**p\uac1c\uc758 \uc2a4\ub808\ub4dc, 50%\ub294 load, \ub098\uba38\uc9c0 50%\ub294 store**\\n\\n![image.png](image%204.png)\\n\\n**p\uac1c\uc758 \uc2a4\ub808\ub4dc, 10%\ub294 load, \ub098\uba38\uc9c0 90%\ub294 store**\\n\\n![image.png](image%205.png)\\n\\n\ube44\ub85d \uac04\ub2e8\ud55c \ubca4\uce58\ub9c8\ud06c\uc774\uc9c0\ub9cc, \ub2e4\uc74c\uacfc \uac19\uc740 \uacb0\ub860\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4.\\n\\n- \uc5b4\ub5a4 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\uc120\uc778\uc9c0\ub294 \uc885\uc885 \uc6cc\ud06c\ub85c\ub4dc\uc5d0 \ub2ec\ub824\uc788\uc74c\\n- \uc5bc\ub9c8\ub098 \ub9ce\uc740 read vs write\uac00 \uc788\ub294\uc9c0\\n- \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc2a4\ub808\ub4dc/\ucf54\uc5b4\uac00 \uc788\ub294\uc9c0\\n- Wait-free\ub294 read-mostly \uc6cc\ud06c\ub85c\ub4dc\uc5d0\uc11c \ub354 \ub098\uc558\uc9c0\ub9cc, lock-free\ub294 write-mostly\uc5d0\uc11c \ub354 \ub098\uc544 \ubcf4\uc784\\n\\n## \ud575\uc2ec \uba54\uc2dc\uc9c0\\n\\n\uc131\ub2a5 \uad00\ub828\\n\\n- \uc808\ub300 \uc131\ub2a5\uc5d0 \ub300\ud574 \ucd94\uce21\ud558\uc9c0 \ub9d0 \uac83\\n- \ud558\uc9c0\ub9cc \uc54c\uace0\ub9ac\uc998\uc758 progress guarantees\ub97c \ubd84\uc11d\ud558\uc5ec \uc131\ub2a5\uc744 \uac00\uc124\ud654\ud558\uace0, \uc774\ub7ec\ud55c progress guarantees\ub97c \uc54c\uace0\ub9ac\uc998 \uc124\uacc4\uc758 \uc9c0\uce68\uc73c\ub85c \uc0ac\uc6a9\ud560 \uac83\\n- \uadf8\ub9ac\uace0 \ub098\uc11c \ubca4\uce58\ub9c8\ud06c\ub97c \uc218\ud589\ud560 \uac83\\n\\nProgress guarantees (\uc9c4\ud589 \ubcf4\uc7a5)\\n\\n- \ub3d9\uc2dc\uc131 \uc54c\uace0\ub9ac\uc998\uc744 \ubd84\ub958\ud558\ub294 \uc720\uc6a9\ud55c \uc774\ub860\uc801 \uae30\uc900\uc774\uba70 \uc54c\uace0\ub9ac\uc998 \uc124\uacc4\uc5d0 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uc74c\\n- Lock-free \uc54c\uace0\ub9ac\uc998\uc740 \ud55c \uc2a4\ub808\ub4dc\uac00 \uc9c4\ud589\ud568\uc744 \ubcf4\uc7a5\ud558\ub294 \ubc18\uba74, Wait-free \uc54c\uace0\ub9ac\uc998\uc740 \ubaa8\ub4e0 \uc2a4\ub808\ub4dc\uc758 \uc9c4\ud589\uc744 \ubcf4\uc7a5\ud568\\n\\nWait-free \uc54c\uace0\ub9ac\uc998 \uc124\uacc4\\n\\n- \ud575\uc2ec \uae30\ubc95\uc740 helping - \uc5f0\uc0b0\ub4e4\uc774 \uc11c\ub85c \ub300\uae30\ud558\uac70\ub098(blocking) \uacbd\uc7c1\ud558\ub294(lock-free) \ub300\uc2e0 \ub3d9\uc2dc \uc2e4\ud589\ub418\ub294 \uc5f0\uc0b0\uc744 \ub3c4\uc640\uc90c\\n\\n---\\n\\n## \ucd94\uac00\\n\\n\uc624\ud0c0\ub098 \uc798\ubabb\ub41c \uc815\ubcf4\uac00 \uc77c\ubd80 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\uc815 \uc0ac\ud56d\uc774 \uc788\uc73c\uba74 \ub313\uae00\ub85c \ub0a8\uaca8\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4."},{"id":"monads-and-more","metadata":{"permalink":"/blog/monads-and-more","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2025-09-01-hs-ch12/index.md","source":"@site/blog/2025-09-01-hs-ch12/index.md","title":"Monads and more","description":"banner","date":"2025-09-01T00:00:00.000Z","tags":[{"inline":false,"label":"Haskell","permalink":"/blog/tags/haskell","description":"Haskell tag description"},{"inline":false,"label":"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d","permalink":"/blog/tags/functional-programming","description":"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ub7ec\ub2e4\uc784\uc5d0 \ub300\ud55c \uae00"}],"readingTime":27.02,"hasTruncateMarker":true,"authors":[{"name":"dream2405","title":"\uac8c\uc73c\ub978 \ub300\ud559\uc0dd","socials":{"github":"https://github.com/dream2405"},"imageURL":"https://github.com/dream2405.png","key":"dream2405","page":null}],"frontMatter":{"slug":"monads-and-more","title":"Monads and more","authors":["dream2405"],"tags":["haskell","functional_programming"],"image":"./image.png"},"unlisted":false,"prevItem":{"title":"An Introduction to wait-free algorithms","permalink":"/blog/intro-wait-free-algorithms"}},"content":"![banner](./image.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n\ud558\uc2a4\ucf08\uc5d0\uc11c\ub294 parameterised type\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud560 \uc218 \uc788\ub294 \uc5ec\ub7ec \ubc29\ubc95\ub4e4\uc774 \uc788\ub2e4.\\n\\n## Functors\\n\ub2e4\uc74c\uacfc \uac19\uc740 \uac04\ub2e8\ud55c \ud568\uc218\ub4e4\uc744 \ubcf4\uc790.\\n```haskell\\ninc :: [Int] -> [Int]\\ninc []      = []\\ninc (n:ns)  = n+1 : inc ns\\n\\nsqr :: [Int] -> [Int]\\nsqr []      = []\\nsqr (n:ns)  = n^2 : sqr ns\\n```\\n\uc774 \ub450 \ud568\uc218\uc758 \ucc28\uc774\ub294 \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ub418\ub294 \ud568\uc218 \ubfd0\uc774\ub2e4.  \\n\uc774\ub7ec\ud55c \ud328\ud134\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218 `map`\uc73c\ub85c \uac04\ub2e8\ud788 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n\\n\uc6b0\uc120 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218 `map`\uc744 \uc0b4\ud3b4\ubcf4\uc790.\\n```haskell\\nmap :: (a -> b) -> [a] -> [b]\\nmap f []        = []\\nmap f (x:xs)    = f x : map f xs\\n```\\n\uc704\uc758 \ub450\uac1c\uc758 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud558\uac8c \uc815\uc758\ub41c\ub2e4.\\n```haskell\\ninc = map (+1)\\nsqr = map (^2)\\n```\\n\uc774 \uc608\uc2dc\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774, `map`\uc740 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c\uc758 \uac01 \uc6d0\uc18c\uc5d0 \ub300\ud55c \ud568\uc218\ub97c \ub9e4\ud551 \ud55c\ub2e4.  \\n\uadf8\ub807\ub2e4\uba74, \ub9ac\uc2a4\ud2b8 \ubfd0\ub9cc\uc774 \uc544\ub2cc \ub2e4\ub978 \uc790\ub8cc\uad6c\uc870, \ub354 \ub098\uc544\uac00 \uc5ec\ub7ec parameterised type\ub4e4\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc77c\ubc18\ud654\ud560 \uc218 \uc788\uc9c0 \uc54a\uc744\uae4c?\\n\\n\uc774\ub7ec\ud55c \ub9e4\ud551 \ud568\uc218\ub97c \uc9c0\uc6d0\ud558\ub294 \ud0c0\uc785\uc758 \ud074\ub798\uc2a4\ub97c **Functor**\ub77c\uace0 \ud55c\ub2e4.\\n```haskell\\nclass Functor f where\\n    fmap :: (a -> b) -> f a  -> f b\\n```\\nparameterised type `f`\uac00 `Functor` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \ub418\ub824\uba74, \uba85\uc2dc\ub41c \ud0c0\uc785\uc758 `fmap` \ud568\uc218\ub97c \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4.  \\n`fmap`\uc740 `a -> b` \ud0c0\uc785\uc758 \ud568\uc218\uc640, \uc6d0\uc18c\uc758 \ud0c0\uc785\uc774 `a`\uc778 `f a` \uad6c\uc870\ub97c \ubc1b\uc544\uc11c, \uadf8 \ud568\uc218\ub97c \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ud55c \uacb0\uacfc\ub85c \uc6d0\uc18c\uc758 \ud0c0\uc785\uc774 `b`\uac00 \ub41c `f b` \uad6c\uc870\ub97c \uc0dd\uc131\ud55c\ub2e4.\\n\\n### \uc608\uc2dc\\n\ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc740 `fmap`\uc744 `map` \ud568\uc218\ub85c \uac04\ub2e8\ud788 \uc815\uc758\ud568\uc73c\ub85c\uc368 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n\\n```haskell\\ninstance Functor [] where\\n    -- fmap :: (a -> b) -> [a] -> [b]\\n    fmap = map\\n```\\n\uc774 \uc120\uc5b8\uc5d0\uc11c `[]` \uae30\ud638\ub294 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc5c6\ub294 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc774\ub294 `[a]` \ud0c0\uc785\uc774 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785 `[]`\uc744 \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 `a`\uc5d0 \uc801\uc6a9\ud55c `[] a`\ub77c\ub294 \ub354 \uc6d0\uc2dc\uc801\uc778 \ud615\ud0dc\ub85c\ub3c4 \uc4f0\uc77c \uc218 \uc788\ub2e4\ub294 \uc0ac\uc2e4\uc5d0 \uadfc\uac70\ud55c\ub2e4.\\n\\n\ub610\ud55c, \uc704 \ucf54\ub4dc\uc5d0\uc11c `fmap`\uc758 \ud0c0\uc785\uc774 \uba85\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ub418\uc9c0 \uc54a\uace0 \uc8fc\uc11d\uc73c\ub85c \uc791\uc131\ub41c \uc810\uc5d0 \uc8fc\ubaa9\ud574\uc57c \ud55c\ub2e4. \uc774\ub294 \ud558\uc2a4\ucf08\uc774 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc5d0 \uc774\ub7ec\ud55c \ud0c0\uc785 \uc815\ubcf4\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc774\ub2e4. \ud558\uc9c0\ub9cc `fmap`\uc758 \uc815\uc758\ub97c \ub4dc\ub7ec\ub0b4\uace0 \ubb38\uc11c\ud654\ub97c \uc704\ud574, \ud0c0\uc785\uc744 \uc8fc\uc11d\uc73c\ub85c \ud3ec\ud568\ud588\ub2e4.\\n\\n\\\\\\n\ub450 \ubc88\uc9f8 \uc608\uc2dc\ub85c, \uc2e4\ud328\ud558\uac70\ub098 \uc131\uacf5\ud560 \uc218 \uc788\ub294 `a` \ud0c0\uc785\uc758 \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ub0b4\uc7a5 \ud0c0\uc785 `Maybe a`\ub97c \ub5a0\uc62c\ub824 \ubcf4\uc790.\\n\\n```haskell\\ndata Maybe a = Nothing | Just a\\n```\\n\ub2e4\uc74c\uacfc \uac19\uc774 \uc801\uc808\ud55c \ud0c0\uc785\uc758 `fmap` \ud568\uc218\ub97c \uc815\uc758\ud558\uba74 \uac04\ub2e8\ud788 `Maybe` \ud0c0\uc785\uc744 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.  \\n(\ud391\ud130\ub97c \ub098\ud0c0\ub0b4\ub294 `f`\uc640\uc758 \ud63c\ub3d9\uc744 \ud53c\ud558\uace0\uc790 \uc778\uc790\ub85c \ubc1b\ub294 \ud568\uc218\ub97c `g`\ub77c\uace0 \ubd80\ub984)\\n```haskell\\ninstance Functor Maybe where\\n    -- fmap :: (a -> b) -> Maybe a -> Maybe b\\n    fmap _ Nothing = Nothing\\n    fmap g (Just x) = Just (g x)\\n```\\n\uc989, \uc2e4\ud328\ud55c \uac12(`Nothing`)\uc5d0 \ud568\uc218\ub97c \ub9e4\ud551\ud558\uba74 \uc2e4\ud328\uac00 \uadf8\ub300\ub85c \uc804\ud30c\ub418\ub294 \uacb0\uacfc\uac00 \ub098\uc624\uace0, \uc131\uacf5\ud55c \uac12(`Just`)\uc758 \uacbd\uc6b0\uc5d0\ub294 \ub0b4\ubd80 \uac12\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud55c \ud6c4 \ub2e4\uc2dc \ud0dc\uadf8\ub97c \ubd99\uc778\ub2e4. \\n\\n\uc0ac\uc6a9 \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> fmap (+1) Nothing\\nNothing\\n\\n> fmap (*2) (Just 3)\\nJust 6\\n\\n> fmap not (Just False)\\nJust True\\n```\\n\\n\\\\\\n\uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785 \ub610\ud55c \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, leaf\uc5d0 \ub370\uc774\ud130\ub97c \uac16\ub294 \uc774\uc9c4 \ud2b8\ub9ac \ud0c0\uc785\uc744 \uc120\uc5b8\ud55c\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790.\\n```haskell\\ndata Tree a = Leaf a | Node (Tree a) (Tree a)\\n    deriving Show\\n```\\n`deriving Show` \uad6c\ubb38\uc740 \ud2b8\ub9ac\uac00 \ud654\uba74\uc5d0 \ud45c\uc2dc\ub420 \uc218 \uc788\ub3c4\ub85d \ubcf4\uc7a5\ud55c\ub2e4. \uadf8 \ud6c4, \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785 `Tree`\ub294 \uc8fc\uc5b4\uc9c4 \ud568\uc218\ub97c \ud2b8\ub9ac\uc758 \uac01 \uc78e \uac12\uc5d0 \uc801\uc6a9\ud558\ub294 `fmap` \ud568\uc218\ub97c \uc815\uc758\ud568\uc73c\ub85c\uc368 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Functor Tree where\\n    -- fmap :: (a -> b) -> Tree a -> Tree b\\n    fmap g (Leaf x) = Leaf (g x)\\n    fmap g (Node l r) = Node (fmap g l) (fmap g r)\\n```\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> fmap length (Leaf \\"abc\\")\\nLeaf 3\\n\\n> fmap even (Node (Leaf 1) (Leaf 2))\\nNode (Leaf False) (Leaf True)\\n```\\n\ud558\uc2a4\ucf08\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ub9ce\uc740 \ud391\ud130 `f`\ub294 \uc704 \uc138 \uc608\uc2dc\uc640 \uc720\uc0ac\ud558\ub2e4. \uc989, `f a`\uac00 `a` \ud0c0\uc785\uc758 \uc6d0\uc18c\ub97c \ud3ec\ud568\ud558\ub294 \uc790\ub8cc \uad6c\uc870\ub77c\ub294 \uc758\ubbf8\uc5d0\uc11c \ub54c\ub85c **\ucee8\ud14c\uc774\ub108 \ud0c0\uc785(container type)** \uc774\ub77c \ubd88\ub9ac\uba70, `fmap`\uc740 \uc8fc\uc5b4\uc9c4 \ud568\uc218\ub97c \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ud55c\ub2e4.\\n\\n\ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uac00 \uc774 \ud328\ud134\uc5d0 \ub4e4\uc5b4\ub9de\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `IO` \ud0c0\uc785\uc740 \uc77c\ubc18\uc801\uc778 \uc758\ubbf8\uc758 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785\uc774 \uc544\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uadf8 \uac12\uc740 \uc6b0\ub9ac\uac00 \ub0b4\ubd80 \uad6c\uc870\uc5d0 \uc811\uadfc\ud560 \uc218 \uc5c6\ub294 \uc785\ucd9c\ub825 \uc561\uc158(action)\uc744 \ub098\ud0c0\ub0b4\uae30 \ub54c\ubb38\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub294 \uc27d\uac8c \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Functor IO where\\n    -- fmap :: (a -> b) -> IO a -> IO b\\n    fmap g mx = do {x <- mx; return (g x)}\\n```\\n\uc774 \uacbd\uc6b0, `fmap`\uc740 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 \uc561\uc158\uc758 \uacb0\uacfc \uac12\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud558\uba70, \uc774\ub97c \ud1b5\ud574 \uadf8\ub7ec\ud55c \uac12\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294 \uc218\ub2e8\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> fmap show (return True)\\n\\"True\\"\\n```\\n\\n\\\\\\n\ud391\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \ud575\uc2ec\uc801\uc778 \uc774\uc810 \ub450 \uac00\uc9c0\\n1. `fmap` \ud568\uc218\ub294 \ud391\ud130\uc758 \uc131\uc9c8\uc744 \ub9cc\uc871\ud558\ub294(functorial) \uc5b4\ub5a4 \uad6c\uc870\uc758 \uc6d0\uc18c\ub4e0 \ucc98\ub9ac\ud558\ub294 \ub370 \uc0ac\uc6a9\ub428  \\n\uc989, \uac01 \uc778\uc2a4\ud134\uc2a4\ub9c8\ub2e4 \ubcc4\uac1c\uc758 \ud568\uc218 \uc774\ub984\uc744 \ub9cc\ub4e4\uc5b4\ub0bc \ud544\uc694 \uc5c6\uc774, \ubcf8\uc9c8\uc801\uc73c\ub85c \ub3d9\uc77c\ud55c \uc5ed\ud560\uc744 \ud558\ub294 \ud568\uc218\ub4e4\uc5d0 \ub300\ud574 \uac19\uc740 \uc774\ub984\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.\\n2. \uc5b4\ub5a4 \ud391\ud130\uc5d0\ub098 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc77c\ubc18\ud654\ub41c(generic) \ud568\uc218\ub97c \uc815\uc758  \\n\uc608\ub97c \ub4e4\uc5b4, \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc815\uc218\ub97c 1\uc529 \uc99d\uac00\uc2dc\ud0a4\ub358 \uc774\uc804\uc758 \ud568\uc218\ub294 `map` \ub300\uc2e0 `fmap`\uc744 \uc0ac\uc6a9\ud558\uae30\ub9cc \ud558\uba74 \uc5b4\ub5a4 \ud391\ud130 \ud0c0\uc785\uc5d0\ub3c4 \uc801\uc6a9\ub418\ub3c4\ub85d \uc77c\ubc18\ud654\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\ninc :: Functor f => f Int -> f Int\\ninc = fmap (+1)\\n```\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4\\n```haskell\\n> inc (Just 1)\\nJust 2\\n\\n> inc [1,2,3,4,5]\\n[2,3,4,5,6]\\n\\n> inc (Node (Leaf 1) (Leaf 2))\\nNode (Leaf 2) (Leaf 3)\\n```\\n\\n### Functor laws\\n\uba85\uc2dc\ub41c \ud0c0\uc785\uc758 `fmap` \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0\ub3c4, \ud391\ud130\ub294 \ub450 \uac00\uc9c0 \ub4f1\uc2dd \ubc95\uce59\uc744 \ub9cc\uc871\ud574\uc57c \ud55c\ub2e4.\\n- `fmap id` = `id`\\n- `fmap (g . h)` = `fmap g . fmap h`\\n\\n\uccab \ubc88\uc9f8 \ub4f1\uc2dd\uc740 `fmap`\uc774 **\ud56d\ub4f1 \ud568\uc218(identity function)\ub97c \ubcf4\uc874**\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.  \\n\uc989, `fmap`\uc744 \ud56d\ub4f1 \ud568\uc218\uc5d0 \uc801\uc6a9\ud558\uba74 \uacb0\uacfc\ub85c \uac19\uc740 \ud56d\ub4f1 \ud568\uc218\ub97c \ubc18\ud658\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ub4f1\uc2dd\uc5d0\uc11c `id`\ub294 \ub450 \ubc88 \ub098\ud0c0\ub098\uc9c0\ub9cc \uc11c\ub85c \ud0c0\uc785\uc774 \ub2e4\ub974\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud574\uc57c \ud55c\ub2e4. \uc88c\ubcc0\uc758 `id`\ub294 `a -> a` \ud0c0\uc785\uc744 \uac00\uc9c0\ubbc0\ub85c `fmap id`\uc758 \ud0c0\uc785\uc740 `f a -> f a`\uac00 \ub41c\ub2e4. \ub530\ub77c\uc11c \ub4f1\uc2dd\uc774 \uc131\ub9bd\ud558\ub824\uba74 \uc6b0\ubcc0\uc758 `id` \ub610\ud55c `f a -> f a` \ud0c0\uc785\uc744 \uac00\uc838\uc57c\ub9cc \ud55c\ub2e4.\\n\\n\ub450 \ubc88\uc9f8 \ub4f1\uc2dd\uc740 `fmap`\uc774 **\ud568\uc218 \ud569\uc131\uc744 \ubcf4\uc874**\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.  \\n\uc989, \ub450 \ud568\uc218\uc758 \ud569\uc131\uc5d0 `fmap`\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc740, \ub450 \ud568\uc218 \uac01\uac01\uc5d0 `fmap`\uc744 \uc801\uc6a9\ud55c \ub4a4 \uadf8 \uacb0\uacfc\ub97c \ud569\uc131\ud558\ub294 \uac83\uacfc \uacb0\uacfc\uac00 \uac19\ub2e4. \uc774 \ud569\uc131\uc774 \ud0c0\uc785 \uac80\uc0ac\ub97c \ud1b5\uacfc\ud558\ub824\uba74, \uad6c\uc131 \uc694\uc18c\uc778 \ud568\uc218 `g`\uc640 `h`\ub294 \uac01\uac01 `b -> c`\uc640 `a -> b` \ud0c0\uc785\uc744 \uac00\uc838\uc57c \ud55c\ub2e4.\\n\\n`fmap`\uc758 \ub2e4\ud615\uc801 \ud0c0\uc785\uacfc \uacb0\ud569\ub41c \uc774 \ud391\ud130 \ubc95\uce59\ub4e4\uc740 `fmap`\uc774 \uc2e4\uc81c\ub85c \ub9e4\ud551(mapping) \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub3c4\ub85d \ubcf4\uc7a5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub9ac\uc2a4\ud2b8\uc758 \uacbd\uc6b0 \uc774 \ubc95\uce59\ub4e4\uc740 \uc6d0\uc18c\uac00 \ucd94\uac00\ub418\uac70\ub098, \uc81c\uac70\ub418\uac70\ub098, \uc7ac\ubc30\uc5f4\ub418\uc9c0 \uc54a\uace0 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\uc758 \uad6c\uc870\uac00 \ubcf4\uc874\ub428\uc744 \ubcf4\uc7a5\ud55c\ub2e4. \\n\\n\ub9cc\uc57d \ub0b4\uc7a5 \ub9ac\uc2a4\ud2b8 \ud391\ud130\ub97c \ub9ac\uc2a4\ud2b8 \uc6d0\uc18c\uc758 \uc21c\uc11c\ub97c \ub4a4\uc9d1\ub294 `fmap`\uc758 \ub300\uccb4 \ubc84\uc804\uc73c\ub85c \uad50\uccb4\ud588\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790.\\n```haskell\\ninstance Functor [] where\\n    -- fmap :: (a -> b) -> f a -> f b\\n    fmap g []     = []\\n    fmap g (x:xs) = fmap g xs ++ [g x]\\n```\\n(\ub9cc\uc57d \uc774 \uc608\uc81c\ub97c GHCi\uc5d0\uc11c \uc2e4\ud589\ud574\ubcf4\uace0 \uc2f6\ub2e4\uba74, \ub0b4\uc7a5 \ub9ac\uc2a4\ud2b8 \ud391\ud130\uc640\uc758 \ucda9\ub3cc\uc744 \ud53c\ud558\uae30 \uc704\ud574 \uc704 \uc120\uc5b8\uc744 \uc218\uc815\ud558\uc5ec \uc790\uc2e0\ub9cc\uc758 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc744 \uba3c\uc800 \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4.) \uc774 \uc120\uc5b8\uc740 \ud0c0\uc785\uc740 \uc62c\ubc14\ub974\uc9c0\ub9cc, \ub2e4\uc74c \uc608\uc81c\uc5d0\uc11c \ubcf4\ub4ef\uc774 \ud391\ud130 \ubc95\uce59\uc744 \ub9cc\uc871\ud558\uc9c0 \ubabb\ud55c\ub2e4.\\n```haskell\\n> fmap id [1,2]\\n[2,1]\\n\\n> id [1,2]\\n[1,2]\\n\\n> fmap (not . even) [1,2]\\n[False,True]\\n\\n> (fmap not . fmap even) [1,2]\\n[True,False]\\n```\\n\uc6b0\ub9ac\uac00 \uc608\uc81c \uc139\uc158\uc5d0\uc11c \uc815\uc758\ud588\ub358 \ubaa8\ub4e0 \ud391\ud130\ub4e4\uc740 \ud391\ud130 \ubc95\uce59\uc744 \ub9cc\uc871\ud55c\ub2e4. \uc0ac\uc2e4, \ud558\uc2a4\ucf08\uc758 \uc5b4\ub5a4 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc5d0 \ub300\ud574, \ud544\uc694\ud55c \ubc95\uce59\ub4e4\uc744 \ub9cc\uc871\ud558\ub294 `fmap` \ud568\uc218\ub294 \uae30\uaecf\ud574\uc57c \ud558\ub098\ubfd0\uc774\ub2e4. \uc989, \uc8fc\uc5b4\uc9c4 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc744 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4\uba74, \uadf8 \ubc29\ubc95\uc740 \ub2e8 \ud558\ub098\ubfd0\uc774\ub77c\ub294 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uc6b0\ub9ac\uac00 \uc815\uc758\ud588\ub358 \ub9ac\uc2a4\ud2b8, `Maybe`, `Tree`, `IO`\uc5d0 \ub300\ud55c \uc778\uc2a4\ud134\uc2a4\ub4e4\uc740 \ubaa8\ub450 \uc720\uc77c\ud558\uac8c \uacb0\uc815\ub41c \uac83\uc774\ub2e4.\\n\\n## Applicatives\\n\ud391\ud130\ub294 \uad6c\uc870\uc758 \uac01 \uc6d0\uc18c \uc704\ub85c \ud568\uc218\ub97c \ub9e4\ud551\ud55c\ub2e4\ub294 \uc544\uc774\ub514\uc5b4\ub97c \ucd94\uc0c1\ud654\ud55c\ub2e4. \uc774\uc81c \uc774 \uc544\uc774\ub514\uc5b4\ub97c \uc77c\ubc18\ud654\ud558\uc5ec, \ub2e8\uc77c \uc778\uc790\ub97c \uac16\ub294 \ud568\uc218\uc5d0 \uc81c\uc57d\ub418\ub294 \ub300\uc2e0 \uc784\uc758\uc758 \uac1c\uc218\uc758 \uc778\uc790\ub97c \uac16\ub294 \ud568\uc218\ub97c \ub9e4\ud551\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790. \ub354 \uc815\ud655\ud788\ub294, \ub2e4\uc74c\uacfc \uac19\uc740 \ud0c0\uc785\uc744 \uac16\ub294 `fmap` \ud568\uc218\ub4e4\uc758 \uacc4\uce35\uc744 \uc815\uc758\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790.\\n```haskell\\nfmap0 :: a -> f a\\nfmap1 :: (a -> b) -> f a -> f b\\nfmap2 :: (a -> b -> c) -> f a -> f b -> f c\\nfmap3 :: (a -> b -> c -> d) -> f a -> f b -> f c -> f d\\n.\\n.\\n.\\n```\\n`fmap1`\uc740 `fmap`\uc758 \ub2e4\ub978 \uc774\ub984\uc77c \ubfd0\uc774\uace0, `fmap0`\ub294 \ub9e4\ud551\ub418\ub294 \ud568\uc218\uac00 \uc778\uc790\ub97c \uac16\uc9c0 \uc54a\ub294 \ud1f4\ud654\ub41c(degenerate) \uacbd\uc6b0\uc774\ub2e4. \ud55c \uac00\uc9c0 \uac00\ub2a5\ud55c \uc811\uadfc\ubc95\uc740 \uac01 \uacbd\uc6b0\uc5d0 \ub300\ud574 \ud391\ud130 \ud074\ub798\uc2a4\uc758 \ud2b9\ubcc4\ud55c \ubc84\uc804(Functor0, Functor1, Functor2 \ub4f1)\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\uba74 \uc608\ub97c \ub4e4\uc5b4 \ub2e4\uc74c\uacfc \uac19\uc774 \uc4f8 \uc218 \uc788\ub2e4.\\n```haskell\\n> fmap2 (+) (Just 1) (Just 2)\\nJust 3\\n```\\n\ud558\uc9c0\ub9cc \uc774 \ubc29\ubc95\uc740 \uc5ec\ub7ec \uba74\uc5d0\uc11c \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \uc54a\ub2e4.\\n- \ubaa8\ub4e0 \ud391\ud130 \ud074\ub798\uc2a4\ub4e4\uc774 \uc720\uc0ac\ud55c \ud328\ud134\uc744 \ub530\ub984\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \uac01 \ubc84\uc804\uc744 \uc218\ub3d9\uc73c\ub85c \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4.\\n- \ubb34\ud55c\ud788 \ub9ce\uc740 \ud074\ub798\uc2a4\uac00 \uc788\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \uc720\ud55c\ud55c \uc218\ub9cc \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, \uc5bc\ub9c8\ub098 \ub9ce\uc740 \ud074\ub798\uc2a4\ub97c \uc120\uc5b8\ud574\uc57c \ud560\uc9c0 \uba85\ud655\ud558\uc9c0 \uc54a\ub2e4.\\n\\n`(a -> b) -> f a -> f b` \ud0c0\uc785\uc758 `fmap`\uc744 `(a -> b) -> a -> b` \ud0c0\uc785\uc758 \ub0b4\uc7a5 \ud568\uc218 \uc801\uc6a9 \uc5f0\uc0b0\uc790\ub97c \uc77c\ubc18\ud654\ud55c \uac83\uc73c\ub85c \uac04\uc8fc\ud55c\ub2e4\uba74, \uc6d0\ud558\ub294 \ub3d9\uc791\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574 \uc77c\uc885\uc758 **\ucee4\ub9c1(currying)** \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub77c \uae30\ub300\ud560 \uc218 \uc788\ub2e4. \ud2b9\ud788, \uc6b0\ub9ac\ub294 `add x y = x + y`\uc640 \uac19\uc740 \uc815\uc758\uc5d0\uc11c \ucee4\ub9c1\uc5d0 \uc758\uc874\ud560 \ubfd0, \uc778\uc790 \uac1c\uc218\uac00 \ub2e4\ub978 \ud568\uc218\ub4e4\uc744 \uc704\ud574 \ud2b9\ubcc4\ud55c \ubc84\uc804\uc758 \uc801\uc6a9(application)\uc744 \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4.\\n\\n\\\\\\n\ucee4\ub9c1(currying)\uc758 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba74, \uc784\uc758\uc758 \uc778\uc790 \uac1c\uc218\ub97c \uac16\ub294 \ud568\uc218\ub97c \uc704\ud55c `fmap`\uc758 \ubc84\uc804\uc740 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uae30\ubcf8 \ud568\uc218\uc758 \ud0c0\uc785\uc73c\ub85c \uad6c\uc131\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\npure :: a -> f a\\n(<*>) :: f (a -> b) -> f a -> f b\\n```\\n\uc989, `pure`\ub294 `a` \ud0c0\uc785\uc758 \uac12\uc744 `f a` \ud0c0\uc785\uc758 \uad6c\uc870\ub85c \ubcc0\ud658\ud558\ub294 \ubc18\uba74, `<*>`\ub294 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c0\ub294 \ud568\uc218, \uc778\uc790 \uac12, \uadf8\ub9ac\uace0 \uacb0\uacfc \uac12\uc774 \ubaa8\ub450 `f` \uad6c\uc870 \uc548\uc5d0 \ud3ec\ud568\ub418\ub294, \uc77c\ubc18\ud654\ub41c \ud615\ud0dc\uc758 \ud568\uc218 \uc801\uc6a9\uc774\ub2e4. \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc801\uc6a9\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c `<*>` \uc5f0\uc0b0\uc790\ub294 \ub450 \uc778\uc790 \uc0ac\uc774\uc5d0 \uc911\uc704(infix) \ud45c\uae30\ubc95\uc73c\ub85c \uc0ac\uc6a9\ub418\uba70 \uc67c\ucabd \uacb0\ud569(left-associative)\uc744 \ud55c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4.  \\n\uc608\ub97c \ub4e4\uc5b4, `g <*> x <*> y <*> z`\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud574\uc11d\ub41c\ub2e4.\\n```haskell\\n(((g <*> x) <*> y) <*> z)\\n```\\n`pure`\uc640 `<*>`\uc758 \uc804\ud615\uc801\uc778 \uc0ac\uc6a9 \ud615\ud0dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\npure g <*> x1 <*> x2 <*> ... <*> xn\\n```\\n\uc774\ub7ec\ud55c \ud45c\ud604\uc2dd\uc740 **\uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c(applicative style)** \uc774\ub77c\uace0 \ud55c\ub2e4. \uc774\ub294 \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc801\uc6a9 \ud45c\uae30\ubc95\uc778 `g x1 x2 ... xn`\uacfc\uc758 \uc720\uc0ac\uc131 \ub54c\ubb38\uc774\ub2e4. \ub450 \uacbd\uc6b0 \ubaa8\ub450, `g`\ub294 `a1 ... an` \ud0c0\uc785\uc758 \uc778\uc790 n\uac1c\ub97c \ubc1b\uc544 `b` \ud0c0\uc785\uc758 \uacb0\uacfc\ub97c \uc0dd\uc131\ud558\ub294 \ucee4\ub9c1\ub41c \ud568\uc218\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc5d0\uc11c\ub294 \uac01 \uc778\uc790 `xi`\uac00 `ai`\uac00 \uc544\ub2cc `f ai` \ud0c0\uc785\uc744 \uac00\uc9c0\uba70, \uc804\uccb4 \uacb0\uacfc \ub610\ud55c `b`\uac00 \uc544\ub2cc `f b` \ud0c0\uc785\uc744 \uac16\ub294\ub2e4. \uc774 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9e4\ud551 \ud568\uc218\uc758 \uacc4\uce35\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nfmap0 :: a -> f a\\nfmap0 = pure\\n\\nfmap1 :: (a -> b) -> f a -> f b\\nfmap1 g x = pure g <*> x\\n\\nfmap2 :: (a -> b -> c) -> f a -> f b -> f c\\nfmap2 g x y = pure g <*> x <*> y\\n\\nfmap3 :: (a -> b -> c -> d) -> f a -> f b -> f c -> f d\\nfmap3 g x y z = pure g <*> x <*> y <*> z\\n\\n.\\n.\\n.\\n```\\n\uc774 \uc815\uc758\ub4e4\uc758 \ud0c0\uc785\uc744 \uc9c1\uc811 \ud655\uc778\ud574\ubcf4\ub294 \uac83\uc740 \uc88b\uc740 \uc5f0\uc2b5\uc774 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \ub2e4\uc74c \uc139\uc158\uc5d0\uc11c \ubcf4\uac8c \ub420 \uac83\ucc98\ub7fc \ud544\uc694\uc5d0 \ub530\ub77c \uad6c\uc131\ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \uc774\ub7ec\ud55c \ub9e4\ud551 \ud568\uc218\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc815\uc758\ud560 \ud544\uc694\ub294 \uac70\uc758 \uc5c6\ub2e4.\\n\\n`pure`\uc640 `<*>` \uac1c\ub150\uc744 \uc9c0\uc6d0\ud558\ub294 \ud391\ud130\ub97c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130(applicative functors), \uc904\uc5ec\uc11c **\uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c(applicatives)** \ub77c\uace0 \ubd80\ub978\ub2e4. \ud558\uc2a4\ucf08\uc5d0\uc11c \uc774 \uac1c\ub150\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc7a5 \ud074\ub798\uc2a4 \uc120\uc5b8\uc73c\ub85c \uad6c\ud604\ub41c\ub2e4.\\n```haskell\\nclass Functor f => Applicative f where\\n    pure  :: a -> f a\\n    (<*>) :: f (a -> b) -> f a -> f b\\n```\\n\\n### \uc608\uc2dc\\n`Maybe`\uac00 `fmap`\uc744 \uc9c0\uc6d0\ud558\ub294 \ud391\ud130\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc774\uc6a9\ud558\uba74, \uc774 \ud0c0\uc785\uc744 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub85c \ub9cc\ub4dc\ub294 \uac83\uc740 \uac04\ub2e8\ud558\ub2e4.\\n```haskell\\ninstance Applicative Maybe where\\n    -- pure :: a -> Maybe a\\n    pure = Just\\n    \\n    -- (<*>) :: Maybe (a -> b) -> Maybe a -> Maybe b\\n    Nothing <*> _ = Nothing\\n    (Just g) <*> mx = fmap g mx\\n```\\n\uc989, `pure` \ud568\uc218\ub294 \uac12\uc744 \uc131\uacf5\uc801\uc778 \uacb0\uacfc(`Just`)\ub85c \ubcc0\ud658\ud558\ub294 \ubc18\uba74, `<*>` \uc5f0\uc0b0\uc790\ub294 \uc2e4\ud328\ud560 \uc218\ub3c4 \uc788\ub294 \uc778\uc790\uc5d0 \uc2e4\ud328\ud560 \uc218\ub3c4 \uc788\ub294 \ud568\uc218\ub97c \uc801\uc6a9\ud558\uc5ec \uacb0\uacfc\ub97c \uc0dd\uc131\ud55c\ub2e4. \\n\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> pure (+1) <*> Just 1\\nJust 2\\n\\n> pure (+) <*> Just 1 <*> Just 2\\nJust 3\\n\\n> pure (+) <*> Nothing <*> Just 2\\nNothing\\n```\\n\uc774\ub7ec\ud55c \ubc29\uc2dd\uc73c\ub85c, `Maybe`\uc758 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc2e4\ud328 \uc804\ud30c\ub97c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uc790\ub3d9\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774 \ucc98\ub9ac\ud574\uc8fc\ubbc0\ub85c, \uc6b0\ub9ac\uac00 \uc9c1\uc811 \uc2e4\ud328 \uac00\ub2a5\uc131\uc774 \uc788\ub294 \uc778\uc790\uc5d0 \uc21c\uc218 \ud568\uc218\ub97c \uc801\uc6a9\ud558\ub294 \uac83\uc744 \uad00\ub9ac\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \ud615\ud0dc\uc758 \uc608\uc678 \ucc98\ub9ac \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc9c0\uc6d0\ud55c\ub2e4.\\n\\n\\\\\\n\uc774\uc81c \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc73c\ub85c \ub118\uc5b4\uac00 \ubcf4\uc790. \ud45c\uc900\uc801\uc778 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\ninstance Applicative [] where\\n    -- pure :: a -> [a]\\n    pure x = [x]\\n    \\n    -- (<*>) :: [a -> b] -> [a] -> [b]\\n    gs <*> xs = [g x | g <- gs, x <- xs]\\n```\\n\uc989, `pure`\ub294 \uac12\uc744 \uc6d0\uc18c\uac00 \ud558\ub098\uc778 \ub9ac\uc2a4\ud2b8(singleton list)\ub85c \ubcc0\ud658\ud558\uace0, `<*>`\ub294 \ud568\uc218\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\uc640 \uc778\uc790\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ubc1b\uc544, \uac01 \ud568\uc218\ub97c \uac01 \uc778\uc790\uc5d0 \uc801\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \uacb0\uacfc\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ubc18\ud658\ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> pure (+1) <*> [1,2,3]\\n[2,3,4]\\n\\n> pure (+) <*> [1] <*> [2]\\n[3]\\n\\n> pure (*) <*> [1,2] <*> [3,4]\\n[3,4,6,8]\\n```\\n\uc774 \uc608\uc81c\ub4e4\uc744 \uc5b4\ub5bb\uac8c \uc774\ud574\ud574\uc57c \ud560\uae4c? \ud575\uc2ec\uc740 `[a]` \ud0c0\uc785\uc744 \uc131\uacf5 \uc2dc \uc5ec\ub7ec \uacb0\uacfc\ub97c \ud5c8\uc6a9\ud558\ub294 `Maybe a`\uc758 \uc77c\ubc18\ud654\ub85c \ubcf4\ub294 \uac83\uc774\ub2e4. \ub354 \uc815\ud655\ud788\ub294, \ube48 \ub9ac\uc2a4\ud2b8\ub294 \uc2e4\ud328\ub97c \ub098\ud0c0\ub0b4\uace0, \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \ub9ac\uc2a4\ud2b8\ub294 \uacb0\uacfc\uac00 \uc131\uacf5\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \uac00\ub2a5\ud55c \ubc29\uc2dd\uc744 \ub098\ud0c0\ub0b8\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ub9c8\uc9c0\ub9c9 \uc608\uc81c\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc778\uc790\ub294 \ub450 \uac1c\uc758 \uac00\ub2a5\ud55c \uac12(`1` \ub610\ub294 `2`)\uc744 \uac16\uace0, \ub450 \ubc88\uc9f8 \uc778\uc790\ub3c4 \ub450 \uac1c\uc758 \uac00\ub2a5\ud55c \uac12(`3` \ub610\ub294 `4`)\uc744 \uac00\uc9c0\ubbc0\ub85c, \uacf1\uc148\uc758 \uacb0\uacfc\ub85c \ub124 \uac1c\uc758 \uac00\ub2a5\ud55c \uacb0\uacfc(`3, 4, 6, 8`)\uac00 \ub098\uc624\ub294 \uac83\uc774\ub2e4.\\n\\n\ub354 \uc77c\ubc18\uc801\uc73c\ub85c, \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158(list comprehension)\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub450 \uc815\uc218 \ub9ac\uc2a4\ud2b8\ub97c \uacf1\ud558\ub294 \ubaa8\ub4e0 \uac00\ub2a5\ud55c \ubc29\ubc95\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc0dd\uac01\ud574\ubcf4\uc790.\\n```haskell\\nprods :: [Int] -> [Int] -> [Int]\\nprods xs ys = [x*y | x <- xs, y <- ys]\\n```\\n\ub9ac\uc2a4\ud2b8\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc774\uc6a9\ud558\uba74, \uc911\uac04 \uacb0\uacfc\uc5d0 \uc774\ub984\uc744 \ubd99\uc77c \ud544\uc694 \uc5c6\uc774 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc815\uc758\ub97c \ub0b4\ub193\uc744 \uc218 \uc788\ub2e4.\\n```haskell\\nprods :: [Int] -> [Int] -> [Int]\\nprods xs ys = pure (*) <*> xs <*> ys\\n```\\n\uc694\uc57d\ud558\uc790\uba74, \ub9ac\uc2a4\ud2b8\uc758 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc77c\uc885\uc758 **\ube44\uacb0\uc815\uc801 \ud504\ub85c\uadf8\ub798\ubc0d(non-deterministic programming)** \uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub97c \ud1b5\ud574 \uac12\uc758 \uc120\ud0dd\uc774\ub098 \uc2e4\ud328 \uc804\ud30c\ub97c \uc9c1\uc811 \uad00\ub9ac\ud560 \ud544\uc694 \uc5c6\uc774, \uc21c\uc218 \ud568\uc218\ub97c \ub2e4\uc911-\uac12 \uc778\uc790\uc5d0 \uc801\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uc790\ub3d9\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774 \ucc98\ub9ac\ud574\uc900\ub2e4.\\n\\n\uc774 \uc139\uc158\uc5d0\uc11c \ub2e4\ub8f0 \ub9c8\uc9c0\ub9c9 \ud0c0\uc785\uc740 `IO` \ud0c0\uc785\uc774\uba70, \ub2e4\uc74c \uc120\uc5b8\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Applicative IO where\\n    -- pure :: a -> IO a\\n    pure = return\\n    \\n    -- (<*>) :: IO (a -> b) -> IO a -> IO b\\n    mg <*> mx = do {g <- mg; x <- mx; return (g x)}\\n```\\n\uc774 \uacbd\uc6b0 `pure`\ub294 `IO` \ud0c0\uc785\uc744 \uc704\ud55c `return` \ud568\uc218\ub85c \uc815\uc758\ub418\uace0, `<*>`\ub294 \uc21c\uc218\ud558\uc9c0 \uc54a\uc740(impure) \uc778\uc790\uc5d0 \uc21c\uc218 \ud568\uc218\ub97c \uc801\uc6a9\ud558\uc5ec \uc21c\uc218\ud558\uc9c0 \uc54a\uc740 \uacb0\uacfc\ub97c \ub0b4\ub193\ub294\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ud0a4\ubcf4\ub4dc\ub85c\ubd80\ud130 \uc8fc\uc5b4\uc9c4 \uac1c\uc218\uc758 \ubb38\uc790\ub97c \uc77d\ub294 \ud568\uc218\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\ngetChars :: Int -> IO String\\ngetChars 0 = return []\\ngetChars n = pure (:) <*> getChar <*> getChars (n-1)\\n```\\n\uc989, \uae30\ubcf8 \ucf00\uc774\uc2a4(base case)\uc5d0\uc11c\ub294 \ub2e8\uc21c\ud788 \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\uace0, \uc7ac\uadc0 \ucf00\uc774\uc2a4\uc5d0\uc11c\ub294 \uccab \ubc88\uc9f8 \ubb38\uc790\ub97c \uc77d\uc740 \uacb0\uacfc\uc640 \ub098\uba38\uc9c0 \ubb38\uc790 \ub9ac\uc2a4\ud2b8\uc5d0 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uc790 (`:`)\ub97c \uc801\uc6a9\ud55c\ub2e4. \ud6c4\uc790\uc758 \uacbd\uc6b0, \ub9cc\uc57d \uc774 \ud568\uc218\uac00 `do` \ud45c\uae30\ubc95\uc73c\ub85c \uc815\uc758\ub418\uc5c8\ub2e4\uba74 \ud544\uc694\ud588\uc744 cons \ud568\uc218\uc5d0 \uacf5\uae09\ub418\ub294 \uc778\uc790\ub4e4\uc758 \uc774\ub984\uc744 \ubd99\uc77c \ud544\uc694\uac00 \uc5c6\ub2e4.\\n\\n\ub354 \uc77c\ubc18\uc801\uc73c\ub85c, `IO`\uc758 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc77c\uc885\uc758 **interactive programming** \uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc561\uc158\uc758 \uc21c\uc11c\ub098 \uacb0\uacfc \uac12 \ucd94\ucd9c\uc744 \uc9c1\uc811 \uad00\ub9ac\ud560 \ud544\uc694 \uc5c6\uc774, \uc21c\uc218 \ud568\uc218\ub97c \uc21c\uc218\ud558\uc9c0 \uc54a\uc740 \uc778\uc790\uc5d0 \uc801\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uc790\ub3d9\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac\ud574\uc900\ub2e4.\\n\\n### Effectful programming\\n\uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc5d0 \ub300\ud55c \uc6d0\ub798 \ub3d9\uae30\ub294 \ub2e4\uc911 \uc778\uc790 \ud568\uc218\uc5d0 \ub300\ud55c \ub9e4\ud551 \uc544\uc774\ub514\uc5b4\ub97c \uc77c\ubc18\ud654\ud558\ub824\ub294 \uac83\uc774\uc5c8\ub2e4. \uc774\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uac1c\ub150\uc5d0 \ub300\ud55c \ud55c\uac00\uc9c0 \uc720\ud6a8\ud55c \ud574\uc11d\uc774\uc9c0\ub9cc, \uc55e\uc11c \uc0b4\ud3b4\ubcf8 \uc138 \uac00\uc9c0 \uc778\uc2a4\ud134\uc2a4(`Maybe`, `List`, `IO`)\ub97c \ud1b5\ud574 \ub354 \ucd94\uc0c1\uc801\uc778 \ub610 \ub2e4\ub978 \uad00\uc810\uc774 \uc788\ub2e4\ub294 \uac83\uc774 \ubd84\uba85\ud574\uc9c4\ub2e4.\\n\\n\uc774 \uc778\uc2a4\ud134\uc2a4\ub4e4 \uc0ac\uc774\uc758 \uacf5\ud1b5\ub41c \uc8fc\uc81c\ub294 \ubaa8\ub450 **effects** \ub97c \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uad00\ub828\uc774 \uc788\ub2e4\ub294 \uc810\uc774\ub2e4. \uac01 \uacbd\uc6b0\uc5d0, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uba54\ucee4\ub2c8\uc998\uc740 \uce5c\uc219\ud55c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uac8c \ud574\uc8fc\ub294 `<*>` \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774 \uc2a4\ud0c0\uc77c\uc5d0\uc11c\ub294 \ud568\uc218\uac00 \uc778\uc790\uc5d0 \uc801\uc6a9\ub418\ub294\ub370, \ud55c \uac00\uc9c0 \ud575\uc2ec\uc801\uc778 \ucc28\uc774\uc810\uc774 \uc788\ub2e4. \uc778\uc790\ub4e4\uc740 \ub354 \uc774\uc0c1 \ub2e8\uc21c\ud55c \uac12\uc774 \uc544\ub2c8\ub77c, \uc2e4\ud328 \uac00\ub2a5\uc131, \uc5ec\ub7ec \uc131\uacf5 \uacbd\ub85c, \ub610\ub294 \uc785\ucd9c\ub825 \uc561\uc158 \uc218\ud589\uacfc \uac19\uc740 effect\ub97c \uac00\uc9c8 \uc218 \uc788\ub2e4.\\n\\n\uc774\ub7ec\ud55c \ubc29\uc2dd\uc73c\ub85c, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub294 \uc21c\uc218 \ud568\uc218\ub97c **effectful arguments**\uc5d0 \uc801\uc6a9\ud558\ub294 \uc544\uc774\ub514\uc5b4\ub97c \ucd94\uc0c1\ud654\ud55c \uac83\uc73c\ub85c\ub3c4 \ubcfc \uc218 \uc788\uc73c\uba70, \ud5c8\uc6a9\ub418\ub294 \ud6a8\uacfc\uc758 \uc815\ud655\ud55c \ud615\ud0dc\ub294 \uae30\ubc18\uc774 \ub418\ub294 \ud391\ud130\uc758 \uc131\uc9c8\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c4\ub2e4.\\n\\neffectful programming\uc758 \ud55c \ud615\ud0dc\uc5d0 \ub300\ud55c \ud1b5\uc77c\ub41c \uc811\uadfc\ubc95\uc744 \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0\ub3c4, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc5b4\ub5a4 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\uc640\ub3c4 \ud568\uaed8 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc77c\ubc18\ud654\ub41c \ud568\uc218\ub97c \uc815\uc758\ud560 \uc218 \uc788\ub2e4\ub294 \uc911\uc694\ud55c \uc774\uc810\ub3c4 \uc788\ub2e4. \\n\\n\ud55c \uc608\ub85c, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub2e4\uc74c \ud568\uc218\ub97c \uc81c\uacf5\ud55c\ub2e4.\\n```haskell\\nsequenceA :: Applicative f => [f a] -> f [a]\\nsequenceA [] = pure []\\nsequenceA (x:xs) = pure (:) <*> x <*> sequenceA xs\\n```\\n\uc774 \ud568\uc218\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc561\uc158\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c, \uacb0\uacfc \uac12\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\ub294 \ub2e8\uc77c \uc561\uc158\uc73c\ub85c \ubcc0\ud658\ud558\uba70, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uacf5\ud1b5\ub41c \ud328\ud134\uc744 \ud3ec\ucc29\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `getChars` \ud568\uc218\ub294 \uc774\uc81c \uae30\ubcf8 \uc561\uc158\uc778 `getChar`\ub97c \ud544\uc694\ud55c \ud69f\uc218\ub9cc\ud07c \ubcf5\uc81c\ud558\uace0 \uadf8 \uacb0\uacfc \uc2dc\ud000\uc2a4\ub97c \uc2e4\ud589\ud558\ub294 \ub354 \uac04\ub2e8\ud55c \ubc29\uc2dd\uc73c\ub85c \uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\ngetChars :: Int -> IO String\\ngetChars n = sequenceA (replicate n getChar)\\n```\\n\\n### Applicative laws\\n`pure`\uc640 `<*>` \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0\ub3c4, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub294 \ub124 \uac00\uc9c0 \ub4f1\uc2dd \ubc95\uce59\uc744 \ub9cc\uc871\ud574\uc57c \ud55c\ub2e4.\\n- `pure id <*> x` = `x`\\n    - **\ud56d\ub4f1(Identity)** : `pure`\uac00 \ud56d\ub4f1 \ud568\uc218\ub97c \ubcf4\uc874\ud55c\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \uc989, `pure id`\ub97c \uc801\uc6a9\ud558\ub294 \uac83\uc740 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\ub294 \uac83\uacfc \uac19\ub2e4.\\n- `pure (g x)` = `pure g <*> pure x`\\n    - **\ub3d9\ud615\uc0ac\uc0c1(Homomorphism)** : `pure`\uac00 \ud568\uc218 \uc801\uc6a9 \ub610\ud55c \ubcf4\uc874\ud568\uc744 \ub9d0\ud55c\ub2e4. `pure`\ub294 \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc801\uc6a9\uc744 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud568\uc218 \uc801\uc6a9\uc73c\ub85c \ubd84\ubc30\ud560 \uc218 \uc788\ub2e4.\\n- `x <*> pure y` = `pure (\\\\g -> g y) <*> x`\\n    - **\uad50\ud658(Interchange)** : effectful \ud568\uc218\ub97c \uc21c\uc218\ud55c(pure) \uc778\uc790\uc5d0 \uc801\uc6a9\ud560 \ub54c, \ub450 \uad6c\uc131 \uc694\uc18c\uc758 \ud3c9\uac00 \uc21c\uc11c\ub294 \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.\\n- `x <*> (y <*> z)` = `(pure (.) <*> x <*> y) <*> z`\\n    - **\uacb0\ud569(Composition)** : \uad00\ub828\ub41c \ud0c0\uc785\ub4e4\uc744 \uc81c\uc678\ud558\uba74 `<*>` \uc5f0\uc0b0\uc790\uac00 \uacb0\ud569 \ubc95\uce59\uc744 \ub9cc\uc871\ud55c\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.\\n\\n\uc774 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ubc95\uce59\ub4e4\uc740 `pure :: a -> f a` \ud568\uc218\uc5d0 \ub300\ud55c \uc6b0\ub9ac\uc758 \uc9c1\uad00, \uc989 `a` \ud0c0\uc785\uc758 \uac12\uc744 `f` \ud0c0\uc785\uc758 \uc138\uc0c1\uc5d0 \uc2ec\ub294\ub2e4\ub294 \uac1c\ub150\uc744 \uacf5\uc2dd\ud654\ud55c\ub2e4. \ub610\ud55c \uc774 \ubc95\uce59\ub4e4\uc740 `pure` \ud568\uc218\uc640 `<*>` \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ucd95\ub41c \ubaa8\ub4e0 \ud0c0\uc785\uc774 \uc62c\ubc14\ub978 \ud45c\ud604\uc2dd\uc740 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \ub2e4\uc2dc \uc791\uc131\ub420 \uc218 \uc788\uc74c\uc744 \ubcf4\uc7a5\ud55c\ub2e4. \uc989, \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\ud0dc\uc774\ub2e4.\\n```\\npure g <*> x1 <*> x2 <*> ... <*> xn\\n```\\n\uc6b0\ub9ac\uac00 \uc608\uc81c\uc5d0\uc11c \uc815\uc758\ud588\ub358 \ubaa8\ub4e0 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub294 \uc704 \ubc95\uce59\ub4e4\uc744 \ub9cc\uc871\ud55c\ub2e4. \ub354\uc6b1\uc774, \uc774 \uc778\uc2a4\ud134\uc2a4\ub4e4\uc740 \uac01\uac01 `fmap g x = pure g <*> x` \ubc95\uce59 \ub610\ud55c \ub9cc\uc871\ud558\ub294\ub370, \uc774\ub294 `fmap`\uc774 \ub450 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uae30\ubcf8 \uc5f0\uc0b0(`pure`, `<*>`)\uc73c\ub85c \uc5b4\ub5bb\uac8c \uc815\uc758\ub420 \uc218 \uc788\ub294\uc9c0 \ubcf4\uc5ec\uc900\ub2e4. \uc0ac\uc2e4 \uc774 `fmap` \uad00\ub828 \ubc95\uce59\uc740 \uc774\uc804\uc5d0 \uc5b8\uae09\ub41c \uc0ac\uc2e4, \uc989 \uc8fc\uc5b4\uc9c4 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc744 \ud391\ud130\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 \ub2e8 \ud558\ub098\ubfd0\uc774\ubbc0\ub85c `fmap`\uacfc \ub3d9\uc77c\ud574\uc57c \ud558\ub294 \ud568\uc218\ub294 \uc5b4\ub5a4 \uac83\uc774\ub4e0 \uc2e4\uc81c\ub85c `fmap`\uacfc \uac19\ub2e4\ub294 \uc0ac\uc2e4 \ub355\ubd84\uc5d0 \uacf5\uc9dc\ub85c \uc5bb\uc5b4\uc9c4\ub2e4.\\n\\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c, \ud558\uc2a4\ucf08\uc740 `g <$> x = fmap g x`\ub85c \uc815\uc758\ub418\ub294 `fmap`\uc758 \uc911\uc704(infix) \ubc84\uc804\uc778 `<$>`\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774\ub97c \uc704 `fmap` \ubc95\uce59\uacfc \uacb0\ud569\ud558\uba74 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc758 \ub300\uc548\uc801\uc778 \ud615\ud0dc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\\n```\\ng <$> x1 <*> x2 <*> ... <*> xn\\n```\\n\uc774 \ubc84\uc804\uc774 \uc57d\uac04 \ub354 \uac04\uacb0\ud558\uc9c0\ub9cc, \uc124\uba85 \ubaa9\uc801\uc73c\ub85c\ub294 \ud504\ub85c\uadf8\ub798\ubc0d\uc774 \uc21c\uc218 \ud568\uc218\ub97c \ud6a8\uacfc\uac00 \uc788\ub294 \uc778\uc790\uc5d0 \uc801\uc6a9\ud558\ub294 \uac83\uc784\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uac15\uc870\ud558\ub294 `pure` \ubc84\uc804\uc744 \uc120\ud638\ud55c\ub2e4. \ud558\uc9c0\ub9cc `<$>`\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc84\uc804\uc740 \uc2e4\uc81c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4.\\n\\n## Monads\\n\uc774 \uc7a5\uc5d0 \ub098\uc62c \ub9c8\uc9c0\ub9c9 \uc0c8\ub85c\uc6b4 \uac1c\ub150\uc740 effectful programming\uc758 \ub610 \ub2e4\ub978 \ud328\ud134\uc744 \ud3ec\ucc29\ud55c\ub2e4. \uc608\uc2dc\ub85c, \uc815\uc218 \uac12\uacfc \ub098\ub217\uc148 \uc5f0\uc0b0\uc790\ub85c \uad6c\uc131\ub41c \ub2e4\uc74c \ud45c\ud604\uc2dd \ud0c0\uc785\uc744 \uc0dd\uac01\ud574\ubcf4\uc790.\\n```haskell\\ndata Expr = Val Int | Div Expr Expr\\n```\\n\uc774\ub7ec\ud55c \ud45c\ud604\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud3c9\uac00\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Int\\neval (Val n) = n\\neval (Div x y) = eval x `div` eval y\\n```\\n\ud558\uc9c0\ub9cc \uc774 \ud568\uc218\ub294 0\uc73c\ub85c \ub098\ub204\ub294 \uac00\ub2a5\uc131\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\uc73c\uba70, \uc774 \uacbd\uc6b0 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.\\n```haskell\\n> eval (Div (Val 1) (Val 0))\\n*** Exception: divide by zero\\n```\\n\uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574, \ub450 \ubc88\uc9f8 \uc778\uc790\uac00 `0`\uc77c \ub54c `Nothing`\uc744 \ubc18\ud658\ud558\ub294 \uc548\uc804\ud55c \ubc84\uc804\uc758 \ub098\ub217\uc148 \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc704\ud574 `Maybe` \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nsafediv :: Int -> Int -> Maybe Int\\nsafediv _ 0 = Nothing\\nsafediv n m = Just (n `div` m)\\n```\\n\uadf8\ub9ac\uace0 `eval` \ud568\uc218\ub97c \uc218\uc815\ud558\uc5ec \ub450 \uc778\uc790 \ud45c\ud604\uc2dd\uc5d0 \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub420 \ub54c \uc2e4\ud328 \uac00\ub2a5\uc131\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub3c4\ub85d \ud55c\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = Just n\\neval (Div x y) = case eval x of\\n                   Nothing -> Nothing\\n                   Just n  -> case eval y of\\n                                Nothing -> Nothing\\n                                Just m  -> safediv n m\\n```\\n\uc774\uc81c \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> eval (Div (Val 1) (Val 0))\\nNothing\\n```\\n\uc774 \uc0c8\ub85c\uc6b4 \uc815\uc758\ub294 0\uc73c\ub85c \ub098\ub204\uae30 \uc774\uc288\ub97c \ud574\uacb0\ud558\uc9c0\ub9cc \ub2e4\uc18c \uc7a5\ud669\ud558\ub2e4. \uc815\uc758\ub97c \ub2e8\uc21c\ud654\ud558\uae30 \uc704\ud574 `Maybe`\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\ub77c\ub294 \uc0ac\uc2e4\uc744 \ud65c\uc6a9\ud558\uc5ec `eval`\uc744 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \uc7ac\uc815\uc758\ud574\ubcfc \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = pure n\\neval (Div x y) = pure safediv <*> eval x <*> eval y\\n```\\n\ud558\uc9c0\ub9cc \uc774 \uc815\uc758\ub294 \ud0c0\uc785\uc774 \uc62c\ubc14\ub974\uc9c0 \uc54a\ub2e4. \ud2b9\ud788, \uc704 \ucee8\ud14d\uc2a4\ud2b8\uc5d0\uc11c\ub294 `Int -> Int -> Int` \ud0c0\uc785\uc758 \ud568\uc218\uac00 \ud544\uc694\ud55c\ub370, `safediv` \ud568\uc218\ub294 `Int -> Int -> Maybe Int` \ud0c0\uc785\uc744 \uac16\ub294\ub2e4. `pure safediv`\ub97c `Maybe (Int -> Int -> Maybe Int)` \ud0c0\uc785\uc744 \uac16\ub294 \ucee4\uc2a4\ud140 \uc815\uc758 \ud568\uc218\ub85c \uad50\uccb4\ud574\ub3c4 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\ub294\ub370, \uc774\ub294 \ub450 \ubc88\uc9f8 \uc815\uc218\uac00 0\uc77c \ub54c \uc2e4\ud328\ub97c \ub098\ud0c0\ub0bc \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n\uacb0\ub860\uc740 `eval` \ud568\uc218\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\uac00 \ud3ec\ucc29\ud558\ub294 effectful programming\uc758 \ud328\ud134\uc5d0 \ub9de\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774\ub2e4. \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc21c\uc218 \ud568\uc218\ub97c \ud6a8\uacfc\uac00 \uc788\ub294 \uc778\uc790\uc5d0 \uc801\uc6a9\ud558\ub3c4\ub85d \uc81c\ud55c\ud55c\ub2e4. `eval`\uc740 \uc774 \ud328\ud134\uc5d0 \ub9de\uc9c0 \uc54a\ub294\ub370, `safediv`\ub97c \ucc98\ub9ac\ud558\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\uac00 \uc21c\uc218 \ud568\uc218\uac00 \uc544\ub2c8\ub77c \uadf8 \uc790\uccb4\ub85c \uc2e4\ud328\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n\uadf8\ub807\ub2e4\uba74 `eval :: Expr -> Maybe Int`\ub97c \uc5b4\ub5bb\uac8c \ub354 \uac04\ub2e8\ud55c \ubc29\uc2dd\uc73c\ub85c \ub2e4\uc2dc \uc791\uc131\ud560 \uc218 \uc788\uc744\uae4c? \ud575\uc2ec\uc740 `eval` \uc815\uc758\uc5d0 \ub450 \ubc88 \ub098\ud0c0\ub098\ub294 \uacf5\ud1b5 \ud328\ud134, \uc989 `Maybe` \uac12\uc5d0 \ub300\ud55c **\uacbd\uc6b0 \ubd84\uc11d(case analysis)**\uc744 \uc218\ud589\ud558\uc5ec `Nothing`\uc740 `Nothing`\uc73c\ub85c, `Just x`\ub294 \uc5b4\ub5a4 \uacb0\uacfc\ub85c \ub9e4\ud551\ud558\ub294 \uac83\uc744 \uad00\ucc30\ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ud328\ud134\uc744 \ucd94\uc0c1\ud654\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\ub294 \uc0c8\ub85c\uc6b4 \uc5f0\uc0b0\uc790 `>>=`\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\\n```haskell\\n(>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b\\nmx >>= f = case mx of\\n             Nothing -> Nothing\\n             Just x  -> f x\\n```\\n\uc989, `>>=`\ub294 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 `a` \ud0c0\uc785\uc758 \uc778\uc790\uc640, \uadf8 \uacb0\uacfc\uac00 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 `a` \ud0c0\uc785\uc758 \ud568\uc218\ub97c \ubc1b\uc544, \uc2e4\ud328\ud560 \uc218 \uc788\ub294 `b` \ud0c0\uc785\uc758 \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4. \ub9cc\uc57d \uccab \ubc88\uc9f8 \uc778\uc790\uac00 \uc2e4\ud328\ud558\uba74 \uc2e4\ud328\ub97c \uc804\ud30c\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub450 \ubc88\uc9f8 \uc778\uc790\uc778 \ud568\uc218\ub97c \uccab \ubc88\uc9f8 \uc778\uc790\uc758 \uacb0\uacfc\uc5d0 \uc801\uc6a9\ud55c\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c `>>=`\ub294 `Maybe` \uac12\uc758 \uc5f0\uc18d\uacfc \uadf8 \uacb0\uacfc \ucc98\ub9ac\ub97c \ud1b5\ud569\ud55c\ub2e4. `>>=` \uc5f0\uc0b0\uc790\ub294 \uc885\uc885 **\ubc14\uc778\ub4dc(bind)** \ub77c\uace0 \ubd88\ub9b0\ub2e4. \ub450 \ubc88\uc9f8 \uc778\uc790\ub97c \uccab \ubc88\uc9f8 \uc778\uc790\uc758 \uacb0\uacfc\uc5d0 \ubc14\uc778\ub529\ud558\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n\ubc14\uc778\ub4dc \uc5f0\uc0b0\uc790\uc640 \ub78c\ub2e4 \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec, \uc774\uc81c `eval` \ud568\uc218\ub97c \ub354 \uac04\uacb0\ud55c \ubc29\uc2dd\uc73c\ub85c \uc7ac\uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = Just n\\neval (Div x y) = eval x >>= \\\\n ->\\n                 eval y >>= \\\\m ->\\n                 safediv n m\\n```\\n`Div`\uc758 \uacbd\uc6b0\ub294 \uba3c\uc800 `x`\ub97c \ud3c9\uac00\ud558\uc5ec \uadf8 \uacb0\uacfc\ub97c `n`\uc774\ub77c \ud558\uace0, \uadf8 \ub2e4\uc74c `y`\ub97c \ud3c9\uac00\ud558\uc5ec \uadf8 \uacb0\uacfc\ub97c `m`\uc774\ub77c \ud55c \ub4a4, `safediv`\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub450 \uacb0\uacfc\ub97c \uacb0\ud569\ud558\ub294 \uc0c1\ud0dc\ub97c \uba85\uc2dc\ud55c\ub2e4.\\n\\n\uc704 \uc608\uc81c\ub85c\ubd80\ud130 \uc77c\ubc18\ud654\ud558\uba74, `>>=` \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ucd95\ub41c \ud45c\ud604\uc2dd\uc740 \uc804\ud615\uc801\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4.\\n```haskell\\nm1 >>= \\\\x1 ->\\nm2 >>= \\\\x2 ->\\n...\\nmn >>= \\\\xn ->\\nf x1 x2 ... xn\\n```\\n\uc989, \uc6b0\ub9ac\ub294 `m1 ... mn` \uac01\uac01\uc758 \ud45c\ud604\uc2dd\uc744 \ucc28\ub840\ub85c \ud3c9\uac00\ud558\uace0, \uadf8 \uacb0\uacfc \uac12 `x1 ... xn`\uc744 \ud568\uc218 `f`\uc5d0 \uc801\uc6a9\ud558\uc5ec \uacb0\ud569\ud55c\ub2e4. `>>=` \uc5f0\uc0b0\uc790\uc758 \uc815\uc758\ub294 \uc2dc\ud000\uc2a4\uc758 \ubaa8\ub4e0 \uad6c\uc131\uc694\uc18c `mi`\uac00 \uc131\uacf5\ud560 \uacbd\uc6b0\uc5d0\ub9cc \uc774\ub7ec\ud55c \ud45c\ud604\uc2dd\uc774 \uc131\uacf5\ud558\ub3c4\ub85d \ubcf4\uc7a5\ud55c\ub2e4. \ub354 \ub098\uc544\uac00, `>>=` \uc5f0\uc0b0\uc790\uc758 \uc815\uc758\uc5d0 \uc758\ud574 \uc2dc\ud000\uc2a4\uc758 \uc5b4\ub290 \uc9c0\uc810\uc5d0\uc11c\ub4e0 \uc2e4\ud328\ub97c \ucc98\ub9ac\ud558\ub294 \ubb38\uc81c\uac00 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac\ub418\ubbc0\ub85c \uc0ac\uc6a9\uc790\ub294 \uc774\uc5d0 \ub300\ud574 \uac71\uc815\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.\\n\\n\ud558\uc2a4\ucf08\uc740 \uc704\uc640 \uac19\uc740 \ud615\ud0dc\uc758 \ud45c\ud604\uc2dd\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ub354 \uac04\ub2e8\ud55c \ubc29\uc2dd\uc73c\ub85c \uc791\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \ud2b9\ubcc4\ud55c \ud45c\uae30\ubc95\uc744 \uc81c\uacf5\ud55c\ub2e4.\\n```haskell\\ndo x1 <- m1\\n   x2 <- m2\\n   ...\\n   xn <- mn\\n   f x1 x2 ... xn\\n```\\n\uc774\ub294 \uc0c1\ud638\uc791\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d(interactive programming)\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ub418\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \ud45c\uae30\ubc95\uc774\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub3c4 \uc2dc\ud000\uc2a4\uc758 \uac01 \ud56d\ubaa9\uc740 \ub3d9\uc77c\ud55c \uc5f4\uc5d0\uc11c \uc2dc\uc791\ud574\uc57c \ud558\uba70, \uacb0\uacfc \uac12 `xi`\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0 `xi <- mi`\ub294 `mi`\ub85c \ucd95\uc57d\ub420 \uc218 \uc788\ub2e4. \uc774 `do` \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 `eval`\uc740 \uc774\uc81c \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud558\uac8c \uc7ac\uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = Just n\\neval (Div x y) = do n <- eval x\\n                    m <- eval y\\n                    safediv n m\\n```\\n\ub354 \uc77c\ubc18\uc801\uc73c\ub85c, `do` \ud45c\uae30\ubc95\uc740 `IO`\ub098 `Maybe` \ud0c0\uc785\uc5d0\ub9cc \uad6d\ud55c\ub418\uc9c0 \uc54a\uace0, **\ubaa8\ub098\ub4dc(monad)** \ub97c \ud615\uc131\ud558\ub294 \ubaa8\ub4e0 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud0c0\uc785\uacfc \ud568\uaed8 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. \ud558\uc2a4\ucf08\uc5d0\uc11c \ubaa8\ub098\ub4dc\uc758 \uac1c\ub150\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc7a5 \uc120\uc5b8\uc73c\ub85c \uad6c\ud604\ub41c\ub2e4.\\n```haskell\\nclass Applicative m => Monad m where\\n    return :: a -> m a\\n    (>>=)  :: m a -> (a -> m b) -> m b\\n    \\n    return = pure\\n```\\n\uc989, \ubaa8\ub098\ub4dc\ub294 \uba85\uc2dc\ub41c \ud0c0\uc785\uc758 `return`\uacfc `>>=` \ud568\uc218\ub97c \uc9c0\uc6d0\ud558\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud0c0\uc785\uc774\ub2e4. \uae30\ubcf8 \uc815\uc758 `return = pure`\ub294 `return`\uc774 \uc77c\ubc18\uc801\uc73c\ub85c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud568\uc218 `pure`\uc758 \ub2e4\ub978 \uc774\ub984\uc77c \ubfd0\uc774\uc9c0\ub9cc, \uc6d0\ud55c\ub2e4\uba74 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub4dc(override)\ub420 \uc218 \uc788\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4.\\n\\n`return` \ud568\uc218\ub294 \uc5ed\uc0ac\uc801\uc778 \uc774\uc720\ub85c, \uadf8\ub9ac\uace0 `return`\uacfc `>>=` \ud568\uc218\ub97c \ubaa8\ub450 \ud3ec\ud568\ud55c\ub2e4\uace0 \uac00\uc815\ud558\ub294 \uae30\uc874 \ucf54\ub4dc, \ub17c\ubb38, \uad50\uacfc\uc11c\uc640\uc758 \ud558\uc704 \ud638\ud658\uc131\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud574 `Monad` \ud074\ub798\uc2a4\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ubbf8\ub798\uc758 \uc5b4\ub290 \uc2dc\uc810\uc5d0\ub294 `return`\uc774 `Monad` \ud074\ub798\uc2a4\uc5d0\uc11c \uc81c\uac70\ub418\uace0 \ub300\uc2e0 \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\uc758\ub97c \uac16\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\uac00 \ub420 \uc218\ub3c4 \uc788\ub2e4.\\n```haskell\\nreturn :: Applicative f => a -> f a\\nreturn = pure\\n```\\n\ub9cc\uc57d \uc774 \ubcc0\uacbd\uc774 \uad6c\ud604\ub418\uba74, \ub354 \uc774\uc0c1 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc5d0\uc11c `return`\uc744 \uc815\uc758\ud558\ub294 \uac83\uc774 \ubd88\uac00\ub2a5\ud574\uc9c0\uc9c0\ub9cc, \uc6b0\ub9ac\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uae30\ubcf8 \uc815\uc758\uc778 `return = pure`\ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c \ub300\ubd80\ubd84\uc758 \uc608\uc81c\ub294 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4.\\n\\n### \uc608\uc2dc\\n\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac(prelude)\uc5d0\uc11c, `Maybe` \ud0c0\uc785\uc758 \ubc14\uc778\ub4dc(bind) \uc5f0\uc0b0\uc790\ub294 \ub2e8\uc21c\uc131\uc744 \uc704\ud574 \ucf00\uc774\uc2a4 \ubd84\uc11d \ub300\uc2e0 \ud328\ud134 \ub9e4\uce6d\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc758\ub41c\ub2e4.\\n```haskell\\ninstance Monad Maybe where\\n    -- (>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b\\n    Nothing >>= _ = Nothing\\n    (Just x) >>= f = f x\\n```\\n\uc774 \uc120\uc5b8 \ub54c\ubb38\uc5d0 `do` \ud45c\uae30\ubc95\uc774 \uc774\uc804 \uc139\uc158\uc758 `eval` \ud568\uc218\uc5d0\uc11c\ucc98\ub7fc `Maybe` \uac12\uc744 \ud504\ub85c\uadf8\ub798\ubc0d\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \uac83\uc774\ub2e4.\\n\\n\\\\\\n\ub9ac\uc2a4\ud2b8 \ub610\ud55c \ub2e4\uc74c\uacfc \uac19\uc774 \ubaa8\ub098\ub4dc \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Monad [] where\\n    -- (>>=) :: [a] -> (a -> [b]) -> [b]\\n    xs >>= f = [y | x <- xs, y <- f x]\\n```\\n\uc989, `xs >>= f`\ub294 `xs`\uc758 \uac01 \uacb0\uacfc `x`\uc5d0 \ud568\uc218 `f`\ub97c \uc801\uc6a9\ud558\uace0, \uadf8 \uacb0\uacfc \uac12\ub4e4\uc744 \ubaa8\ub450 \ub9ac\uc2a4\ud2b8\uc5d0 \ubaa8\uc740\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c \ub9ac\uc2a4\ud2b8\uc758 \ubc14\uc778\ub4dc \uc5f0\uc0b0\uc790\ub294 \uc5ec\ub7ec \uacb0\uacfc\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub294 \ud45c\ud604\uc2dd\uc744 \uc2dc\ud000\uc2f1\ud558\ub294 \uc218\ub2e8\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub450 \ub9ac\uc2a4\ud2b8\uc758 \uc6d0\uc18c\ub97c \uc9dd\uc9d3\ub294 \ubaa8\ub4e0 \uac00\ub2a5\ud55c \ubc29\ubc95\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub294 \uc774\uc81c `do` \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\npairs :: [a] -> [b] -> [(a,b)]\\npairs xs ys = do x <- xs\\n                 y <- ys\\n                 return (x,y)\\n```\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> pairs [1,2] [3,4]\\n[(1,3),(1,4),(2,3),(2,4)]\\n```\\n`pairs`\uc758 \ub9c8\uc9c0\ub9c9 \uc904\uc5d0\uc11c \uae30\ubcf8 \uc815\uc758\uc778 `return = pure` \ub54c\ubb38\uc5d0 `pure (x,y)`\ub97c \uc4f8 \uc218\ub3c4 \uc788\uc5c8\uc9c0\ub9cc, \ubaa8\ub098\ub4dc \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\ub294 `return` \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uad00\ub840\ub77c\ub294 \uc810\uc5d0 \uc720\uc758\ud558\uc790. \ub610\ud55c \uc774 \uc815\uc758\uac00 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud55c \uc815\uc758\uc640 \uc720\uc0ac\ud558\ub2e4\ub294 \uc810\ub3c4 \ud765\ubbf8\ub86d\ub2e4.\\n```haskell\\npairs xs ys = [(x,y) | x <- xs, y <- ys]\\n```\\n\ud558\uc9c0\ub9cc \ucef4\ud504\ub9ac\ud5e8\uc158 \ud45c\uae30\ubc95\uc740 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc5d0\ub9cc \ud2b9\uc815\ub418\uc9c0\ub9cc, `do` \ud45c\uae30\ubc95\uc740 \uc784\uc758\uc758 \ubaa8\ub098\ub4dc\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.\\n\\n\\\\\\n\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub610\ud55c `IO` \ud0c0\uc785\uc5d0 \ub300\ud55c \uc778\uc2a4\ud134\uc2a4\ub3c4 \ud3ec\ud568\ud558\uba70, \uc774\ub294 \uc0c1\ud638\uc791\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c `do` \ud45c\uae30\ubc95 \uc0ac\uc6a9\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc704\uc758 \ub2e4\ub978 \uc608\uc81c\ub4e4\uacfc \ub2ec\ub9ac, \uc774 \uacbd\uc6b0 `return`\uacfc `>>=`\uc758 \uc815\uc758\ub294 \ud558\uc2a4\ucf08 \uc790\uccb4 \ub0b4\uc5d0\uc11c \uc815\uc758\ub418\uae30\ubcf4\ub2e4\ub294 \uc5b8\uc5b4\uc5d0 \ub0b4\uc7a5\ub418\uc5b4 \uc788\ub2e4.\\n```haskell\\ninstance Monad IO where\\n    -- return :: a -> IO a\\n    return x = ...\\n    \\n    -- (>>=) :: IO a -> (a -> IO b) -> IO b\\n    mx >>= f = ...\\n```\\n\\n### The state monad\\n\uc774\uc81c \uc2dc\uac04\uc5d0 \ub530\ub77c \ubcc0\ud560 \uc218 \uc788\ub294 \uc5b4\ub5a4 \ud615\ud0dc\uc758 **\uc0c1\ud0dc(state)** \ub97c \uc870\uc791\ud558\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\ub294 \ubb38\uc81c\ub97c \uc0dd\uac01\ud574 \ubcf4\uc790. \uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud558\uac8c \uc0c1\ud0dc\ub294 \ub2e8\uc9c0 \uc815\uc218 \uac12\uc774\ub77c\uace0 \uac00\uc815\ud558\uc9c0\ub9cc, \ud544\uc694\uc5d0 \ub530\ub77c \uc218\uc815\ub420 \uc218 \uc788\ub2e4:\\n```haskell\\ntype State = Int\\n```\\n\uc774 \ud0c0\uc785\uc5d0 \ub300\ud55c \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 \ud615\ud0dc\uc758 \ud568\uc218\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790(state transformer), \uc57d\uc790\ub85c ST\uc774\ub2e4. \uc774\uac83\uc740 \uc785\ub825 \uc0c1\ud0dc\ub97c \uc778\uc790\ub85c \ubc1b\uc544\uc11c \uacb0\uacfc\ub85c \ucd9c\ub825 \uc0c1\ud0dc\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\uba70, \uc774\ub54c \ucd9c\ub825 \uc0c1\ud0dc\ub294 \ud568\uc218 \uc2e4\ud589 \uc911\uc5d0 \uc0c1\ud0dc\uc5d0 \uac00\ud574\uc9c4 \ubaa8\ub4e0 \ubcc0\uacbd \uc0ac\ud56d\uc744 \ubc18\uc601\ud55c\ub2e4:\\n```haskell\\ntype ST = State -> State\\n```\\n\ud558\uc9c0\ub9cc \uc77c\ubc18\uc801\uc73c\ub85c, \uc0c1\ud0dc\ub97c \uac31\uc2e0\ud558\ub294 \uac83 \uc678\uc5d0\ub3c4 \uacb0\uacfc \uac12\uc744 \ubc18\ud658\ud558\uace0 \uc2f6\uc744 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc0c1\ud0dc\uac00 \uce74\uc6b4\ud130\ub97c \ub098\ud0c0\ub0b8\ub2e4\uba74, \uce74\uc6b4\ud130\ub97c \uc99d\uac00\uc2dc\ud0a4\ub294 \ud568\uc218\ub294 \uadf8\uac83\uc758 \ud604\uc7ac \uac12\uc744 \ubc18\ud658\ud558\uace0 \uc2f6\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc774\uc720\ub85c, \uc0c1\ud0dc \ubcc0\ud658\uc790\uc758 \ud0c0\uc785\uc744 \uc77c\ubc18\ud654\ud558\uc5ec \uacb0\uacfc \uac12\ub3c4 \ubc18\ud658\ud558\ub3c4\ub85d \ud558\uba70, \uc774\ub7ec\ud55c \uac12\uc758 \ud0c0\uc785\uc740 ST \ud0c0\uc785\uc758 \ud30c\ub77c\ubbf8\ud130\uac00 \ub41c\ub2e4:\\n```haskell\\ntype ST a = State -> (a, State)\\n```\\n\\\\\\n\uc774\ub7ec\ud55c \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uadf8\ub9bc \ud615\ud0dc\ub85c \ud45c\uc2dc\ub420 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c **s** \ub294 \uc785\ub825 \uc0c1\ud0dc, **s\'** \ub294 \ucd9c\ub825 \uc0c1\ud0dc, **v** \ub294 \uacb0\uacfc \uac12\uc774\ub2e4:\\n\\n![img1](image-1.png)\\n\\n\ubc18\ub300\ub85c, \uc0c1\ud0dc \ubcc0\ud658\uc790\ub294 \uc778\uc790 \uac12\uc744 \ubc1b\uace0 \uc2f6\uc744 \uc218\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub97c \uace0\ub824\ud558\uae30 \uc704\ud574 ST \ud0c0\uc785\uc744 \ub354 \uc77c\ubc18\ud654\ud560 \ud544\uc694\ub294 \uc5c6\ub294\ub370, \uc65c\ub0d0\ud558\uba74 \uc774\ub7ec\ud55c \ub3d9\uc791\uc740 \uc774\ubbf8 **\ucee4\ub9c1(currying)** \uc744 \ud65c\uc6a9\ud558\uc5ec \ub2ec\uc131\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ubb38\uc790\ub97c \ubc1b\uc544\uc11c \uc815\uc218\ub97c \ubc18\ud658\ud558\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790\ub294 `Char -> ST Int` \ud0c0\uc785\uc744 \uac00\uc9c8 \uac83\uc774\uba70, \uc774\ub294 \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\uc774 \ucee4\ub9c1\ub41c \ud568\uc218 \ud0c0\uc785\uc778 `Char -> State -> (Int, State)`\ub97c \ucd95\uc57d\ud55c \uac83\uc774\ub2e4:\\n\\n![img2](image-2.png)\\n\\nST\uac00 \ud30c\ub77c\ubbf8\ud130\ud654\ub41c \ud0c0\uc785\uc774\ub77c\ub294 \uc810\uc744 \uac10\uc548\ud560 \ub54c, \uc774\ub97c **\ubaa8\ub098\ub4dc(monad)** \ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc0c1\ud0dc\uac00 \uc788\ub294(stateful) \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub294 \ub370 `do` \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc2dc\ub3c4\ud558\ub294 \uac83\uc740 \uc790\uc5f0\uc2a4\ub7fd\ub2e4. \ud558\uc9c0\ub9cc, `type` \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud574 \uc120\uc5b8\ub41c \ud0c0\uc785\uc740 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \ub420 \uc218 \uc5c6\ub2e4. \ub530\ub77c\uc11c, \uba3c\uc800 newtype \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec `ST` \ud0c0\uc785\uc744 \uc7ac\uc815\uc758\ud558\ub294\ub370, \uc5ec\uae30\uc5d0\ub294 **S** \ub77c\uace0 \ubd80\ub974\ub294 **\ub354\ubbf8 \uc0dd\uc131\uc790(dummy constructor)** \ub97c \ub3c4\uc785\ud574\uc57c \ud55c\ub2e4:\\n```haskell\\nnewtype ST a = S (State -> (a, State))\\n```\\n\\n\ub610\ud55c \uc774 \ud0c0\uc785\uc744 \uc704\ud574 \ub354\ubbf8 \uc0dd\uc131\uc790\ub97c \ub2e8\uc21c\ud788 \uc81c\uac70\ud558\ub294 \ud2b9\uc218 \ubaa9\uc801\uc758 \uc801\uc6a9 \ud568\uc218(application function)\ub97c \uc815\uc758\ud558\ub294 \uac83\uc774 \ud3b8\ub9ac\ud558\ub2e4:\\n```haskell\\napp :: ST a -> State -> (a, State)\\napp (S st) x = st x\\n```\\n\\n\ud30c\ub77c\ubbf8\ud130\ud654\ub41c ST \ud0c0\uc785\uc744 \ubaa8\ub098\ub4dc\ub85c \ub9cc\ub4e4\uae30 \uc704\ud55c \uccab \ub2e8\uacc4\ub85c\uc11c, \uc774 \ud0c0\uc785\uc744 \uac04\ub2e8\ud788 **\ud391\ud130(functor)** \ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Functor ST where\\n    -- fmap :: (a -> b) -> ST a -> ST b\\n    fmap g st = S (\\\\s -> let (x,s\') = app st s in (g x, s\'))\\n```\\n\uc989, `fmap`\uc740 \ub2e4\uc74c \uadf8\ub9bc\uc5d0\uc11c\ucc98\ub7fc \uc0c1\ud0dc \ubcc0\ud658\uc790\uc758 \uacb0\uacfc \uac12\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud558\uac8c \ud574\uc900\ub2e4.\\n\\n![img3](image-3.png)\\n\\n\uc704 \uc815\uc758\uc5d0 \uc0ac\uc6a9\ub41c \ud558\uc2a4\ucf08\uc758 `let` \uba54\ucee4\ub2c8\uc998\uc740 `where` \uba54\ucee4\ub2c8\uc998\uacfc \uc720\uc0ac\ud558\uc9c0\ub9cc, \ud568\uc218 \uc815\uc758 \uc218\uc900\uc774 \uc544\ub2cc \ud45c\ud604\uc2dd \uc218\uc900\uc5d0\uc11c local definition\uc744 \ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4\ub294 \uc810\uc774 \ub2e4\ub974\ub2e4. \\n\uacb0\uacfc\uc801\uc73c\ub85c, `ST` \ud0c0\uc785\uc740 **\uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130(applicative functor)** \ub85c \ub9cc\ub4e4\uc5b4\uc9c8 \uc218 \uc788\ub2e4.\\n\\n```haskell\\ninstance Applicative ST where\\n    -- pure :: a -> ST a\\n    pure x = S (\\\\s -> (x,s))\\n    \\n    -- (<*>) :: ST (a -> b) -> ST a -> ST b\\n    stf <*> stx = S (\\\\s ->\\n    let (f,s\')   = app stf s\\n        (x,s\'\')  = app stx s\' in (f x, s\'\'))\\n```\\n\uc774 \uacbd\uc6b0, `pure` \ud568\uc218\ub294 \uc5b4\ub5a4 \uac12\uc744 \uc0c1\ud0dc \ubcc0\uacbd \uc5c6\uc774 \uadf8\ub300\ub85c \ubc18\ud658\ud558\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790\ub85c \ubcc0\ud658\ud55c\ub2e4.\\n\\n![img4](image-4.png)\\n\\n\ud55c\ud3b8, `<*>` \uc5f0\uc0b0\uc790\ub294 \ud568\uc218\ub97c \ubc18\ud658\ud558\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790\ub97c \uc778\uc790\ub97c \ubc18\ud658\ud558\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790\uc5d0 \uc801\uc6a9\ud558\uc5ec, \uadf8 \ud568\uc218\ub97c \uc778\uc790\uc5d0 \uc801\uc6a9\ud55c \uacb0\uacfc\ub97c \ubc18\ud658\ud558\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790\ub97c \ub9cc\ub4e4\uc5b4\ub0b8\ub2e4.\\n\\n![img5](image-5.png)\\n\\n\uae30\ud638 `$`\ub294 \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc801\uc6a9\uc744 \ub098\ud0c0\ub0b4\uba70, `f $ x` = `f x`\ub85c \uc815\uc758\ub41c\ub2e4.\\n\\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c, `ST`\uc5d0 \ub300\ud55c \ubaa8\ub098\ub4dc \uc778\uc2a4\ud134\uc2a4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ub41c\ub2e4.\\n```haskell\\ninstance Monad ST where\\n    -- (>>=) :: ST a -> (a -> ST b) -> ST b\\n    st >>= f = S (\\\\s -> let (x,s\') = app st s in app (f x) s\')\\n```\\n\uc989, `st >>= f`\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790 `st`\ub97c \ucd08\uae30 \uc0c1\ud0dc `s`\uc5d0 \uc801\uc6a9\ud55c \ub2e4\uc74c, \uadf8 \uacb0\uacfc \uac12 `x`\uc5d0 \ud568\uc218 `f`\ub97c \uc801\uc6a9\ud558\uc5ec \uc0c8\ub85c\uc6b4 \uc0c1\ud0dc \ubcc0\ud658\uc790 `f x`\ub97c \uc5bb\ub294\ub2e4. \uadf8\ub9ac\uace0 \uc774 `f x`\ub97c \uc0c8\ub85c\uc6b4 \uc0c1\ud0dc `s\'`\uc5d0 \uc801\uc6a9\ud558\uc5ec \ucd5c\uc885 \uacb0\uacfc\ub97c \uc5bb\ub294\ub2e4.\\n\\n![img6](image-6.png)\\n\\n\uc774\ub7f0 \ubc29\uc2dd\uc73c\ub85c, \uc0c1\ud0dc \ubaa8\ub098\ub4dc\uc758 **\ubc14\uc778\ub4dc(bind) \uc5f0\uc0b0\uc790(>>=)** \ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790\ub4e4\uc758 \uc21c\ucc28\uc801 \uc2e4\ud589\uacfc \uadf8 \uacb0\uacfc \uac12\uc758 \ucc98\ub9ac\ub97c \ud1b5\ud569\ud55c\ub2e4. `>>=`\uc758 \uc815\uc758 \ub0b4\uc5d0\uc11c\ub294 \uccab \ubc88\uc9f8 \uc778\uc790\uc758 \uacb0\uacfc \uac12 `x`\uc5d0 \ub530\ub77c \ub3d9\uc791\uc774 \ub2ec\ub77c\uc9c8 \uc218 \uc788\ub294 \uc0c8\ub85c\uc6b4 \uc0c1\ud0dc \ubcc0\ud658\uc790 `f x`\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\ub294 \ubc18\uba74, `<*>`\uc5d0\uc11c\ub294 \uc778\uc790\ub85c \uba85\uc2dc\uc801\uc73c\ub85c \uc81c\uacf5\ub41c \uc0c1\ud0dc \ubcc0\ud658\uc790\ub9cc \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\ud55c\ub41c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud574\uc57c \ud55c\ub2e4. \ub530\ub77c\uc11c `>>=` \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uba74 \ub354 \ud070 \uc720\uc5f0\uc131\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4.\\n\\n### Relabelling trees\\nstateful programming\uc758 \ud55c \uc608\uc2dc\ub85c\uc11c, \ud2b8\ub9ac\uc758 \ub77c\ubca8\uc744 \ub2e4\uc2dc \ubd99\uc774\ub294 \ud568\uc218\ub97c \uac1c\ubc1c\ud574 \ubcf4\uc790.  \\n\uc774\ub97c \uc704\ud574 \ub2e4\uc74c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\\n```haskell\\ndata Tree a = Leaf a | Node (Tree a) (Tree a)\\n    deriving Show\\n```\\n\\n\uc608\ub97c \ub4e4\uc5b4, \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\ntree :: Tree Char\\ntree = Node (Node (Leaf \'a\') (Leaf \'b\')) (Leaf \'c\')\\n```\\n\uc774\uc81c \uc774\ub7f0 \ud2b8\ub9ac \ub0b4\uc758 \uac01 \ub9ac\ud504(leaf)\ub97c \uace0\uc720\ud55c, \uc989 \uc0c8\ub85c\uc6b4(fresh) \uc815\uc218\ub85c \uc7ac\ub77c\ubca8\ub9c1\ud558\ub294 \ud568\uc218\ub97c \uc815\uc758\ud558\ub294 \ubb38\uc81c\ub97c \uc0dd\uac01\ud574 \ubcf4\uc790. \ud558\uc2a4\ucf08\uacfc \uac19\uc740 \uc21c\uc218 \uc5b8\uc5b4\uc5d0\uc11c\ub294 \ub2e4\uc74c\uc5d0 \uc0ac\uc6a9\ud560 \uc0c8 \uc815\uc218\ub97c \ucd94\uac00 \uc778\uc790\ub85c \ubc1b\uace0, \uadf8 \ub2e4\uc74c \uc0ac\uc6a9\ud560 \uc815\uc218\ub97c \ucd94\uac00 \uacb0\uacfc\ub85c \ubc18\ud658\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc774\ub97c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nrlabel :: Tree a -> Int -> (Tree Int, Int)\\nrlabel (Leaf _) n = (Leaf n, n+1)\\nrlabel (Node l r) n = (Node l\' r\', n\'\')\\n    where\\n        (l\',n\')   = rlabel l n\\n        (r\',n\'\')  = rlabel r n\'\\n```\\n\uadf8\ub7ec\uba74, \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uacb0\uacfc\ub97c \uc5bb\ub294\ub2e4.\\n```haskell\\n> fst (rlabel tree 0)\\nNode (Node (Leaf 0) (Leaf 1)) (Leaf 2)\\n```\\n\ud558\uc9c0\ub9cc `rlabel`\uc758 \uc815\uc758\ub294 \uc815\uc218 \uc0c1\ud0dc\ub97c \uacc4\uc0b0 \uacfc\uc815 \uc804\uccb4\uc5d0 \uac78\uccd0 \uba85\uc2dc\uc801\uc73c\ub85c \uc804\ub2ec\ud574\uc57c \ud560 \ud544\uc694\uc131 \ub54c\ubb38\uc5d0 \ubcf5\uc7a1\ud558\ub2e4. \ub354 \uac04\ub2e8\ud55c \uc815\uc758\ub97c \uc5bb\uae30 \uc704\ud574, \uba3c\uc800 `Tree a -> Int -> (Tree Int, Int)` \ud0c0\uc785\uc774 \uc0c1\ud0dc \ubcc0\ud658\uc790 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc5ec `Tree a -> ST (Tree Int)`\ub85c \ub2e4\uc2dc \uc791\uc131\ub420 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud55c\ub2e4. \uc5ec\uae30\uc11c \uc0c1\ud0dc\ub294 \ub2e4\uc74c\uc5d0 \uc0ac\uc6a9\ud560 \uc0c8 \uc815\uc218\uc774\ub2e4. \uc774\ub7ec\ud55c \ub2e4\uc74c \uc815\uc218\ub294 \ud604\uc7ac \uc0c1\ud0dc\ub97c \uacb0\uacfc\ub85c, \uadf8\ub9ac\uace0 \ub2e4\uc74c \uc815\uc218\ub97c \uc0c8\ub85c\uc6b4 \uc0c1\ud0dc\ub85c \ubc18\ud658\ud558\ub294 \uc0c1\ud0dc \ubcc0\ud658\uc790\ub97c \uc815\uc758\ud568\uc73c\ub85c\uc368 \uc0dd\uc131\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nfresh :: ST Int\\nfresh = S (\\\\n -> (n, n+1))\\n```\\n`ST`\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc774\uc6a9\ud558\uc5ec, \uc774\uc81c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \uc791\uc131\ub41c \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 \uc7ac\ub77c\ubca8\ub9c1 \ud568\uc218\ub97c \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nalabel :: Tree a -> ST (Tree Int)\\nalabel (Leaf _) = Leaf <$> fresh\\nalabel (Node l r) = Node <$> alabel l <*> alabel r\\n```\\n(\ucc38\uace0: `g <$> x <*> y`\ub294 `pure g <*> x <*> y`\uc640 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud55c\ub2e4.)  \\n\uc774 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc740 \uc774\uc804\uacfc \ub3d9\uc77c\ud55c \uacb0\uacfc\ub97c \uc900\ub2e4.\\n```haskell\\n> fst (app (alabel tree) 0)\\nNode (Node (Leaf 0) (Leaf 1)) (Leaf 2)\\n```\\n\ud558\uc9c0\ub9cc \uadf8 \uc815\uc758\ub294 \ud6e8\uc52c \ub354 \uac04\ub2e8\ud558\ub2e4. \uae30\ubcf8 \ucf00\uc774\uc2a4(base case)\uc5d0\uc11c\ub294 \uc774\uc81c `Leaf` \uc0dd\uc131\uc790\ub97c \ub2e4\uc74c \uc0c8 \uc815\uc218\uc5d0 \uc801\uc6a9\ud558\uae30\ub9cc \ud558\uba74 \ub418\uace0, \uc7ac\uadc0 \ucf00\uc774\uc2a4\uc5d0\uc11c\ub294 \ub450 \uc11c\ube0c\ud2b8\ub9ac\ub97c \ub77c\ubca8\ub9c1\ud55c \uacb0\uacfc\uc5d0 `Node` \uc0dd\uc131\uc790\ub97c \uc801\uc6a9\ud55c\ub2e4. \ud2b9\ud788, \ud504\ub85c\uadf8\ub798\uba38\ub294 \ub354 \uc774\uc0c1 \uc815\uc218 \uc0c1\ud0dc\ub97c \uacc4\uc0b0 \uacfc\uc815\uc5d0 \uc77c\uc77c\uc774 \uc804\ub2ec\ud558\ub294 \uc9c0\ub8e8\ud558\uace0 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b4 \uc791\uc5c5\uc5d0 \ub300\ud574 \uac71\uc815\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. \uc774 \uc791\uc5c5\uc740 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uba54\ucee4\ub2c8\uc998\uc5d0 \uc758\ud574 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac\ub418\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n`ST`\uac00 \ubaa8\ub098\ub4dc\uc774\uae30\ub3c4 \ud558\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc774\uc6a9\ud558\uc5ec, `do` \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud574 \uc774\uc640 \ub3d9\uc77c\ud55c \uae30\ub2a5\uc758 \ubaa8\ub098\ub4dc \ubc84\uc804 \uc7ac\ub77c\ubca8\ub9c1 \ud568\uc218\ub97c \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nmlabel :: Tree a -> ST (Tree Int)\\nmlabel (Leaf _) = do n <- fresh\\n                     return (Leaf n)\\n\\nmlabel (Node l r) = do l\' <- mlabel l\\n                       r\' <- mlabel r\\n                       return (Node l\' r\')\\n```\\n\uc774 \uc815\uc758\ub294 \uc911\uac04 \uacb0\uacfc\uc5d0 \uc774\ub984\uc744 \ubd99\uc5ec\uc918\uc57c \ud55c\ub2e4\ub294 \uc810\uc744 \uc81c\uc678\ud558\uba74 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ubc84\uc804\uacfc \uc720\uc0ac\ud558\ub2e4. `rlabel`\uacfc \uac19\uc740 \ube44-\uc81c\ub124\ub9ad(non-generic) \ud568\uc218\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc640 \ubaa8\ub098\ub4dc \uc2a4\ud0c0\uc77c \ubaa8\ub450\ub85c \uc815\uc758\ub420 \uc218 \uc788\uc744 \ub54c, \uc5b4\ub5a4 \uc815\uc758\ub97c \uc120\ud638\ud560\uc9c0\ub294 \ub300\uccb4\ub85c \ucde8\ud5a5\uc758 \ubb38\uc81c\uc774\ub2e4.\\n\\n### Generic functions\\n\ubaa8\ub098\ub4dc\ub77c\ub294 \uac1c\ub150\uc744 \ucd94\uc0c1\ud654\ud568\uc73c\ub85c\uc368 \uc5bb\ub294 \uc911\uc694\ud55c \uc774\uc810\uc740 \uc5b4\ub5a4 \ubaa8\ub098\ub4dc\uc5d0\ub4e0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 **\uc81c\ub124\ub9ad \ud568\uc218(generic function)** \ub97c \uc815\uc758\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. `Control.Monad` \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\ub294 \ub2e4\uc218\uc758 \uadf8\ub7f0 \ud568\uc218\ub4e4\uc774 \uc81c\uacf5\ub41c\ub2e4.  \\n\uc608\ub97c \ub4e4\uc5b4, \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c `map` \ud568\uc218\uc758 \ubaa8\ub098\ub4dc \ubc84\uc804\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nmapM :: Monad m => (a -> m b) -> [a] -> m [b]\\nmapM f []     = return []\\nmapM f (x:xs) = do y  <- f x\\n                   ys <- mapM f xs\\n                   return (y:ys)\\n```\\n`mapM`\uc740 \uc778\uc790\ub85c \ubc1b\ub294 \ud568\uc218\uc640 \ud568\uc218 \uc790\uccb4\uc758 \ubc18\ud658 \ud0c0\uc785\uc774 \uc774\uc81c \ubaa8\ub098\ub4dc \ud0c0\uc785\uc774\ub77c\ub294 \uc810\uc744 \uc81c\uc678\ud558\uba74 `map`\uacfc \ub3d9\uc77c\ud55c \ud0c0\uc785\uc744 \uac16\ub294\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\uc790. \uc774\uac83\uc774 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294\uc9c0 \uc124\uba85\ud558\uae30 \uc704\ud574, \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uac00 \uc22b\uc790\uc77c \uacbd\uc6b0\uc5d0\ub9cc \uadf8 \ubb38\uc790\ub97c \ud574\ub2f9\ud558\ub294 \uc22b\uc790 \uac12\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \ud568\uc218\ub97c \uc0dd\uac01\ud574 \ubcf4\uc790.\\n```haskell\\nconv :: Char -> Maybe Int\\nconv c | isDigit c = Just (digitToInt c)\\n       | otherwise = Nothing\\n```\\n(`isDigit`\uc640 `digitToInt` \ud568\uc218\ub294 `Data.Char`\uc5d0\uc11c \uc81c\uacf5\ub41c\ub2e4.) `mapM`\uc744 `conv` \ud568\uc218\uc5d0 \uc801\uc6a9\ud558\uba74 \uc22b\uc790 \ubb38\uc790\uc5f4\uc744 \ud574\ub2f9\ud558\ub294 \uc22b\uc790 \uac12\uc758 \ub9ac\uc2a4\ud2b8\ub85c \ubcc0\ud658\ud558\ub294 \uc218\ub2e8\uc744 \uc5bb\uac8c \ub41c\ub2e4. \uc774 \ubcc0\ud658\uc740 \ubb38\uc790\uc5f4\uc758 \ubaa8\ub4e0 \ubb38\uc790\uac00 \uc22b\uc790\uc77c \uacbd\uc6b0\uc5d0\ub9cc \uc131\uacf5\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc2e4\ud328\ud55c\ub2e4.\\n```haskell\\n> mapM conv \\"1234\\"\\nJust [1,2,3,4]\\n\\n> mapM conv \\"123a\\"\\nNothing\\n```\\n\ub2e4\uc74c\uc73c\ub85c, \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c `filter` \ud568\uc218\uc758 \ubaa8\ub098\ub4dc \ubc84\uc804\uc740 `mapM`\uacfc \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c \ud0c0\uc785\uacfc \uc815\uc758\ub97c \uc77c\ubc18\ud654\ud558\uc5ec \uc815\uc758\ub41c\ub2e4.\\n```haskell\\nfilterM :: Monad m => (a -> m Bool) -> [a] -> m [a]\\nfilterM p []     = return []\\nfilterM p (x:xs) = do b  <- p x\\n                      ys <- filterM p xs\\n                      return (if b then x:ys else ys)\\n```\\n\uc608\ub97c \ub4e4\uc5b4, \ub9ac\uc2a4\ud2b8 \ubaa8\ub098\ub4dc\uc758 \uacbd\uc6b0 `filterM`\uc744 \uc0ac\uc6a9\ud558\uba74 \ub9ac\uc2a4\ud2b8\uc758 **\uba71\uc9d1\ud569(powerset)** \uc744 \ud2b9\ud788 \uac04\uacb0\ud558\uac8c \uacc4\uc0b0\ud558\ub294 \uc218\ub2e8\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. \uba71\uc9d1\ud569\uc740 \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc6d0\uc18c\ub97c \ud3ec\ud568\ud558\uac70\ub098 \uc81c\uc678\ud558\ub294 \ubaa8\ub4e0 \uac00\ub2a5\ud55c \uacbd\uc6b0\uc758 \uc218\ub85c \uc8fc\uc5b4\uc9c4\ub2e4.\\n```haskell\\n> filterM (\\\\x -> [True,False]) [1,2,3]\\n[[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]\\n```\\n\ub9c8\uc9c0\ub9c9 \uc608\ub85c, \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c `prelude` \ud568\uc218 `concat :: [[a]] -> [a]`\ub294 \uc784\uc758\uc758 \ubaa8\ub098\ub4dc\uc5d0 \ub300\ud574 \ub2e4\uc74c\uacfc \uac19\uc774 `join` \ud568\uc218\ub85c \uc77c\ubc18\ud654\ub41c\ub2e4.\\n```haskell\\njoin :: Monad m => m (m a) -> m a\\njoin mmx = do mx <- mmx\\n              x  <- mx\\n              return x\\n```\\n\uc774 \ud568\uc218\ub294 \uc911\ucca9\ub41c \ubaa8\ub098\ub4dc \uac12\uc744 \uc77c\ubc18 \ubaa8\ub098\ub4dc \uac12\uc73c\ub85c \ud3c9\ud0c4\ud654(flatten)\ud55c\ub2e4. \ub9ac\uc2a4\ud2b8 \ubaa8\ub098\ub4dc\uc5d0 \ub300\ud574\uc11c\ub294 `concat`\uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud558\ub294 \ud55c\ud3b8, `Maybe` \ubaa8\ub098\ub4dc\uc5d0 \ub300\ud574\uc11c\ub294 \ubc14\uae65\ucabd\uacfc \uc548\ucabd \uac12 \ubaa8\ub450 \uc131\uacf5(`Just`)\uc77c \uacbd\uc6b0\uc5d0\ub9cc \uc131\uacf5\ud55c\ub2e4.\\n```haskell\\n> join [[1,2],[3,4],[5,6]]\\n[1,2,3,4,5,6]\\n\\n> join (Just (Just 1))\\nJust 1\\n\\n> join (Just Nothing)\\nNothing\\n\\n> join Nothing\\nNothing\\n```\\n\\n### Monad laws\\n\ud391\ud130\ub098 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc640 \ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c, \ub450 \ubaa8\ub098\ub4dc \uae30\ubcf8 \uc5f0\uc0b0(primitive)\uc740 \uba87 \uac00\uc9c0 \ub4f1\uc2dd \ubc95\uce59\uc744 \ub9cc\uc871\ud574\uc57c \ud55c\ub2e4.\\n- `return x >>= f` = `f x`\\n- `mx >>= return` = `mx`\\n- `(mx >>= f) >>= g` = `mx >>= (\\\\x -> (f x >>= g))`\\n\\n\uccab \ub450 \ub4f1\uc2dd\uc740 `return`\uacfc `>>=` \uc0ac\uc774\uc758 \uad00\uacc4\uc5d0 \ub300\ud55c \uac83\uc774\ub2e4.\\n\\n**\uccab \ubc88\uc9f8 \ub4f1\uc2dd(\uc88c\ud56d\ub4f1\uc6d0, Left identity)** \uc740, \uc5b4\ub5a4 \uac12\uc744 `return`\ud55c \ub4a4 \uadf8 \uacb0\uacfc\ub97c \ubaa8\ub098\ub4dc \ud568\uc218\uc5d0 \ub118\uae30\ub294 \uac83\uc740 \ub2e8\uc21c\ud788 \uadf8 \ud568\uc218\ub97c \uac12\uc5d0 \uc801\uc6a9\ud558\ub294 \uac83\uacfc \uac19\uc740 \uacb0\uacfc\ub97c \uc8fc\uc5b4\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0b8\ub2e4.\\n\\n**\ub450 \ubc88\uc9f8 \ub4f1\uc2dd(\uc6b0\ud56d\ub4f1\uc6d0, Right identity)** \uc740, \ubaa8\ub098\ub4dc \uacc4\uc0b0\uc758 \uacb0\uacfc\ub97c `return` \ud568\uc218\uc5d0 \ub118\uae30\ub294 \uac83\uc740 \ub2e8\uc21c\ud788 \uadf8 \uacc4\uc0b0\uc744 \uc218\ud589\ud558\ub294 \uac83\uacfc \uac19\uc740 \uacb0\uacfc\ub97c \uc8fc\uc5b4\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0b8\ub2e4.\\n\\n\uc885\ud569\ud558\uba74, \uc774 \ub450 \ub4f1\uc2dd\uc740 (`>>=`\uc758 \ub450 \ubc88\uc9f8 \uc778\uc790\uac00 \ubc14\uc778\ub529 \uc5f0\uc0b0\uc744 \ud3ec\ud568\ud55c\ub2e4\ub294 \uc810\uc744 \uac10\uc548\ud558\uba74) `return`\uc774 `>>=` \uc5f0\uc0b0\uc790\uc5d0 \ub300\ud55c \ud56d\ub4f1\uc6d0(identity)\uc774\ub77c\ub294 \uac83\uc744 \ub9d0\ud574\uc900\ub2e4.\\n\\n**\uc138 \ubc88\uc9f8 \ub4f1\uc2dd(\uacb0\ud569\ubc95\uce59, Associativity)** \uc740 `>>=`\uc640 \uc790\uc2e0 \uc0ac\uc774\uc758 \uad00\uacc4\uc5d0 \ub300\ud55c \uac83\uc73c\ub85c, (`>>=`\uac00 \ubc14\uc778\ub529\uc744 \ud3ec\ud568\ud55c\ub2e4\ub294 \uc810\uc744 \ub2e4\uc2dc \uac10\uc548\ud558\uba74) `>>=`\uac00 \uacb0\ud569\ubc95\uce59\uc744 \ub9cc\uc871\ud568\uc744 \ud45c\ud604\ud55c\ub2e4. \uc774 \ub4f1\uc2dd\uc758 \uc6b0\ubcc0\uc744 \ub2e8\uc21c\ud788 `mx >>= (f >>= g)`\ub85c \uc4f8 \uc218\ub294 \uc5c6\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud574\uc57c \ud558\ub294\ub370, \uc774\ub294 \ud0c0\uc785 \uac80\uc0ac\ub97c \ud1b5\uacfc\ud558\uc9c0 \ubabb\ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc6b0\ub9ac\uac00 \uc9c0\uae08\uae4c\uc9c0 \ubd10\uc628 \ubaa8\ub4e0 \ubaa8\ub098\ub4dc\ub294 \uc704\uc758 \ubc95\uce59\ub4e4\uc744 \ub9cc\uc871\ud55c\ub2e4."}]}}')}}]);