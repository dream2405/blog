"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[749],{1895:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"monads-and-more","metadata":{"permalink":"/blog/monads-and-more","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2025-09-01-hs-ch12/index.md","source":"@site/blog/2025-09-01-hs-ch12/index.md","title":"Monads and more","description":"\ud558\uc2a4\ucf08\uc5d0\uc11c\ub294 parameterised type\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud560 \uc218 \uc788\ub294 \uc5ec\ub7ec \ubc29\ubc95\ub4e4\uc774 \uc788\ub2e4.","date":"2025-09-01T00:00:00.000Z","tags":[{"inline":false,"label":"Haskell","permalink":"/blog/tags/haskell","description":"Haskell tag description"}],"readingTime":19.04,"hasTruncateMarker":true,"authors":[{"name":"dream2405","title":"\uac8c\uc73c\ub978 \ub300\ud559\uc0dd","socials":{"github":"https://github.com/dream2405"},"imageURL":"https://github.com/dream2405.png","key":"dream2405","page":null}],"frontMatter":{"slug":"monads-and-more","title":"Monads and more","authors":["dream2405"],"tags":["haskell"]},"unlisted":false,"nextItem":{"title":"AA","permalink":"/blog/test"}},"content":"\ud558\uc2a4\ucf08\uc5d0\uc11c\ub294 parameterised type\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud560 \uc218 \uc788\ub294 \uc5ec\ub7ec \ubc29\ubc95\ub4e4\uc774 \uc788\ub2e4.\\n\x3c!-- truncate --\x3e\\n\\n## Functors\\n\ub2e4\uc74c\uacfc \uac19\uc740 \uac04\ub2e8\ud55c \ud568\uc218\ub4e4\uc744 \ubcf4\uc790.\\n```haskell\\ninc :: [Int] -> [Int]\\ninc []      = []\\ninc (n:ns)  = n+1 : inc ns\\n\\nsqr :: [Int] -> [Int]\\nsqr []      = []\\nsqr (n:ns)  = n^2 : sqr ns\\n```\\n\uc774 \ub450 \ud568\uc218\uc758 \ucc28\uc774\ub294 \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ub418\ub294 \ud568\uc218 \ubfd0\uc774\ub2e4.  \\n\uc774\ub7ec\ud55c \ud328\ud134\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218 `map`\uc73c\ub85c \uac04\ub2e8\ud788 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n\\n\uc6b0\uc120 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218 `map`\uc744 \uc0b4\ud3b4\ubcf4\uc790.\\n```haskell\\nmap :: (a -> b) -> [a] -> [b]\\nmap f []        = []\\nmap f (x:xs)    = f x : map f xs\\n```\\n\uc704\uc758 \ub450\uac1c\uc758 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud558\uac8c \uc815\uc758\ub41c\ub2e4.\\n```haskell\\ninc = map (+1)\\nsqr = map (^2)\\n```\\n\uc774 \uc608\uc2dc\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774, `map`\uc740 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c\uc758 \uac01 \uc6d0\uc18c\uc5d0 \ub300\ud55c \ud568\uc218\ub97c \ub9e4\ud551 \ud55c\ub2e4.  \\n\uadf8\ub807\ub2e4\uba74, \ub9ac\uc2a4\ud2b8 \ubfd0\ub9cc\uc774 \uc544\ub2cc \ub2e4\ub978 \uc790\ub8cc\uad6c\uc870, \ub354 \ub098\uc544\uac00 \uc5ec\ub7ec parameterised type\ub4e4\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc77c\ubc18\ud654\ud560 \uc218 \uc788\uc9c0 \uc54a\uc744\uae4c?\\n\\n\uc774\ub7ec\ud55c \ub9e4\ud551 \ud568\uc218\ub97c \uc9c0\uc6d0\ud558\ub294 \ud0c0\uc785\uc758 \ud074\ub798\uc2a4\ub97c **Functor**\ub77c\uace0 \ud55c\ub2e4.\\n```haskell\\nclass Functor f where\\n    fmap :: (a -> b) -> f a  -> f b\\n```\\nparameterised type `f`\uac00 `Functor` \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \ub418\ub824\uba74, \uba85\uc2dc\ub41c \ud0c0\uc785\uc758 `fmap` \ud568\uc218\ub97c \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4.  \\n`fmap`\uc740 `a -> b` \ud0c0\uc785\uc758 \ud568\uc218\uc640, \uc6d0\uc18c\uc758 \ud0c0\uc785\uc774 `a`\uc778 `f a` \uad6c\uc870\ub97c \ubc1b\uc544\uc11c, \uadf8 \ud568\uc218\ub97c \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ud55c \uacb0\uacfc\ub85c \uc6d0\uc18c\uc758 \ud0c0\uc785\uc774 `b`\uac00 \ub41c `f b` \uad6c\uc870\ub97c \uc0dd\uc131\ud55c\ub2e4.\\n\\n### \uc608\uc2dc\\n\ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc740 `fmap`\uc744 `map` \ud568\uc218\ub85c \uac04\ub2e8\ud788 \uc815\uc758\ud568\uc73c\ub85c\uc368 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n\\n```haskell\\ninstance Functor [] where\\n    -- fmap :: (a -> b) -> [a] -> [b]\\n    fmap = map\\n```\\n\uc774 \uc120\uc5b8\uc5d0\uc11c `[]` \uae30\ud638\ub294 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc5c6\ub294 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc774\ub294 `[a]` \ud0c0\uc785\uc774 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785 `[]`\uc744 \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 `a`\uc5d0 \uc801\uc6a9\ud55c `[] a`\ub77c\ub294 \ub354 \uc6d0\uc2dc\uc801\uc778 \ud615\ud0dc\ub85c\ub3c4 \uc4f0\uc77c \uc218 \uc788\ub2e4\ub294 \uc0ac\uc2e4\uc5d0 \uadfc\uac70\ud55c\ub2e4.\\n\\n\ub610\ud55c, \uc704 \ucf54\ub4dc\uc5d0\uc11c `fmap`\uc758 \ud0c0\uc785\uc774 \uba85\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ub418\uc9c0 \uc54a\uace0 \uc8fc\uc11d\uc73c\ub85c \uc791\uc131\ub41c \uc810\uc5d0 \uc8fc\ubaa9\ud574\uc57c \ud55c\ub2e4. \uc774\ub294 \ud558\uc2a4\ucf08\uc774 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc5d0 \uc774\ub7ec\ud55c \ud0c0\uc785 \uc815\ubcf4\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc774\ub2e4. \ud558\uc9c0\ub9cc `fmap`\uc758 \uc815\uc758\ub97c \ub4dc\ub7ec\ub0b4\uace0 \ubb38\uc11c\ud654\ub97c \uc704\ud574, \ud0c0\uc785\uc744 \uc8fc\uc11d\uc73c\ub85c \ud3ec\ud568\ud588\ub2e4.\\n\\n\\\\\\n\ub450 \ubc88\uc9f8 \uc608\uc2dc\ub85c, \uc2e4\ud328\ud558\uac70\ub098 \uc131\uacf5\ud560 \uc218 \uc788\ub294 `a` \ud0c0\uc785\uc758 \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ub0b4\uc7a5 \ud0c0\uc785 `Maybe a`\ub97c \ub5a0\uc62c\ub824 \ubcf4\uc790.\\n\\n```haskell\\ndata Maybe a = Nothing | Just a\\n```\\n\ub2e4\uc74c\uacfc \uac19\uc774 \uc801\uc808\ud55c \ud0c0\uc785\uc758 `fmap` \ud568\uc218\ub97c \uc815\uc758\ud558\uba74 \uac04\ub2e8\ud788 `Maybe` \ud0c0\uc785\uc744 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.  \\n(\ud391\ud130\ub97c \ub098\ud0c0\ub0b4\ub294 `f`\uc640\uc758 \ud63c\ub3d9\uc744 \ud53c\ud558\uace0\uc790 \uc778\uc790\ub85c \ubc1b\ub294 \ud568\uc218\ub97c `g`\ub77c\uace0 \ubd80\ub984)\\n```haskell\\ninstance Functor Maybe where\\n    -- fmap :: (a -> b) -> Maybe a -> Maybe b\\n    fmap _ Nothing = Nothing\\n    fmap g (Just x) = Just (g x)\\n```\\n\uc989, \uc2e4\ud328\ud55c \uac12(`Nothing`)\uc5d0 \ud568\uc218\ub97c \ub9e4\ud551\ud558\uba74 \uc2e4\ud328\uac00 \uadf8\ub300\ub85c \uc804\ud30c\ub418\ub294 \uacb0\uacfc\uac00 \ub098\uc624\uace0, \uc131\uacf5\ud55c \uac12(`Just`)\uc758 \uacbd\uc6b0\uc5d0\ub294 \ub0b4\ubd80 \uac12\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud55c \ud6c4 \ub2e4\uc2dc \ud0dc\uadf8\ub97c \ubd99\uc778\ub2e4. \\n\\n\uc0ac\uc6a9 \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> fmap (+1) Nothing\\nNothing\\n\\n> fmap (*2) (Just 3)\\nJust 6\\n\\n> fmap not (Just False)\\nJust True\\n```\\n\\n\\\\\\n\uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785 \ub610\ud55c \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, leaf\uc5d0 \ub370\uc774\ud130\ub97c \uac16\ub294 \uc774\uc9c4 \ud2b8\ub9ac \ud0c0\uc785\uc744 \uc120\uc5b8\ud55c\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790.\\n```haskell\\ndata Tree a = Leaf a | Node (Tree a) (Tree a)\\n    deriving Show\\n```\\n`deriving Show` \uad6c\ubb38\uc740 \ud2b8\ub9ac\uac00 \ud654\uba74\uc5d0 \ud45c\uc2dc\ub420 \uc218 \uc788\ub3c4\ub85d \ubcf4\uc7a5\ud55c\ub2e4. \uadf8 \ud6c4, \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785 `Tree`\ub294 \uc8fc\uc5b4\uc9c4 \ud568\uc218\ub97c \ud2b8\ub9ac\uc758 \uac01 \uc78e \uac12\uc5d0 \uc801\uc6a9\ud558\ub294 `fmap` \ud568\uc218\ub97c \uc815\uc758\ud568\uc73c\ub85c\uc368 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Functor Tree where\\n    -- fmap :: (a -> b) -> Tree a -> Tree b\\n    fmap g (Leaf x) = Leaf (g x)\\n    fmap g (Node l r) = Node (fmap g l) (fmap g r)\\n```\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> fmap length (Leaf \\"abc\\")\\nLeaf 3\\n\\n> fmap even (Node (Leaf 1) (Leaf 2))\\nNode (Leaf False) (Leaf True)\\n```\\n\ud558\uc2a4\ucf08\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ub9ce\uc740 \ud391\ud130 `f`\ub294 \uc704 \uc138 \uc608\uc2dc\uc640 \uc720\uc0ac\ud558\ub2e4. \uc989, `f a`\uac00 `a` \ud0c0\uc785\uc758 \uc6d0\uc18c\ub97c \ud3ec\ud568\ud558\ub294 \uc790\ub8cc \uad6c\uc870\ub77c\ub294 \uc758\ubbf8\uc5d0\uc11c \ub54c\ub85c **\ucee8\ud14c\uc774\ub108 \ud0c0\uc785(container type)** \uc774\ub77c \ubd88\ub9ac\uba70, `fmap`\uc740 \uc8fc\uc5b4\uc9c4 \ud568\uc218\ub97c \uac01 \uc6d0\uc18c\uc5d0 \uc801\uc6a9\ud55c\ub2e4.\\n\\n\ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uac00 \uc774 \ud328\ud134\uc5d0 \ub4e4\uc5b4\ub9de\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `IO` \ud0c0\uc785\uc740 \uc77c\ubc18\uc801\uc778 \uc758\ubbf8\uc758 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785\uc774 \uc544\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uadf8 \uac12\uc740 \uc6b0\ub9ac\uac00 \ub0b4\ubd80 \uad6c\uc870\uc5d0 \uc811\uadfc\ud560 \uc218 \uc5c6\ub294 \uc785\ucd9c\ub825 \uc561\uc158(action)\uc744 \ub098\ud0c0\ub0b4\uae30 \ub54c\ubb38\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub294 \uc27d\uac8c \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Functor IO where\\n    -- fmap :: (a -> b) -> IO a -> IO b\\n    fmap g mx = do {x <- mx; return (g x)}\\n```\\n\uc774 \uacbd\uc6b0, `fmap`\uc740 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 \uc561\uc158\uc758 \uacb0\uacfc \uac12\uc5d0 \ud568\uc218\ub97c \uc801\uc6a9\ud558\uba70, \uc774\ub97c \ud1b5\ud574 \uadf8\ub7ec\ud55c \uac12\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294 \uc218\ub2e8\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> fmap show (return True)\\n\\"True\\"\\n```\\n\\n\\\\\\n\ud391\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \ud575\uc2ec\uc801\uc778 \uc774\uc810 \ub450 \uac00\uc9c0\\n1. `fmap` \ud568\uc218\ub294 \ud391\ud130\uc758 \uc131\uc9c8\uc744 \ub9cc\uc871\ud558\ub294(functorial) \uc5b4\ub5a4 \uad6c\uc870\uc758 \uc6d0\uc18c\ub4e0 \ucc98\ub9ac\ud558\ub294 \ub370 \uc0ac\uc6a9\ub428  \\n\uc989, \uac01 \uc778\uc2a4\ud134\uc2a4\ub9c8\ub2e4 \ubcc4\uac1c\uc758 \ud568\uc218 \uc774\ub984\uc744 \ub9cc\ub4e4\uc5b4\ub0bc \ud544\uc694 \uc5c6\uc774, \ubcf8\uc9c8\uc801\uc73c\ub85c \ub3d9\uc77c\ud55c \uc5ed\ud560\uc744 \ud558\ub294 \ud568\uc218\ub4e4\uc5d0 \ub300\ud574 \uac19\uc740 \uc774\ub984\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.\\n2. \uc5b4\ub5a4 \ud391\ud130\uc5d0\ub098 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc77c\ubc18\ud654\ub41c(generic) \ud568\uc218\ub97c \uc815\uc758  \\n\uc608\ub97c \ub4e4\uc5b4, \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc815\uc218\ub97c 1\uc529 \uc99d\uac00\uc2dc\ud0a4\ub358 \uc774\uc804\uc758 \ud568\uc218\ub294 `map` \ub300\uc2e0 `fmap`\uc744 \uc0ac\uc6a9\ud558\uae30\ub9cc \ud558\uba74 \uc5b4\ub5a4 \ud391\ud130 \ud0c0\uc785\uc5d0\ub3c4 \uc801\uc6a9\ub418\ub3c4\ub85d \uc77c\ubc18\ud654\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\ninc :: Functor f => f Int -> f Int\\ninc = fmap (+1)\\n```\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4\\n```haskell\\n> inc (Just 1)\\nJust 2\\n\\n> inc [1,2,3,4,5]\\n[2,3,4,5,6]\\n\\n> inc (Node (Leaf 1) (Leaf 2))\\nNode (Leaf 2) (Leaf 3)\\n```\\n\\n### Functor laws\\n\uba85\uc2dc\ub41c \ud0c0\uc785\uc758 `fmap` \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0\ub3c4, \ud391\ud130\ub294 \ub450 \uac00\uc9c0 \ub4f1\uc2dd \ubc95\uce59\uc744 \ub9cc\uc871\ud574\uc57c \ud55c\ub2e4.\\n- `fmap id` = `id`\\n- `fmap (g . h)` = `fmap g . fmap h`\\n\\n\uccab \ubc88\uc9f8 \ub4f1\uc2dd\uc740 `fmap`\uc774 **\ud56d\ub4f1 \ud568\uc218(identity function)\ub97c \ubcf4\uc874**\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.  \\n\uc989, `fmap`\uc744 \ud56d\ub4f1 \ud568\uc218\uc5d0 \uc801\uc6a9\ud558\uba74 \uacb0\uacfc\ub85c \uac19\uc740 \ud56d\ub4f1 \ud568\uc218\ub97c \ubc18\ud658\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ub4f1\uc2dd\uc5d0\uc11c `id`\ub294 \ub450 \ubc88 \ub098\ud0c0\ub098\uc9c0\ub9cc \uc11c\ub85c \ud0c0\uc785\uc774 \ub2e4\ub974\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud574\uc57c \ud55c\ub2e4. \uc88c\ubcc0\uc758 `id`\ub294 `a -> a` \ud0c0\uc785\uc744 \uac00\uc9c0\ubbc0\ub85c `fmap id`\uc758 \ud0c0\uc785\uc740 `f a -> f a`\uac00 \ub41c\ub2e4. \ub530\ub77c\uc11c \ub4f1\uc2dd\uc774 \uc131\ub9bd\ud558\ub824\uba74 \uc6b0\ubcc0\uc758 `id` \ub610\ud55c `f a -> f a` \ud0c0\uc785\uc744 \uac00\uc838\uc57c\ub9cc \ud55c\ub2e4.\\n\\n\ub450 \ubc88\uc9f8 \ub4f1\uc2dd\uc740 `fmap`\uc774 **\ud568\uc218 \ud569\uc131\uc744 \ubcf4\uc874**\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.  \\n\uc989, \ub450 \ud568\uc218\uc758 \ud569\uc131\uc5d0 `fmap`\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc740, \ub450 \ud568\uc218 \uac01\uac01\uc5d0 `fmap`\uc744 \uc801\uc6a9\ud55c \ub4a4 \uadf8 \uacb0\uacfc\ub97c \ud569\uc131\ud558\ub294 \uac83\uacfc \uacb0\uacfc\uac00 \uac19\ub2e4. \uc774 \ud569\uc131\uc774 \ud0c0\uc785 \uac80\uc0ac\ub97c \ud1b5\uacfc\ud558\ub824\uba74, \uad6c\uc131 \uc694\uc18c\uc778 \ud568\uc218 `g`\uc640 `h`\ub294 \uac01\uac01 `b -> c`\uc640 `a -> b` \ud0c0\uc785\uc744 \uac00\uc838\uc57c \ud55c\ub2e4.\\n\\n`fmap`\uc758 \ub2e4\ud615\uc801 \ud0c0\uc785\uacfc \uacb0\ud569\ub41c \uc774 \ud391\ud130 \ubc95\uce59\ub4e4\uc740 fmap\uc774 \uc2e4\uc81c\ub85c \ub9e4\ud551(mapping) \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub3c4\ub85d \ubcf4\uc7a5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub9ac\uc2a4\ud2b8\uc758 \uacbd\uc6b0 \uc774 \ubc95\uce59\ub4e4\uc740 \uc6d0\uc18c\uac00 \ucd94\uac00\ub418\uac70\ub098, \uc81c\uac70\ub418\uac70\ub098, \uc7ac\ubc30\uc5f4\ub418\uc9c0 \uc54a\uace0 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\uc758 \uad6c\uc870\uac00 \ubcf4\uc874\ub428\uc744 \ubcf4\uc7a5\ud55c\ub2e4. \\n\\n\ub9cc\uc57d \ub0b4\uc7a5 \ub9ac\uc2a4\ud2b8 \ud391\ud130\ub97c \ub9ac\uc2a4\ud2b8 \uc6d0\uc18c\uc758 \uc21c\uc11c\ub97c \ub4a4\uc9d1\ub294 `fmap`\uc758 \ub300\uccb4 \ubc84\uc804\uc73c\ub85c \uad50\uccb4\ud588\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790.\\n```haskell\\ninstance Functor [] where\\n    -- fmap :: (a -> b) -> f a -> f b\\n    fmap g []     = []\\n    fmap g (x:xs) = fmap g xs ++ [g x]\\n```\\n(\ub9cc\uc57d \uc774 \uc608\uc81c\ub97c GHCi\uc5d0\uc11c \uc2e4\ud589\ud574\ubcf4\uace0 \uc2f6\ub2e4\uba74, \ub0b4\uc7a5 \ub9ac\uc2a4\ud2b8 \ud391\ud130\uc640\uc758 \ucda9\ub3cc\uc744 \ud53c\ud558\uae30 \uc704\ud574 \uc704 \uc120\uc5b8\uc744 \uc218\uc815\ud558\uc5ec \uc790\uc2e0\ub9cc\uc758 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc744 \uba3c\uc800 \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4.) \uc774 \uc120\uc5b8\uc740 \ud0c0\uc785\uc740 \uc62c\ubc14\ub974\uc9c0\ub9cc, \ub2e4\uc74c \uc608\uc81c\uc5d0\uc11c \ubcf4\ub4ef\uc774 \ud391\ud130 \ubc95\uce59\uc744 \ub9cc\uc871\ud558\uc9c0 \ubabb\ud55c\ub2e4.\\n```haskell\\n> fmap id [1,2]\\n[2,1]\\n\\n> id [1,2]\\n[1,2]\\n\\n> fmap (not . even) [1,2]\\n[False,True]\\n\\n> (fmap not . fmap even) [1,2]\\n[True,False]\\n```\\n\uc6b0\ub9ac\uac00 \uc608\uc81c \uc139\uc158\uc5d0\uc11c \uc815\uc758\ud588\ub358 \ubaa8\ub4e0 \ud391\ud130\ub4e4\uc740 \ud391\ud130 \ubc95\uce59\uc744 \ub9cc\uc871\ud55c\ub2e4. \uc0ac\uc2e4, \ud558\uc2a4\ucf08\uc758 \uc5b4\ub5a4 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc5d0 \ub300\ud574, \ud544\uc694\ud55c \ubc95\uce59\ub4e4\uc744 \ub9cc\uc871\ud558\ub294 `fmap` \ud568\uc218\ub294 \uae30\uaecf\ud574\uc57c \ud558\ub098\ubfd0\uc774\ub2e4. \uc989, \uc8fc\uc5b4\uc9c4 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc744 \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4\uba74, \uadf8 \ubc29\ubc95\uc740 \ub2e8 \ud558\ub098\ubfd0\uc774\ub77c\ub294 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uc6b0\ub9ac\uac00 \uc815\uc758\ud588\ub358 \ub9ac\uc2a4\ud2b8, `Maybe`, `Tree`, `IO`\uc5d0 \ub300\ud55c \uc778\uc2a4\ud134\uc2a4\ub4e4\uc740 \ubaa8\ub450 \uc720\uc77c\ud558\uac8c \uacb0\uc815\ub41c \uac83\uc774\ub2e4.\\n\\n## Applicatives\\n\ud391\ud130\ub294 \uad6c\uc870\uc758 \uac01 \uc6d0\uc18c \uc704\ub85c \ud568\uc218\ub97c \ub9e4\ud551\ud55c\ub2e4\ub294 \uc544\uc774\ub514\uc5b4\ub97c \ucd94\uc0c1\ud654\ud55c\ub2e4. \uc774\uc81c \uc774 \uc544\uc774\ub514\uc5b4\ub97c \uc77c\ubc18\ud654\ud558\uc5ec, \ub2e8\uc77c \uc778\uc790\ub97c \uac16\ub294 \ud568\uc218\uc5d0 \uc81c\uc57d\ub418\ub294 \ub300\uc2e0 \uc784\uc758\uc758 \uac1c\uc218\uc758 \uc778\uc790\ub97c \uac16\ub294 \ud568\uc218\ub97c \ub9e4\ud551\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790. \ub354 \uc815\ud655\ud788\ub294, \ub2e4\uc74c\uacfc \uac19\uc740 \ud0c0\uc785\uc744 \uac16\ub294 `fmap` \ud568\uc218\ub4e4\uc758 \uacc4\uce35\uc744 \uc815\uc758\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uc790.\\n```haskell\\nfmap0 :: a -> f a\\nfmap1 :: (a -> b) -> f a -> f b\\nfmap2 :: (a -> b -> c) -> f a -> f b -> f c\\nfmap3 :: (a -> b -> c -> d) -> f a -> f b -> f c -> f d\\n.\\n.\\n.\\n```\\n`fmap1`\uc740 `fmap`\uc758 \ub2e4\ub978 \uc774\ub984\uc77c \ubfd0\uc774\uace0, `fmap0`\ub294 \ub9e4\ud551\ub418\ub294 \ud568\uc218\uac00 \uc778\uc790\ub97c \uac16\uc9c0 \uc54a\ub294 \ud1f4\ud654\ub41c(degenerate) \uacbd\uc6b0\uc774\ub2e4. \ud55c \uac00\uc9c0 \uac00\ub2a5\ud55c \uc811\uadfc\ubc95\uc740 \uac01 \uacbd\uc6b0\uc5d0 \ub300\ud574 \ud391\ud130 \ud074\ub798\uc2a4\uc758 \ud2b9\ubcc4\ud55c \ubc84\uc804(Functor0, Functor1, Functor2 \ub4f1)\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\uba74 \uc608\ub97c \ub4e4\uc5b4 \ub2e4\uc74c\uacfc \uac19\uc774 \uc4f8 \uc218 \uc788\ub2e4.\\n```haskell\\n> fmap2 (+) (Just 1) (Just 2)\\nJust 3\\n```\\n\ud558\uc9c0\ub9cc \uc774 \ubc29\ubc95\uc740 \uc5ec\ub7ec \uba74\uc5d0\uc11c \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \uc54a\ub2e4.\\n- \ubaa8\ub4e0 \ud391\ud130 \ud074\ub798\uc2a4\ub4e4\uc774 \uc720\uc0ac\ud55c \ud328\ud134\uc744 \ub530\ub984\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \uac01 \ubc84\uc804\uc744 \uc218\ub3d9\uc73c\ub85c \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4.\\n- \ubb34\ud55c\ud788 \ub9ce\uc740 \ud074\ub798\uc2a4\uac00 \uc788\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \uc720\ud55c\ud55c \uc218\ub9cc \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, \uc5bc\ub9c8\ub098 \ub9ce\uc740 \ud074\ub798\uc2a4\ub97c \uc120\uc5b8\ud574\uc57c \ud560\uc9c0 \uba85\ud655\ud558\uc9c0 \uc54a\ub2e4.\\n\\n`(a -> b) -> f a -> f b` \ud0c0\uc785\uc758 `fmap`\uc744 `(a -> b) -> a -> b` \ud0c0\uc785\uc758 \ub0b4\uc7a5 \ud568\uc218 \uc801\uc6a9 \uc5f0\uc0b0\uc790\ub97c \uc77c\ubc18\ud654\ud55c \uac83\uc73c\ub85c \uac04\uc8fc\ud55c\ub2e4\uba74, \uc6d0\ud558\ub294 \ub3d9\uc791\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574 \uc77c\uc885\uc758 **\ucee4\ub9c1(currying)** \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub77c \uae30\ub300\ud560 \uc218 \uc788\ub2e4. \ud2b9\ud788, \uc6b0\ub9ac\ub294 `add x y = x + y`\uc640 \uac19\uc740 \uc815\uc758\uc5d0\uc11c \ucee4\ub9c1\uc5d0 \uc758\uc874\ud560 \ubfd0, \uc778\uc790 \uac1c\uc218\uac00 \ub2e4\ub978 \ud568\uc218\ub4e4\uc744 \uc704\ud574 \ud2b9\ubcc4\ud55c \ubc84\uc804\uc758 \uc801\uc6a9(application)\uc744 \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4.\\n\\n\\\\\\n\ucee4\ub9c1(currying)\uc758 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba74, \uc784\uc758\uc758 \uc778\uc790 \uac1c\uc218\ub97c \uac16\ub294 \ud568\uc218\ub97c \uc704\ud55c `fmap`\uc758 \ubc84\uc804\uc740 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uae30\ubcf8 \ud568\uc218\uc758 \ud0c0\uc785\uc73c\ub85c \uad6c\uc131\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\npure :: a -> f a\\n(<*>) :: f (a -> b) -> f a -> f b\\n```\\n\uc989, `pure`\ub294 `a` \ud0c0\uc785\uc758 \uac12\uc744 `f a` \ud0c0\uc785\uc758 \uad6c\uc870\ub85c \ubcc0\ud658\ud558\ub294 \ubc18\uba74, `<*>`\ub294 \uc778\uc790\ub85c \uc8fc\uc5b4\uc9c0\ub294 \ud568\uc218, \uc778\uc790 \uac12, \uadf8\ub9ac\uace0 \uacb0\uacfc \uac12\uc774 \ubaa8\ub450 `f` \uad6c\uc870 \uc548\uc5d0 \ud3ec\ud568\ub418\ub294, \uc77c\ubc18\ud654\ub41c \ud615\ud0dc\uc758 \ud568\uc218 \uc801\uc6a9\uc774\ub2e4. \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc801\uc6a9\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c `<*>` \uc5f0\uc0b0\uc790\ub294 \ub450 \uc778\uc790 \uc0ac\uc774\uc5d0 \uc911\uc704(infix) \ud45c\uae30\ubc95\uc73c\ub85c \uc0ac\uc6a9\ub418\uba70 \uc67c\ucabd \uacb0\ud569(left-associative)\uc744 \ud55c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4.  \\n\uc608\ub97c \ub4e4\uc5b4, `g <*> x <*> y <*> z`\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud574\uc11d\ub41c\ub2e4.\\n```haskell\\n(((g <*> x) <*> y) <*> z)\\n```\\n`pure`\uc640 `<*>`\uc758 \uc804\ud615\uc801\uc778 \uc0ac\uc6a9 \ud615\ud0dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\npure g <*> x1 <*> x2 <*> ... <*> xn\\n```\\n\uc774\ub7ec\ud55c \ud45c\ud604\uc2dd\uc740 **\uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c(applicative style)** \uc774\ub77c\uace0 \ud55c\ub2e4. \uc774\ub294 \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc801\uc6a9 \ud45c\uae30\ubc95\uc778 `g x1 x2 ... xn`\uacfc\uc758 \uc720\uc0ac\uc131 \ub54c\ubb38\uc774\ub2e4. \ub450 \uacbd\uc6b0 \ubaa8\ub450, `g`\ub294 `a1 ... an` \ud0c0\uc785\uc758 \uc778\uc790 n\uac1c\ub97c \ubc1b\uc544 `b` \ud0c0\uc785\uc758 \uacb0\uacfc\ub97c \uc0dd\uc131\ud558\ub294 \ucee4\ub9c1\ub41c \ud568\uc218\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc5d0\uc11c\ub294 \uac01 \uc778\uc790 `xi`\uac00 `ai`\uac00 \uc544\ub2cc `f ai` \ud0c0\uc785\uc744 \uac00\uc9c0\uba70, \uc804\uccb4 \uacb0\uacfc \ub610\ud55c `b`\uac00 \uc544\ub2cc `f b` \ud0c0\uc785\uc744 \uac16\ub294\ub2e4. \uc774 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9e4\ud551 \ud568\uc218\uc758 \uacc4\uce35\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nfmap0 :: a -> f a\\nfmap0 = pure\\n\\nfmap1 :: (a -> b) -> f a -> f b\\nfmap1 g x = pure g <*> x\\n\\nfmap2 :: (a -> b -> c) -> f a -> f b -> f c\\nfmap2 g x y = pure g <*> x <*> y\\n\\nfmap3 :: (a -> b -> c -> d) -> f a -> f b -> f c -> f d\\nfmap3 g x y z = pure g <*> x <*> y <*> z\\n\\n.\\n.\\n.\\n```\\n\uc774 \uc815\uc758\ub4e4\uc758 \ud0c0\uc785\uc744 \uc9c1\uc811 \ud655\uc778\ud574\ubcf4\ub294 \uac83\uc740 \uc88b\uc740 \uc5f0\uc2b5\uc774 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \ub2e4\uc74c \uc139\uc158\uc5d0\uc11c \ubcf4\uac8c \ub420 \uac83\ucc98\ub7fc \ud544\uc694\uc5d0 \ub530\ub77c \uad6c\uc131\ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \uc774\ub7ec\ud55c \ub9e4\ud551 \ud568\uc218\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc815\uc758\ud560 \ud544\uc694\ub294 \uac70\uc758 \uc5c6\ub2e4.\\n\\n`pure`\uc640 `<*>` \uac1c\ub150\uc744 \uc9c0\uc6d0\ud558\ub294 \ud391\ud130\ub97c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130(applicative functors), \uc904\uc5ec\uc11c **\uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c(applicatives)** \ub77c\uace0 \ubd80\ub978\ub2e4. \ud558\uc2a4\ucf08\uc5d0\uc11c \uc774 \uac1c\ub150\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc7a5 \ud074\ub798\uc2a4 \uc120\uc5b8\uc73c\ub85c \uad6c\ud604\ub41c\ub2e4.\\n```haskell\\nclass Functor f => Applicative f where\\n    pure  :: a -> f a\\n    (<*>) :: f (a -> b) -> f a -> f b\\n```\\n\\n### \uc608\uc2dc\\n`Maybe`\uac00 `fmap`\uc744 \uc9c0\uc6d0\ud558\ub294 \ud391\ud130\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc774\uc6a9\ud558\uba74, \uc774 \ud0c0\uc785\uc744 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub85c \ub9cc\ub4dc\ub294 \uac83\uc740 \uac04\ub2e8\ud558\ub2e4.\\n```haskell\\ninstance Applicative Maybe where\\n    -- pure :: a -> Maybe a\\n    pure = Just\\n    \\n    -- (<*>) :: Maybe (a -> b) -> Maybe a -> Maybe b\\n    Nothing <*> _ = Nothing\\n    (Just g) <*> mx = fmap g mx\\n```\\n\uc989, `pure` \ud568\uc218\ub294 \uac12\uc744 \uc131\uacf5\uc801\uc778 \uacb0\uacfc(`Just`)\ub85c \ubcc0\ud658\ud558\ub294 \ubc18\uba74, `<*>` \uc5f0\uc0b0\uc790\ub294 \uc2e4\ud328\ud560 \uc218\ub3c4 \uc788\ub294 \uc778\uc790\uc5d0 \uc2e4\ud328\ud560 \uc218\ub3c4 \uc788\ub294 \ud568\uc218\ub97c \uc801\uc6a9\ud558\uc5ec \uacb0\uacfc\ub97c \uc0dd\uc131\ud55c\ub2e4. \\n\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> pure (+1) <*> Just 1\\nJust 2\\n\\n> pure (+) <*> Just 1 <*> Just 2\\nJust 3\\n\\n> pure (+) <*> Nothing <*> Just 2\\nNothing\\n```\\n\uc774\ub7ec\ud55c \ubc29\uc2dd\uc73c\ub85c, `Maybe`\uc758 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc2e4\ud328 \uc804\ud30c\ub97c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uc790\ub3d9\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774 \ucc98\ub9ac\ud574\uc8fc\ubbc0\ub85c, \uc6b0\ub9ac\uac00 \uc9c1\uc811 \uc2e4\ud328 \uac00\ub2a5\uc131\uc774 \uc788\ub294 \uc778\uc790\uc5d0 \uc21c\uc218 \ud568\uc218\ub97c \uc801\uc6a9\ud558\ub294 \uac83\uc744 \uad00\ub9ac\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \ud615\ud0dc\uc758 \uc608\uc678 \ucc98\ub9ac \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc9c0\uc6d0\ud55c\ub2e4.\\n\\n\\\\\\n\uc774\uc81c \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc73c\ub85c \ub118\uc5b4\uac00 \ubcf4\uc790. \ud45c\uc900\uc801\uc778 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\ninstance Applicative [] where\\n    -- pure :: a -> [a]\\n    pure x = [x]\\n    \\n    -- (<*>) :: [a -> b] -> [a] -> [b]\\n    gs <*> xs = [g x | g <- gs, x <- xs]\\n```\\n\uc989, `pure`\ub294 \uac12\uc744 \uc6d0\uc18c\uac00 \ud558\ub098\uc778 \ub9ac\uc2a4\ud2b8(singleton list)\ub85c \ubcc0\ud658\ud558\uace0, `<*>`\ub294 \ud568\uc218\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\uc640 \uc778\uc790\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ubc1b\uc544, \uac01 \ud568\uc218\ub97c \uac01 \uc778\uc790\uc5d0 \uc801\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \uacb0\uacfc\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ubc18\ud658\ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> pure (+1) <*> [1,2,3]\\n[2,3,4]\\n\\n> pure (+) <*> [1] <*> [2]\\n[3]\\n\\n> pure (*) <*> [1,2] <*> [3,4]\\n[3,4,6,8]\\n```\\n\uc774 \uc608\uc81c\ub4e4\uc744 \uc5b4\ub5bb\uac8c \uc774\ud574\ud574\uc57c \ud560\uae4c? \ud575\uc2ec\uc740 `[a]` \ud0c0\uc785\uc744 \uc131\uacf5 \uc2dc \uc5ec\ub7ec \uacb0\uacfc\ub97c \ud5c8\uc6a9\ud558\ub294 `Maybe a`\uc758 \uc77c\ubc18\ud654\ub85c \ubcf4\ub294 \uac83\uc774\ub2e4. \ub354 \uc815\ud655\ud788\ub294, \ube48 \ub9ac\uc2a4\ud2b8\ub294 \uc2e4\ud328\ub97c \ub098\ud0c0\ub0b4\uace0, \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \ub9ac\uc2a4\ud2b8\ub294 \uacb0\uacfc\uac00 \uc131\uacf5\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \uac00\ub2a5\ud55c \ubc29\uc2dd\uc744 \ub098\ud0c0\ub0b8\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ub9c8\uc9c0\ub9c9 \uc608\uc81c\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc778\uc790\ub294 \ub450 \uac1c\uc758 \uac00\ub2a5\ud55c \uac12(`1` \ub610\ub294 `2`)\uc744 \uac16\uace0, \ub450 \ubc88\uc9f8 \uc778\uc790\ub3c4 \ub450 \uac1c\uc758 \uac00\ub2a5\ud55c \uac12(`3` \ub610\ub294 `4`)\uc744 \uac00\uc9c0\ubbc0\ub85c, \uacf1\uc148\uc758 \uacb0\uacfc\ub85c \ub124 \uac1c\uc758 \uac00\ub2a5\ud55c \uacb0\uacfc(`3, 4, 6, 8`)\uac00 \ub098\uc624\ub294 \uac83\uc774\ub2e4.\\n\\n\ub354 \uc77c\ubc18\uc801\uc73c\ub85c, \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158(list comprehension)\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub450 \uc815\uc218 \ub9ac\uc2a4\ud2b8\ub97c \uacf1\ud558\ub294 \ubaa8\ub4e0 \uac00\ub2a5\ud55c \ubc29\ubc95\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc0dd\uac01\ud574\ubcf4\uc790.\\n```haskell\\nprods :: [Int] -> [Int] -> [Int]\\nprods xs ys = [x*y | x <- xs, y <- ys]\\n```\\n\ub9ac\uc2a4\ud2b8\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc774\uc6a9\ud558\uba74, \uc911\uac04 \uacb0\uacfc\uc5d0 \uc774\ub984\uc744 \ubd99\uc77c \ud544\uc694 \uc5c6\uc774 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc815\uc758\ub97c \ub0b4\ub193\uc744 \uc218 \uc788\ub2e4.\\n```haskell\\nprods :: [Int] -> [Int] -> [Int]\\nprods xs ys = pure (*) <*> xs <*> ys\\n```\\n\uc694\uc57d\ud558\uc790\uba74, \ub9ac\uc2a4\ud2b8\uc758 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc77c\uc885\uc758 **\ube44\uacb0\uc815\uc801 \ud504\ub85c\uadf8\ub798\ubc0d(non-deterministic programming)** \uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub97c \ud1b5\ud574 \uac12\uc758 \uc120\ud0dd\uc774\ub098 \uc2e4\ud328 \uc804\ud30c\ub97c \uc9c1\uc811 \uad00\ub9ac\ud560 \ud544\uc694 \uc5c6\uc774, \uc21c\uc218 \ud568\uc218\ub97c \ub2e4\uc911-\uac12 \uc778\uc790\uc5d0 \uc801\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uc790\ub3d9\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774 \ucc98\ub9ac\ud574\uc900\ub2e4.\\n\\n\uc774 \uc139\uc158\uc5d0\uc11c \ub2e4\ub8f0 \ub9c8\uc9c0\ub9c9 \ud0c0\uc785\uc740 `IO` \ud0c0\uc785\uc774\uba70, \ub2e4\uc74c \uc120\uc5b8\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Applicative IO where\\n    -- pure :: a -> IO a\\n    pure = return\\n    \\n    -- (<*>) :: IO (a -> b) -> IO a -> IO b\\n    mg <*> mx = do {g <- mg; x <- mx; return (g x)}\\n```\\n\uc774 \uacbd\uc6b0 `pure`\ub294 `IO` \ud0c0\uc785\uc744 \uc704\ud55c `return` \ud568\uc218\ub85c \uc815\uc758\ub418\uace0, `<*>`\ub294 \uc21c\uc218\ud558\uc9c0 \uc54a\uc740(impure) \uc778\uc790\uc5d0 \uc21c\uc218 \ud568\uc218\ub97c \uc801\uc6a9\ud558\uc5ec \uc21c\uc218\ud558\uc9c0 \uc54a\uc740 \uacb0\uacfc\ub97c \ub0b4\ub193\ub294\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ud0a4\ubcf4\ub4dc\ub85c\ubd80\ud130 \uc8fc\uc5b4\uc9c4 \uac1c\uc218\uc758 \ubb38\uc790\ub97c \uc77d\ub294 \ud568\uc218\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\ngetChars :: Int -> IO String\\ngetChars 0 = return []\\ngetChars n = pure (:) <*> getChar <*> getChars (n-1)\\n```\\n\uc989, \uae30\ubcf8 \ucf00\uc774\uc2a4(base case)\uc5d0\uc11c\ub294 \ub2e8\uc21c\ud788 \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\uace0, \uc7ac\uadc0 \ucf00\uc774\uc2a4\uc5d0\uc11c\ub294 \uccab \ubc88\uc9f8 \ubb38\uc790\ub97c \uc77d\uc740 \uacb0\uacfc\uc640 \ub098\uba38\uc9c0 \ubb38\uc790 \ub9ac\uc2a4\ud2b8\uc5d0 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uc790 (`:`)\ub97c \uc801\uc6a9\ud55c\ub2e4. \ud6c4\uc790\uc758 \uacbd\uc6b0, \ub9cc\uc57d \uc774 \ud568\uc218\uac00 `do` \ud45c\uae30\ubc95\uc73c\ub85c \uc815\uc758\ub418\uc5c8\ub2e4\uba74 \ud544\uc694\ud588\uc744 cons \ud568\uc218\uc5d0 \uacf5\uae09\ub418\ub294 \uc778\uc790\ub4e4\uc758 \uc774\ub984\uc744 \ubd99\uc77c \ud544\uc694\uac00 \uc5c6\ub2e4.\\n\\n\ub354 \uc77c\ubc18\uc801\uc73c\ub85c, `IO`\uc758 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc77c\uc885\uc758 **interactive programming** \uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc561\uc158\uc758 \uc21c\uc11c\ub098 \uacb0\uacfc \uac12 \ucd94\ucd9c\uc744 \uc9c1\uc811 \uad00\ub9ac\ud560 \ud544\uc694 \uc5c6\uc774, \uc21c\uc218 \ud568\uc218\ub97c \uc21c\uc218\ud558\uc9c0 \uc54a\uc740 \uc778\uc790\uc5d0 \uc801\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uc790\ub3d9\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac\ud574\uc900\ub2e4.\\n\\n### Effectful programming\\n\uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc5d0 \ub300\ud55c \uc6d0\ub798 \ub3d9\uae30\ub294 \ub2e4\uc911 \uc778\uc790 \ud568\uc218\uc5d0 \ub300\ud55c \ub9e4\ud551 \uc544\uc774\ub514\uc5b4\ub97c \uc77c\ubc18\ud654\ud558\ub824\ub294 \uac83\uc774\uc5c8\ub2e4. \uc774\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\uc758 \uac1c\ub150\uc5d0 \ub300\ud55c \ud55c\uac00\uc9c0 \uc720\ud6a8\ud55c \ud574\uc11d\uc774\uc9c0\ub9cc, \uc55e\uc11c \uc0b4\ud3b4\ubcf8 \uc138 \uac00\uc9c0 \uc778\uc2a4\ud134\uc2a4(`Maybe`, `List`, `IO`)\ub97c \ud1b5\ud574 \ub354 \ucd94\uc0c1\uc801\uc778 \ub610 \ub2e4\ub978 \uad00\uc810\uc774 \uc788\ub2e4\ub294 \uac83\uc774 \ubd84\uba85\ud574\uc9c4\ub2e4.\\n\\n\uc774 \uc778\uc2a4\ud134\uc2a4\ub4e4 \uc0ac\uc774\uc758 \uacf5\ud1b5\ub41c \uc8fc\uc81c\ub294 \ubaa8\ub450 **effects** \ub97c \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uad00\ub828\uc774 \uc788\ub2e4\ub294 \uc810\uc774\ub2e4. \uac01 \uacbd\uc6b0\uc5d0, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uba54\ucee4\ub2c8\uc998\uc740 \uce5c\uc219\ud55c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uac8c \ud574\uc8fc\ub294 `<*>` \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774 \uc2a4\ud0c0\uc77c\uc5d0\uc11c\ub294 \ud568\uc218\uac00 \uc778\uc790\uc5d0 \uc801\uc6a9\ub418\ub294\ub370, \ud55c \uac00\uc9c0 \ud575\uc2ec\uc801\uc778 \ucc28\uc774\uc810\uc774 \uc788\ub2e4. \uc778\uc790\ub4e4\uc740 \ub354 \uc774\uc0c1 \ub2e8\uc21c\ud55c \uac12\uc774 \uc544\ub2c8\ub77c, \uc2e4\ud328 \uac00\ub2a5\uc131, \uc5ec\ub7ec \uc131\uacf5 \uacbd\ub85c, \ub610\ub294 \uc785\ucd9c\ub825 \uc561\uc158 \uc218\ud589\uacfc \uac19\uc740 effect\ub97c \uac00\uc9c8 \uc218 \uc788\ub2e4.\\n\\n\uc774\ub7ec\ud55c \ubc29\uc2dd\uc73c\ub85c, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub294 \uc21c\uc218 \ud568\uc218\ub97c **effectful arguments**\uc5d0 \uc801\uc6a9\ud558\ub294 \uc544\uc774\ub514\uc5b4\ub97c \ucd94\uc0c1\ud654\ud55c \uac83\uc73c\ub85c\ub3c4 \ubcfc \uc218 \uc788\uc73c\uba70, \ud5c8\uc6a9\ub418\ub294 \ud6a8\uacfc\uc758 \uc815\ud655\ud55c \ud615\ud0dc\ub294 \uae30\ubc18\uc774 \ub418\ub294 \ud391\ud130\uc758 \uc131\uc9c8\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c4\ub2e4.\\n\\neffectful programming\uc758 \ud55c \ud615\ud0dc\uc5d0 \ub300\ud55c \ud1b5\uc77c\ub41c \uc811\uadfc\ubc95\uc744 \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0\ub3c4, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc5b4\ub5a4 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\uc640\ub3c4 \ud568\uaed8 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc77c\ubc18\ud654\ub41c \ud568\uc218\ub97c \uc815\uc758\ud560 \uc218 \uc788\ub2e4\ub294 \uc911\uc694\ud55c \uc774\uc810\ub3c4 \uc788\ub2e4. \\n\\n\ud55c \uc608\ub85c, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub2e4\uc74c \ud568\uc218\ub97c \uc81c\uacf5\ud55c\ub2e4.\\n```haskell\\nsequenceA :: Applicative f => [f a] -> f [a]\\nsequenceA [] = pure []\\nsequenceA (x:xs) = pure (:) <*> x <*> sequenceA xs\\n```\\n\uc774 \ud568\uc218\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc561\uc158\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c, \uacb0\uacfc \uac12\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\ub294 \ub2e8\uc77c \uc561\uc158\uc73c\ub85c \ubcc0\ud658\ud558\uba70, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uacf5\ud1b5\ub41c \ud328\ud134\uc744 \ud3ec\ucc29\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `getChars` \ud568\uc218\ub294 \uc774\uc81c \uae30\ubcf8 \uc561\uc158\uc778 `getChar`\ub97c \ud544\uc694\ud55c \ud69f\uc218\ub9cc\ud07c \ubcf5\uc81c\ud558\uace0 \uadf8 \uacb0\uacfc \uc2dc\ud000\uc2a4\ub97c \uc2e4\ud589\ud558\ub294 \ub354 \uac04\ub2e8\ud55c \ubc29\uc2dd\uc73c\ub85c \uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\ngetChars :: Int -> IO String\\ngetChars n = sequenceA (replicate n getChar)\\n```\\n\\n### Applicative laws\\n`pure`\uc640 `<*>` \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0\ub3c4, \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub294 \ub124 \uac00\uc9c0 \ub4f1\uc2dd \ubc95\uce59\uc744 \ub9cc\uc871\ud574\uc57c \ud55c\ub2e4.\\n1. `pure id <*> x` = `x`\\n    - **\ud56d\ub4f1(Identity)** : `pure`\uac00 \ud56d\ub4f1 \ud568\uc218\ub97c \ubcf4\uc874\ud55c\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \uc989, `pure id`\ub97c \uc801\uc6a9\ud558\ub294 \uac83\uc740 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\ub294 \uac83\uacfc \uac19\ub2e4.\\n2. `pure (g x)` = `pure g <*> pure x`\\n    - **\ub3d9\ud615\uc0ac\uc0c1(Homomorphism)** : `pure`\uac00 \ud568\uc218 \uc801\uc6a9 \ub610\ud55c \ubcf4\uc874\ud568\uc744 \ub9d0\ud55c\ub2e4. `pure`\ub294 \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc801\uc6a9\uc744 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud568\uc218 \uc801\uc6a9\uc73c\ub85c \ubd84\ubc30\ud560 \uc218 \uc788\ub2e4.\\n3. `x <*> pure y` = `pure (\\\\g -> g y) <*> x`\\n    - **\uad50\ud658(Interchange)** : effectful \ud568\uc218\ub97c \uc21c\uc218\ud55c(pure) \uc778\uc790\uc5d0 \uc801\uc6a9\ud560 \ub54c, \ub450 \uad6c\uc131 \uc694\uc18c\uc758 \ud3c9\uac00 \uc21c\uc11c\ub294 \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.\\n4. `x <*> (y <*> z)` = `(pure (.) <*> x <*> y) <*> z`\\n    - **\uacb0\ud569(Composition)** : \uad00\ub828\ub41c \ud0c0\uc785\ub4e4\uc744 \uc81c\uc678\ud558\uba74 `<*>` \uc5f0\uc0b0\uc790\uac00 \uacb0\ud569 \ubc95\uce59\uc744 \ub9cc\uc871\ud55c\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.\\n\\n\uc774 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ubc95\uce59\ub4e4\uc740 `pure :: a -> f a` \ud568\uc218\uc5d0 \ub300\ud55c \uc6b0\ub9ac\uc758 \uc9c1\uad00, \uc989 `a` \ud0c0\uc785\uc758 \uac12\uc744 `f` \ud0c0\uc785\uc758 \uc138\uc0c1\uc5d0 \uc2ec\ub294\ub2e4\ub294 \uac1c\ub150\uc744 \uacf5\uc2dd\ud654\ud55c\ub2e4. \ub610\ud55c \uc774 \ubc95\uce59\ub4e4\uc740 `pure` \ud568\uc218\uc640 `<*>` \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ucd95\ub41c \ubaa8\ub4e0 \ud0c0\uc785\uc774 \uc62c\ubc14\ub978 \ud45c\ud604\uc2dd\uc740 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \ub2e4\uc2dc \uc791\uc131\ub420 \uc218 \uc788\uc74c\uc744 \ubcf4\uc7a5\ud55c\ub2e4. \uc989, \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\ud0dc\uc774\ub2e4.\\n```\\npure g <*> x1 <*> x2 <*> ... <*> xn\\n```\\n\uc6b0\ub9ac\uac00 \uc608\uc81c\uc5d0\uc11c \uc815\uc758\ud588\ub358 \ubaa8\ub4e0 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\ub294 \uc704 \ubc95\uce59\ub4e4\uc744 \ub9cc\uc871\ud55c\ub2e4. \ub354\uc6b1\uc774, \uc774 \uc778\uc2a4\ud134\uc2a4\ub4e4\uc740 \uac01\uac01 `fmap g x = pure g <*> x` \ubc95\uce59 \ub610\ud55c \ub9cc\uc871\ud558\ub294\ub370, \uc774\ub294 `fmap`\uc774 \ub450 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uae30\ubcf8 \uc5f0\uc0b0(`pure`, `<*>`)\uc73c\ub85c \uc5b4\ub5bb\uac8c \uc815\uc758\ub420 \uc218 \uc788\ub294\uc9c0 \ubcf4\uc5ec\uc900\ub2e4. \uc0ac\uc2e4 \uc774 `fmap` \uad00\ub828 \ubc95\uce59\uc740 \uc774\uc804\uc5d0 \uc5b8\uae09\ub41c \uc0ac\uc2e4, \uc989 \uc8fc\uc5b4\uc9c4 \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ud0c0\uc785\uc744 \ud391\ud130\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 \ub2e8 \ud558\ub098\ubfd0\uc774\ubbc0\ub85c `fmap`\uacfc \ub3d9\uc77c\ud574\uc57c \ud558\ub294 \ud568\uc218\ub294 \uc5b4\ub5a4 \uac83\uc774\ub4e0 \uc2e4\uc81c\ub85c `fmap`\uacfc \uac19\ub2e4\ub294 \uc0ac\uc2e4 \ub355\ubd84\uc5d0 \uacf5\uc9dc\ub85c \uc5bb\uc5b4\uc9c4\ub2e4.\\n\\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c, \ud558\uc2a4\ucf08\uc740 `g <$> x = fmap g x`\ub85c \uc815\uc758\ub418\ub294 `fmap`\uc758 \uc911\uc704(infix) \ubc84\uc804\uc778 `<$>`\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774\ub97c \uc704 `fmap` \ubc95\uce59\uacfc \uacb0\ud569\ud558\uba74 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc758 \ub300\uc548\uc801\uc778 \ud615\ud0dc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\\n```\\ng <$> x1 <*> x2 <*> ... <*> xn\\n```\\n\uc774 \ubc84\uc804\uc774 \uc57d\uac04 \ub354 \uac04\uacb0\ud558\uc9c0\ub9cc, \uc124\uba85 \ubaa9\uc801\uc73c\ub85c\ub294 \ud504\ub85c\uadf8\ub798\ubc0d\uc774 \uc21c\uc218 \ud568\uc218\ub97c \ud6a8\uacfc\uac00 \uc788\ub294 \uc778\uc790\uc5d0 \uc801\uc6a9\ud558\ub294 \uac83\uc784\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uac15\uc870\ud558\ub294 `pure` \ubc84\uc804\uc744 \uc120\ud638\ud55c\ub2e4. \ud558\uc9c0\ub9cc `<$>`\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc84\uc804\uc740 \uc2e4\uc81c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4.\\n\\n## Monads\\n\uc774 \uc7a5\uc5d0 \ub098\uc62c \ub9c8\uc9c0\ub9c9 \uc0c8\ub85c\uc6b4 \uac1c\ub150\uc740 effectful programming\uc758 \ub610 \ub2e4\ub978 \ud328\ud134\uc744 \ud3ec\ucc29\ud55c\ub2e4. \uc608\uc2dc\ub85c, \uc815\uc218 \uac12\uacfc \ub098\ub217\uc148 \uc5f0\uc0b0\uc790\ub85c \uad6c\uc131\ub41c \ub2e4\uc74c \ud45c\ud604\uc2dd \ud0c0\uc785\uc744 \uc0dd\uac01\ud574\ubcf4\uc790.\\n```haskell\\ndata Expr = Val Int | Div Expr Expr\\n```\\n\uc774\ub7ec\ud55c \ud45c\ud604\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud3c9\uac00\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Int\\neval (Val n) = n\\neval (Div x y) = eval x `div` eval y\\n```\\n\ud558\uc9c0\ub9cc \uc774 \ud568\uc218\ub294 0\uc73c\ub85c \ub098\ub204\ub294 \uac00\ub2a5\uc131\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\uc73c\uba70, \uc774 \uacbd\uc6b0 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.\\n```haskell\\n> eval (Div (Val 1) (Val 0))\\n*** Exception: divide by zero\\n```\\n\uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574, \ub450 \ubc88\uc9f8 \uc778\uc790\uac00 `0`\uc77c \ub54c `Nothing`\uc744 \ubc18\ud658\ud558\ub294 \uc548\uc804\ud55c \ubc84\uc804\uc758 \ub098\ub217\uc148 \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc704\ud574 `Maybe` \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\nsafediv :: Int -> Int -> Maybe Int\\nsafediv _ 0 = Nothing\\nsafediv n m = Just (n `div` m)\\n```\\n\uadf8\ub9ac\uace0 `eval` \ud568\uc218\ub97c \uc218\uc815\ud558\uc5ec \ub450 \uc778\uc790 \ud45c\ud604\uc2dd\uc5d0 \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub420 \ub54c \uc2e4\ud328 \uac00\ub2a5\uc131\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub3c4\ub85d \ud55c\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = Just n\\neval (Div x y) = case eval x of\\n                   Nothing -> Nothing\\n                   Just n  -> case eval y of\\n                                Nothing -> Nothing\\n                                Just m  -> safediv n m\\n```\\n\uc774\uc81c \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> eval (Div (Val 1) (Val 0))\\nNothing\\n```\\n\uc774 \uc0c8\ub85c\uc6b4 \uc815\uc758\ub294 0\uc73c\ub85c \ub098\ub204\uae30 \uc774\uc288\ub97c \ud574\uacb0\ud558\uc9c0\ub9cc \ub2e4\uc18c \uc7a5\ud669\ud558\ub2e4. \uc815\uc758\ub97c \ub2e8\uc21c\ud654\ud558\uae30 \uc704\ud574 `Maybe`\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c\ub77c\ub294 \uc0ac\uc2e4\uc744 \ud65c\uc6a9\ud558\uc5ec `eval`\uc744 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\ub85c \uc7ac\uc815\uc758\ud574\ubcfc \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = pure n\\neval (Div x y) = pure safediv <*> eval x <*> eval y\\n```\\n\ud558\uc9c0\ub9cc \uc774 \uc815\uc758\ub294 \ud0c0\uc785\uc774 \uc62c\ubc14\ub974\uc9c0 \uc54a\ub2e4. \ud2b9\ud788, \uc704 \ucee8\ud14d\uc2a4\ud2b8\uc5d0\uc11c\ub294 `Int -> Int -> Int` \ud0c0\uc785\uc758 \ud568\uc218\uac00 \ud544\uc694\ud55c\ub370, `safediv` \ud568\uc218\ub294 `Int -> Int -> Maybe Int` \ud0c0\uc785\uc744 \uac16\ub294\ub2e4. `pure safediv`\ub97c `Maybe (Int -> Int -> Maybe Int)` \ud0c0\uc785\uc744 \uac16\ub294 \ucee4\uc2a4\ud140 \uc815\uc758 \ud568\uc218\ub85c \uad50\uccb4\ud574\ub3c4 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\ub294\ub370, \uc774\ub294 \ub450 \ubc88\uc9f8 \uc815\uc218\uac00 0\uc77c \ub54c \uc2e4\ud328\ub97c \ub098\ud0c0\ub0bc \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n\uacb0\ub860\uc740 `eval` \ud568\uc218\uac00 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud391\ud130\uac00 \ud3ec\ucc29\ud558\ub294 effectful programming\uc758 \ud328\ud134\uc5d0 \ub9de\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774\ub2e4. \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \uc2a4\ud0c0\uc77c\uc740 \uc21c\uc218 \ud568\uc218\ub97c \ud6a8\uacfc\uac00 \uc788\ub294 \uc778\uc790\uc5d0 \uc801\uc6a9\ud558\ub3c4\ub85d \uc81c\ud55c\ud55c\ub2e4. `eval`\uc740 \uc774 \ud328\ud134\uc5d0 \ub9de\uc9c0 \uc54a\ub294\ub370, `safediv`\ub97c \ucc98\ub9ac\ud558\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\uac00 \uc21c\uc218 \ud568\uc218\uac00 \uc544\ub2c8\ub77c \uadf8 \uc790\uccb4\ub85c \uc2e4\ud328\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n\uadf8\ub807\ub2e4\uba74 `eval :: Expr -> Maybe Int`\ub97c \uc5b4\ub5bb\uac8c \ub354 \uac04\ub2e8\ud55c \ubc29\uc2dd\uc73c\ub85c \ub2e4\uc2dc \uc791\uc131\ud560 \uc218 \uc788\uc744\uae4c? \ud575\uc2ec\uc740 `eval` \uc815\uc758\uc5d0 \ub450 \ubc88 \ub098\ud0c0\ub098\ub294 \uacf5\ud1b5 \ud328\ud134, \uc989 `Maybe` \uac12\uc5d0 \ub300\ud55c **\uacbd\uc6b0 \ubd84\uc11d(case analysis)**\uc744 \uc218\ud589\ud558\uc5ec `Nothing`\uc740 `Nothing`\uc73c\ub85c, `Just x`\ub294 \uc5b4\ub5a4 \uacb0\uacfc\ub85c \ub9e4\ud551\ud558\ub294 \uac83\uc744 \uad00\ucc30\ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ud328\ud134\uc744 \ucd94\uc0c1\ud654\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\ub294 \uc0c8\ub85c\uc6b4 \uc5f0\uc0b0\uc790 `>>=`\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\\n```haskell\\n(>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b\\nmx >>= f = case mx of\\n             Nothing -> Nothing\\n             Just x  -> f x\\n```\\n\uc989, `>>=`\ub294 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 `a` \ud0c0\uc785\uc758 \uc778\uc790\uc640, \uadf8 \uacb0\uacfc\uac00 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 `a` \ud0c0\uc785\uc758 \ud568\uc218\ub97c \ubc1b\uc544, \uc2e4\ud328\ud560 \uc218 \uc788\ub294 `b` \ud0c0\uc785\uc758 \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4. \ub9cc\uc57d \uccab \ubc88\uc9f8 \uc778\uc790\uac00 \uc2e4\ud328\ud558\uba74 \uc2e4\ud328\ub97c \uc804\ud30c\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub450 \ubc88\uc9f8 \uc778\uc790\uc778 \ud568\uc218\ub97c \uccab \ubc88\uc9f8 \uc778\uc790\uc758 \uacb0\uacfc\uc5d0 \uc801\uc6a9\ud55c\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c `>>=`\ub294 `Maybe` \uac12\uc758 \uc5f0\uc18d\uacfc \uadf8 \uacb0\uacfc \ucc98\ub9ac\ub97c \ud1b5\ud569\ud55c\ub2e4. `>>=` \uc5f0\uc0b0\uc790\ub294 \uc885\uc885 **\ubc14\uc778\ub4dc(bind)** \ub77c\uace0 \ubd88\ub9b0\ub2e4. \ub450 \ubc88\uc9f8 \uc778\uc790\ub97c \uccab \ubc88\uc9f8 \uc778\uc790\uc758 \uacb0\uacfc\uc5d0 \ubc14\uc778\ub529\ud558\uae30 \ub54c\ubb38\uc774\ub2e4.\\n\\n\ubc14\uc778\ub4dc \uc5f0\uc0b0\uc790\uc640 \ub78c\ub2e4 \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec, \uc774\uc81c `eval` \ud568\uc218\ub97c \ub354 \uac04\uacb0\ud55c \ubc29\uc2dd\uc73c\ub85c \uc7ac\uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = Just n\\neval (Div x y) = eval x >>= \\\\n ->\\n                 eval y >>= \\\\m ->\\n                 safediv n m\\n```\\n`Div`\uc758 \uacbd\uc6b0\ub294 \uba3c\uc800 `x`\ub97c \ud3c9\uac00\ud558\uc5ec \uadf8 \uacb0\uacfc\ub97c `n`\uc774\ub77c \ud558\uace0, \uadf8 \ub2e4\uc74c `y`\ub97c \ud3c9\uac00\ud558\uc5ec \uadf8 \uacb0\uacfc\ub97c `m`\uc774\ub77c \ud55c \ub4a4, `safediv`\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub450 \uacb0\uacfc\ub97c \uacb0\ud569\ud558\ub294 \uc0c1\ud0dc\ub97c \uba85\uc2dc\ud55c\ub2e4.\\n\\n\uc704 \uc608\uc81c\ub85c\ubd80\ud130 \uc77c\ubc18\ud654\ud558\uba74, `>>=` \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ucd95\ub41c \ud45c\ud604\uc2dd\uc740 \uc804\ud615\uc801\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4.\\n```haskell\\nm1 >>= \\\\x1 ->\\nm2 >>= \\\\x2 ->\\n...\\nmn >>= \\\\xn ->\\nf x1 x2 ... xn\\n```\\n\uc989, \uc6b0\ub9ac\ub294 `m1 ... mn` \uac01\uac01\uc758 \ud45c\ud604\uc2dd\uc744 \ucc28\ub840\ub85c \ud3c9\uac00\ud558\uace0, \uadf8 \uacb0\uacfc \uac12 `x1 ... xn`\uc744 \ud568\uc218 `f`\uc5d0 \uc801\uc6a9\ud558\uc5ec \uacb0\ud569\ud55c\ub2e4. `>>=` \uc5f0\uc0b0\uc790\uc758 \uc815\uc758\ub294 \uc2dc\ud000\uc2a4\uc758 \ubaa8\ub4e0 \uad6c\uc131\uc694\uc18c `mi`\uac00 \uc131\uacf5\ud560 \uacbd\uc6b0\uc5d0\ub9cc \uc774\ub7ec\ud55c \ud45c\ud604\uc2dd\uc774 \uc131\uacf5\ud558\ub3c4\ub85d \ubcf4\uc7a5\ud55c\ub2e4. \ub354 \ub098\uc544\uac00, `>>=` \uc5f0\uc0b0\uc790\uc758 \uc815\uc758\uc5d0 \uc758\ud574 \uc2dc\ud000\uc2a4\uc758 \uc5b4\ub290 \uc9c0\uc810\uc5d0\uc11c\ub4e0 \uc2e4\ud328\ub97c \ucc98\ub9ac\ud558\ub294 \ubb38\uc81c\uac00 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac\ub418\ubbc0\ub85c \uc0ac\uc6a9\uc790\ub294 \uc774\uc5d0 \ub300\ud574 \uac71\uc815\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.\\n\\n\ud558\uc2a4\ucf08\uc740 \uc704\uc640 \uac19\uc740 \ud615\ud0dc\uc758 \ud45c\ud604\uc2dd\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \ub354 \uac04\ub2e8\ud55c \ubc29\uc2dd\uc73c\ub85c \uc791\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \ud2b9\ubcc4\ud55c \ud45c\uae30\ubc95\uc744 \uc81c\uacf5\ud55c\ub2e4.\\n```haskell\\ndo x1 <- m1\\n   x2 <- m2\\n   ...\\n   xn <- mn\\n   f x1 x2 ... xn\\n```\\n\uc774\ub294 \uc0c1\ud638\uc791\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d(interactive programming)\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ub418\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \ud45c\uae30\ubc95\uc774\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub3c4 \uc2dc\ud000\uc2a4\uc758 \uac01 \ud56d\ubaa9\uc740 \ub3d9\uc77c\ud55c \uc5f4\uc5d0\uc11c \uc2dc\uc791\ud574\uc57c \ud558\uba70, \uacb0\uacfc \uac12 `xi`\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0 `xi <- mi`\ub294 `mi`\ub85c \ucd95\uc57d\ub420 \uc218 \uc788\ub2e4. \uc774 `do` \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 `eval`\uc740 \uc774\uc81c \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud558\uac8c \uc7ac\uc815\uc758\ub420 \uc218 \uc788\ub2e4.\\n```haskell\\neval :: Expr -> Maybe Int\\neval (Val n) = Just n\\neval (Div x y) = do n <- eval x\\n                    m <- eval y\\n                    safediv n m\\n```\\n\ub354 \uc77c\ubc18\uc801\uc73c\ub85c, `do` \ud45c\uae30\ubc95\uc740 `IO`\ub098 `Maybe` \ud0c0\uc785\uc5d0\ub9cc \uad6d\ud55c\ub418\uc9c0 \uc54a\uace0, **\ubaa8\ub098\ub4dc(monad)** \ub97c \ud615\uc131\ud558\ub294 \ubaa8\ub4e0 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud0c0\uc785\uacfc \ud568\uaed8 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. \ud558\uc2a4\ucf08\uc5d0\uc11c \ubaa8\ub098\ub4dc\uc758 \uac1c\ub150\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc7a5 \uc120\uc5b8\uc73c\ub85c \uad6c\ud604\ub41c\ub2e4.\\n```haskell\\nclass Applicative m => Monad m where\\n    return :: a -> m a\\n    (>>=)  :: m a -> (a -> m b) -> m b\\n    \\n    return = pure\\n```\\n\uc989, \ubaa8\ub098\ub4dc\ub294 \uba85\uc2dc\ub41c \ud0c0\uc785\uc758 `return`\uacfc `>>=` \ud568\uc218\ub97c \uc9c0\uc6d0\ud558\ub294 \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud0c0\uc785\uc774\ub2e4. \uae30\ubcf8 \uc815\uc758 `return = pure`\ub294 `return`\uc774 \uc77c\ubc18\uc801\uc73c\ub85c \uc5b4\ud50c\ub9ac\ucee4\ud2f0\ube0c \ud568\uc218 `pure`\uc758 \ub2e4\ub978 \uc774\ub984\uc77c \ubfd0\uc774\uc9c0\ub9cc, \uc6d0\ud55c\ub2e4\uba74 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub4dc(override)\ub420 \uc218 \uc788\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4.\\n\\n`return` \ud568\uc218\ub294 \uc5ed\uc0ac\uc801\uc778 \uc774\uc720\ub85c, \uadf8\ub9ac\uace0 `return`\uacfc `>>=` \ud568\uc218\ub97c \ubaa8\ub450 \ud3ec\ud568\ud55c\ub2e4\uace0 \uac00\uc815\ud558\ub294 \uae30\uc874 \ucf54\ub4dc, \ub17c\ubb38, \uad50\uacfc\uc11c\uc640\uc758 \ud558\uc704 \ud638\ud658\uc131\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud574 `Monad` \ud074\ub798\uc2a4\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ubbf8\ub798\uc758 \uc5b4\ub290 \uc2dc\uc810\uc5d0\ub294 `return`\uc774 `Monad` \ud074\ub798\uc2a4\uc5d0\uc11c \uc81c\uac70\ub418\uace0 \ub300\uc2e0 \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\uc758\ub97c \uac16\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\uac00 \ub420 \uc218\ub3c4 \uc788\ub2e4.\\n```haskell\\nreturn :: Applicative f => a -> f a\\nreturn = pure\\n```\\n\ub9cc\uc57d \uc774 \ubcc0\uacbd\uc774 \uad6c\ud604\ub418\uba74, \ub354 \uc774\uc0c1 \uc778\uc2a4\ud134\uc2a4 \uc120\uc5b8\uc5d0\uc11c `return`\uc744 \uc815\uc758\ud558\ub294 \uac83\uc774 \ubd88\uac00\ub2a5\ud574\uc9c0\uc9c0\ub9cc, \uc6b0\ub9ac\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uae30\ubcf8 \uc815\uc758\uc778 `return = pure`\ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c \ub300\ubd80\ubd84\uc758 \uc608\uc81c\ub294 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4.\\n\\n### \uc608\uc2dc\\n\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac(prelude)\uc5d0\uc11c, `Maybe` \ud0c0\uc785\uc758 \ubc14\uc778\ub4dc(bind) \uc5f0\uc0b0\uc790\ub294 \ub2e8\uc21c\uc131\uc744 \uc704\ud574 \ucf00\uc774\uc2a4 \ubd84\uc11d \ub300\uc2e0 \ud328\ud134 \ub9e4\uce6d\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc758\ub41c\ub2e4.\\n```haskell\\ninstance Monad Maybe where\\n    -- (>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b\\n    Nothing >>= _ = Nothing\\n    (Just x) >>= f = f x\\n```\\n\uc774 \uc120\uc5b8 \ub54c\ubb38\uc5d0 `do` \ud45c\uae30\ubc95\uc774 \uc774\uc804 \uc139\uc158\uc758 `eval` \ud568\uc218\uc5d0\uc11c\ucc98\ub7fc `Maybe` \uac12\uc744 \ud504\ub85c\uadf8\ub798\ubc0d\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \uac83\uc774\ub2e4.\\n\\n\\\\\\n\ub9ac\uc2a4\ud2b8 \ub610\ud55c \ub2e4\uc74c\uacfc \uac19\uc774 \ubaa8\ub098\ub4dc \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 \uc218 \uc788\ub2e4.\\n```haskell\\ninstance Monad [] where\\n    -- (>>=) :: [a] -> (a -> [b]) -> [b]\\n    xs >>= f = [y | x <- xs, y <- f x]\\n```\\n\uc989, `xs >>= f`\ub294 `xs`\uc758 \uac01 \uacb0\uacfc `x`\uc5d0 \ud568\uc218 `f`\ub97c \uc801\uc6a9\ud558\uace0, \uadf8 \uacb0\uacfc \uac12\ub4e4\uc744 \ubaa8\ub450 \ub9ac\uc2a4\ud2b8\uc5d0 \ubaa8\uc740\ub2e4. \uc774\ub7f0 \uc2dd\uc73c\ub85c \ub9ac\uc2a4\ud2b8\uc758 \ubc14\uc778\ub4dc \uc5f0\uc0b0\uc790\ub294 \uc5ec\ub7ec \uacb0\uacfc\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub294 \ud45c\ud604\uc2dd\uc744 \uc2dc\ud000\uc2f1\ud558\ub294 \uc218\ub2e8\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub450 \ub9ac\uc2a4\ud2b8\uc758 \uc6d0\uc18c\ub97c \uc9dd\uc9d3\ub294 \ubaa8\ub4e0 \uac00\ub2a5\ud55c \ubc29\ubc95\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub294 \uc774\uc81c `do` \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc758\ud560 \uc218 \uc788\ub2e4.\\n```haskell\\npairs :: [a] -> [b] -> [(a,b)]\\npairs xs ys = do x <- xs\\n                 y <- ys\\n                 return (x,y)\\n```\\n\uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4.\\n```haskell\\n> pairs [1,2] [3,4]\\n[(1,3),(1,4),(2,3),(2,4)]\\n```\\n`pairs`\uc758 \ub9c8\uc9c0\ub9c9 \uc904\uc5d0\uc11c \uae30\ubcf8 \uc815\uc758\uc778 `return = pure` \ub54c\ubb38\uc5d0 `pure (x,y)`\ub97c \uc4f8 \uc218\ub3c4 \uc788\uc5c8\uc9c0\ub9cc, \ubaa8\ub098\ub4dc \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\ub294 `return` \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uad00\ub840\ub77c\ub294 \uc810\uc5d0 \uc720\uc758\ud558\uc790. \ub610\ud55c \uc774 \uc815\uc758\uac00 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud55c \uc815\uc758\uc640 \uc720\uc0ac\ud558\ub2e4\ub294 \uc810\ub3c4 \ud765\ubbf8\ub86d\ub2e4.\\n```haskell\\npairs xs ys = [(x,y) | x <- xs, y <- ys]\\n```\\n\ud558\uc9c0\ub9cc \ucef4\ud504\ub9ac\ud5e8\uc158 \ud45c\uae30\ubc95\uc740 \ub9ac\uc2a4\ud2b8 \ud0c0\uc785\uc5d0\ub9cc \ud2b9\uc815\ub418\uc9c0\ub9cc, `do` \ud45c\uae30\ubc95\uc740 \uc784\uc758\uc758 \ubaa8\ub098\ub4dc\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.\\n\\n\\\\\\n\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub610\ud55c `IO` \ud0c0\uc785\uc5d0 \ub300\ud55c \uc778\uc2a4\ud134\uc2a4\ub3c4 \ud3ec\ud568\ud558\uba70, \uc774\ub294 \uc0c1\ud638\uc791\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c `do` \ud45c\uae30\ubc95 \uc0ac\uc6a9\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc704\uc758 \ub2e4\ub978 \uc608\uc81c\ub4e4\uacfc \ub2ec\ub9ac, \uc774 \uacbd\uc6b0 `return`\uacfc `>>=`\uc758 \uc815\uc758\ub294 \ud558\uc2a4\ucf08 \uc790\uccb4 \ub0b4\uc5d0\uc11c \uc815\uc758\ub418\uae30\ubcf4\ub2e4\ub294 \uc5b8\uc5b4\uc5d0 \ub0b4\uc7a5\ub418\uc5b4 \uc788\ub2e4.\\n```\\ninstance Monad IO where\\n    -- return :: a -> IO a\\n    return x = ...\\n    \\n    -- (>>=) :: IO a -> (a -> IO b) -> IO b\\n    mx >>= f = ...\\n```"},{"id":"test","metadata":{"permalink":"/blog/test","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2025-08-25-test.md","source":"@site/blog/2025-08-25-test.md","title":"AA","description":"\ubb50\uae34 \ubb50\uc57c \uc784\ub9c8","date":"2025-08-25T00:00:00.000Z","tags":[{"inline":false,"label":"Haskell","permalink":"/blog/tags/haskell","description":"Haskell tag description"}],"readingTime":0.05,"hasTruncateMarker":true,"authors":[{"name":"dream2405","title":"\uac8c\uc73c\ub978 \ub300\ud559\uc0dd","socials":{"github":"https://github.com/dream2405"},"imageURL":"https://github.com/dream2405.png","key":"dream2405","page":null}],"frontMatter":{"slug":"test","title":"AA","authors":["dream2405"],"tags":["haskell"],"image":"./t.jpg"},"unlisted":false,"prevItem":{"title":"Monads and more","permalink":"/blog/monads-and-more"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"\ubb50\uae34 \ubb50\uc57c \uc784\ub9c8\\n```c\\n#include<stdio.h>\\n\\nint main() {\\n\\n}\\n```\\n\x3c!-- truncate --\x3e"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","tags":[{"inline":false,"label":"Facebook","permalink":"/blog/tags/facebook","description":"Facebook tag description"},{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.56,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","linkedin":"https://www.linkedin.com/in/yangshun/","github":"https://github.com/yangshun","newsletter":"https://www.greatfrontend.com"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"AA","permalink":"/blog/test"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nHere are a few tips you might find useful.\\n\\n\x3c!-- truncate --\x3e\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.27,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n:::\\n\\n{/* truncate */}\\n\\nFor example, use JSX to create an interactive button:\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/dream2405/blog/tree/main/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":2.04,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","title":"Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","linkedin":"https://www.linkedin.com/in/yangshun/","github":"https://github.com/yangshun","newsletter":"https://www.greatfrontend.com"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"yangshun","tags":["hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!-- truncate --\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}}')}}]);